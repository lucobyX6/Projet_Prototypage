
Projet_Proto_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d68  08004d68  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00005d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00005d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004d70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000060  08004dd0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004dd0  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d316  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019db  00000000  00000000  000133a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00014d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092c  00000000  00000000  00015930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158c2  00000000  00000000  0001625c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e62e  00000000  00000000  0002bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bfa  00000000  00000000  0003a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  000c1d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d2  00000000  00000000  000c54dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cb0 	.word	0x08004cb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004cb0 	.word	0x08004cb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fb0e 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f80e 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f8ec 	bl	8000ca4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000acc:	f000 f84a 	bl	8000b64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 f8b8 	bl	8000c44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <main+0x24>)
 8000ad8:	f002 f94a 	bl	8002d70 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <main+0x20>
 8000ae0:	2000007c 	.word	0x2000007c

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b090      	sub	sp, #64	@ 0x40
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2228      	movs	r2, #40	@ 0x28
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fc5c 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b1a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fdf7 	bl	8001718 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b30:	f000 f976 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fe21 	bl	8002794 <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b58:	f000 f962 	bl	8000e20 <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3740      	adds	r7, #64	@ 0x40
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8000baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb8:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bba:	f002 f821 	bl	8002c00 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000bc4:	f000 f92c 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bd6:	f002 fbb4 	bl	8003342 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000be0:	f000 f91e 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000be4:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000be6:	f002 f862 	bl	8002cae <HAL_TIM_IC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bf0:	f000 f916 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480f      	ldr	r0, [pc, #60]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000c04:	f002 ff0c 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000c0e:	f000 f907 	bl	8000e20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000c2a:	f002 faee 	bl	800320a <HAL_TIM_IC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000c34:	f000 f8f4 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	@ 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000007c 	.word	0x2000007c

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <MX_USART2_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c88:	f002 ff4e 	bl	8003b28 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 f8c5 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c8 	.word	0x200000c8
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a16      	ldr	r2, [pc, #88]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_GPIO_Init+0x74>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2108      	movs	r1, #8
 8000cee:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <MX_GPIO_Init+0x78>)
 8000cf0:	f000 fce0 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_GPIO_Init+0x78>)
 8000d0c:	f000 fb60 	bl	80013d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400

08000d20 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4831      	ldr	r0, [pc, #196]	@ (8000df0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000d2c:	f000 fcda 	bl	80016e4 <HAL_GPIO_TogglePin>
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d38:	d13f      	bne.n	8000dba <HAL_TIM_IC_CaptureCallback+0x9a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7f1b      	ldrb	r3, [r3, #28]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d13b      	bne.n	8000dba <HAL_TIM_IC_CaptureCallback+0x9a>
	{
		clock_act = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d42:	2100      	movs	r1, #0
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f002 fbc5 	bl	80034d4 <HAL_TIM_ReadCapturedValue>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a29      	ldr	r2, [pc, #164]	@ (8000df4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000d4e:	6013      	str	r3, [r2, #0]
		period = clock_act - clock_before;
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000d5c:	6013      	str	r3, [r2, #0]
		clock_before = clock_act;
 8000d5e:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a25      	ldr	r2, [pc, #148]	@ (8000df8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000d64:	6013      	str	r3, [r2, #0]
		temp = 1/(period*0.00000003125);
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fbca 	bl	8000504 <__aeabi_ui2d>
 8000d70:	a31d      	add	r3, pc, #116	@ (adr r3, 8000de8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fc3f 	bl	80005f8 <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	491f      	ldr	r1, [pc, #124]	@ (8000e00 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000d84:	f7ff fd62 	bl	800084c <__aeabi_ddiv>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fe44 	bl	8000a1c <__aeabi_d2f>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d98:	6013      	str	r3, [r2, #0]
		freq = temp;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da4:	ee17 2a90 	vmov	r2, s15
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000daa:	601a      	str	r2, [r3, #0]
		Capacity = (1000000/freq);
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a16      	ldr	r2, [pc, #88]	@ (8000e0c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4a16      	ldr	r2, [pc, #88]	@ (8000e10 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000db8:	6013      	str	r3, [r2, #0]
	}

	 sprintf(msg_data,"Frequence : %lu Hz | Capacite : %lu pF \n\r",freq, Capacity);
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4914      	ldr	r1, [pc, #80]	@ (8000e14 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000dc4:	4814      	ldr	r0, [pc, #80]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000dc6:	f003 fad3 	bl	8004370 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*) msg_data, strlen(msg_data), HAL_MAX_DELAY);
 8000dca:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000dcc:	f7ff fa00 	bl	80001d0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	490f      	ldr	r1, [pc, #60]	@ (8000e18 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000dda:	4810      	ldr	r0, [pc, #64]	@ (8000e1c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000ddc:	f002 fef2 	bl	8003bc4 <HAL_UART_Transmit>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000dec:	3e60c6f7 	.word	0x3e60c6f7
 8000df0:	48000400 	.word	0x48000400
 8000df4:	20000150 	.word	0x20000150
 8000df8:	20000154 	.word	0x20000154
 8000dfc:	20000158 	.word	0x20000158
 8000e00:	3ff00000 	.word	0x3ff00000
 8000e04:	20000160 	.word	0x20000160
 8000e08:	2000015c 	.word	0x2000015c
 8000e0c:	000f4240 	.word	0x000f4240
 8000e10:	20000000 	.word	0x20000000
 8000e14:	08004cc8 	.word	0x08004cc8
 8000e18:	20000164 	.word	0x20000164
 8000e1c:	200000c8 	.word	0x200000c8

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e94:	d130      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a19      	ldr	r2, [pc, #100]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_TIM_Base_MspInit+0x8c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Signal_Pin;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Signal_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee4:	f000 fa74 	bl	80013d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	201c      	movs	r0, #28
 8000eee:	f000 fa38 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef2:	201c      	movs	r0, #28
 8000ef4:	f000 fa51 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_UART_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d128      	bne.n	8000f78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a10      	ldr	r2, [pc, #64]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_UART_MspInit+0x80>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f000 fa2c 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f8c5 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <TIM2_IRQHandler+0x10>)
 8000fee:	f001 ffed 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000007c 	.word	0x2000007c

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f003 f9c8 	bl	80043c0 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20004000 	.word	0x20004000
 800105c:	00000400 	.word	0x00000400
 8001060:	200001c8 	.word	0x200001c8
 8001064:	20000318 	.word	0x20000318

08001068 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001090:	f7ff ffea 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopForever+0xe>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopForever+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 f987 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010be:	f7ff fcfd 	bl	8000abc <main>

080010c2 <LoopForever>:

LoopForever:
    b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010d0:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 80010d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010d8:	20000318 	.word	0x20000318

080010dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f92b 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fe96 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f943 	bl	80013b6 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f90b 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000004 	.word	0x20000004
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000000c 	.word	0x2000000c
 8001190:	200001cc 	.word	0x200001cc

08001194 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;  
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200001cc 	.word	0x200001cc

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	@ (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	@ (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e14e      	b.n	800167e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8140 	beq.w	8001678 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0203 	and.w	r2, r3, #3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 809a 	beq.w	8001678 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	4b55      	ldr	r3, [pc, #340]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a54      	ldr	r2, [pc, #336]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b52      	ldr	r3, [pc, #328]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155c:	4a50      	ldr	r2, [pc, #320]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1e0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a46      	ldr	r2, [pc, #280]	@ (80016a4 <HAL_GPIO_Init+0x2d4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a45      	ldr	r2, [pc, #276]	@ (80016a8 <HAL_GPIO_Init+0x2d8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1d8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a44      	ldr	r2, [pc, #272]	@ (80016ac <HAL_GPIO_Init+0x2dc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1d4>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015a4:	2305      	movs	r3, #5
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015b0:	2300      	movs	r3, #0
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c2:	4937      	ldr	r1, [pc, #220]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d0:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f4:	4a2e      	ldr	r2, [pc, #184]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800161e:	4a24      	ldr	r2, [pc, #144]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001648:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001672:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <HAL_GPIO_Init+0x2e0>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	f47f aea9 	bne.w	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000c00 	.word	0x48000c00
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43d9      	mvns	r1, r3
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800171e:	af00      	add	r7, sp, #0
 8001720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001728:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f001 b823 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 817d 	beq.w	8001a4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001754:	4bbc      	ldr	r3, [pc, #752]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4bb9      	ldr	r3, [pc, #740]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d15c      	bne.n	8001826 <HAL_RCC_OscConfig+0x10e>
 800176c:	4bb6      	ldr	r3, [pc, #728]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d155      	bne.n	8001826 <HAL_RCC_OscConfig+0x10e>
 800177a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800178e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x94>
 80017a6:	4ba8      	ldr	r3, [pc, #672]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e015      	b.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017d4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017dc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 811f 	beq.w	8001a4c <HAL_RCC_OscConfig+0x334>
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8116 	bne.w	8001a4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f000 bfaf 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x12e>
 8001838:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a82      	ldr	r2, [pc, #520]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e036      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x158>
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800185c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b79      	ldr	r3, [pc, #484]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a78      	ldr	r2, [pc, #480]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001868:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e021      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 8001870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x184>
 8001882:	4b71      	ldr	r3, [pc, #452]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a70      	ldr	r2, [pc, #448]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6d      	ldr	r2, [pc, #436]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a69      	ldr	r2, [pc, #420]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a66      	ldr	r2, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b4:	4b64      	ldr	r3, [pc, #400]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	f023 020f 	bic.w	r2, r3, #15
 80018bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	495f      	ldr	r1, [pc, #380]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d059      	beq.n	8001992 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fc59 	bl	8001194 <HAL_GetTick>
 80018e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc54 	bl	8001194 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	@ 0x64
 80018f6:	d902      	bls.n	80018fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f000 bf43 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 80018fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001902:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001912:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x218>
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0x244>
 8001930:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001934:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001948:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800194c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001958:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001960:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001964:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001970:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ab      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1d0>
 8001990:	e05d      	b.n	8001a4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fbff 	bl	8001194 <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fbfa 	bl	8001194 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	@ 0x64
 80019aa:	d902      	bls.n	80019b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f000 bee9 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 80019b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2cc>
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_OscConfig+0x2f8>
 80019e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019fc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a14:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a18:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a1c:	fa92 f2a2 	rbit	r2, r2
 8001a20:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a24:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ab      	bne.n	800199c <HAL_RCC_OscConfig+0x284>
 8001a44:	e003      	b.n	8001a4e <HAL_RCC_OscConfig+0x336>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 817d 	beq.w	8001d5e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a64:	4ba6      	ldr	r3, [pc, #664]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a70:	4ba3      	ldr	r3, [pc, #652]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d172      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d16c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001a9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3a0>
 8001ab2:	4b93      	ldr	r3, [pc, #588]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e013      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c8>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ad0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001adc:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ae6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001af2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <HAL_RCC_OscConfig+0x410>
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 be2e 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b75      	ldr	r3, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	21f8      	movs	r1, #248	@ 0xf8
 8001b3e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b46:	fa91 f1a1 	rbit	r1, r1
 8001b4a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b52:	fab1 f181 	clz	r1, r1
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	408b      	lsls	r3, r1
 8001b5a:	4969      	ldr	r1, [pc, #420]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b60:	e0fd      	b.n	8001d5e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8088 	beq.w	8001c84 <HAL_RCC_OscConfig+0x56c>
 8001b74:	2301      	movs	r3, #1
 8001b76:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b86:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff faf8 	bl	8001194 <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff faf3 	bl	8001194 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d902      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bde2 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d8>
 8001bea:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e013      	b.n	8001c18 <HAL_RCC_OscConfig+0x500>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c08:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c14:	4b3a      	ldr	r3, [pc, #232]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f002 021f 	and.w	r2, r2, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0af      	beq.n	8001baa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	21f8      	movs	r1, #248	@ 0xf8
 8001c60:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c68:	fa91 f1a1 	rbit	r1, r1
 8001c6c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c70:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c74:	fab1 f181 	clz	r1, r1
 8001c78:	b2c9      	uxtb	r1, r1
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	4920      	ldr	r1, [pc, #128]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
 8001c82:	e06c      	b.n	8001d5e <HAL_RCC_OscConfig+0x646>
 8001c84:	2301      	movs	r3, #1
 8001c86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fa70 	bl	8001194 <HAL_GetTick>
 8001cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fa6b 	bl	8001194 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d902      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	f000 bd5a 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d104      	bne.n	8001d04 <HAL_RCC_OscConfig+0x5ec>
 8001cfa:	4b01      	ldr	r3, [pc, #4]	@ (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x614>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d28:	4bc8      	ldr	r3, [pc, #800]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d32:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ad      	bne.n	8001cba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8110 	beq.w	8001f94 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d079      	beq.n	8001e78 <HAL_RCC_OscConfig+0x760>
 8001d84:	2301      	movs	r3, #1
 8001d86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4bab      	ldr	r3, [pc, #684]	@ (8002050 <HAL_RCC_OscConfig+0x938>)
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f9f1 	bl	8001194 <HAL_GetTick>
 8001db2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f9ec 	bl	8001194 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d902      	bls.n	8001dce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f000 bcdb 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e28:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e34:	2102      	movs	r1, #2
 8001e36:	6019      	str	r1, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f1a3 	rbit	r1, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e4e:	6019      	str	r1, [r3, #0]
  return result;
 8001e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0a0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x6a0>
 8001e76:	e08d      	b.n	8001f94 <HAL_RCC_OscConfig+0x87c>
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ea4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b68      	ldr	r3, [pc, #416]	@ (8002050 <HAL_RCC_OscConfig+0x938>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff f96b 	bl	8001194 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f966 	bl	8001194 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d902      	bls.n	8001eda <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f000 bc55 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f06:	2202      	movs	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f52:	2102      	movs	r1, #2
 8001f54:	6019      	str	r1, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f1a3 	rbit	r1, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f6c:	6019      	str	r1, [r3, #0]
  return result;
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d197      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 81a1 	beq.w	80022ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d116      	bne.n	8001fea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	61d3      	str	r3, [r2, #28]
 8001fc8:	4b20      	ldr	r3, [pc, #128]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fde:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fe2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d11a      	bne.n	800202c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff f8c7 	bl	8001194 <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	e009      	b.n	8002020 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7ff f8c2 	bl	8001194 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	@ 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e3b1      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_RCC_OscConfig+0x93c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_OscConfig+0x940>
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a02      	ldr	r2, [pc, #8]	@ (800204c <HAL_RCC_OscConfig+0x934>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e03c      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	10908120 	.word	0x10908120
 8002054:	40007000 	.word	0x40007000
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x96a>
 8002068:	4bc1      	ldr	r3, [pc, #772]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4ac0      	ldr	r2, [pc, #768]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4bbe      	ldr	r3, [pc, #760]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4abd      	ldr	r2, [pc, #756]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e020      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x994>
 8002092:	4bb7      	ldr	r3, [pc, #732]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4ab6      	ldr	r2, [pc, #728]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4bb4      	ldr	r3, [pc, #720]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4ab3      	ldr	r2, [pc, #716]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 80020ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4aaf      	ldr	r2, [pc, #700]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	4bad      	ldr	r3, [pc, #692]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4aac      	ldr	r2, [pc, #688]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8081 	beq.w	80021d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f85d 	bl	8001194 <HAL_GetTick>
 80020da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7ff f858 	bl	8001194 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e345      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800213e:	601a      	str	r2, [r3, #0]
  return result;
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002148:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0xa4c>
 800215e:	4b84      	ldr	r3, [pc, #528]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	e013      	b.n	800218c <HAL_RCC_OscConfig+0xa74>
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002174:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b79      	ldr	r3, [pc, #484]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002190:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002194:	2102      	movs	r1, #2
 8002196:	6011      	str	r1, [r2, #0]
 8002198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800219c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	fa92 f1a2 	rbit	r1, r2
 80021a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021ae:	6011      	str	r1, [r2, #0]
  return result;
 80021b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d084      	beq.n	80020e0 <HAL_RCC_OscConfig+0x9c8>
 80021d6:	e07f      	b.n	80022d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe ffdc 	bl	8001194 <HAL_GetTick>
 80021dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe ffd7 	bl	8001194 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e2c4      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002226:	2202      	movs	r2, #2
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f2a3 	rbit	r2, r3
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002240:	601a      	str	r2, [r3, #0]
  return result;
 8002242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002246:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800224a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <HAL_RCC_OscConfig+0xb4e>
 8002260:	4b43      	ldr	r3, [pc, #268]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	e013      	b.n	800228e <HAL_RCC_OscConfig+0xb76>
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002292:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002296:	2102      	movs	r1, #2
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800229e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	fa92 f1a2 	rbit	r1, r2
 80022a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022b0:	6011      	str	r1, [r2, #0]
  return result;
 80022b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d184      	bne.n	80021e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a22      	ldr	r2, [pc, #136]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8242 	beq.w	8002782 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	f000 8213 	beq.w	8002732 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 8162 	bne.w	80025e2 <HAL_RCC_OscConfig+0xeca>
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002326:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002342:	601a      	str	r2, [r3, #0]
  return result;
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800234c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002358:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	461a      	mov	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe ff16 	bl	8001194 <HAL_GetTick>
 8002368:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e00c      	b.n	8002388 <HAL_RCC_OscConfig+0xc70>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe ff0e 	bl	8001194 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1fd      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0xcba>
 80023cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e027      	b.n	8002422 <HAL_RCC_OscConfig+0xd0a>
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b9c      	ldr	r3, [pc, #624]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002426:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800242a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002434:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fa92 f1a2 	rbit	r1, r2
 800243e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002442:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d182      	bne.n	8002374 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	430b      	orrs	r3, r1
 8002490:	497f      	ldr	r1, [pc, #508]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800249e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ba:	601a      	str	r2, [r3, #0]
  return result;
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	461a      	mov	r2, r3
 80024d8:	2301      	movs	r3, #1
 80024da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe5a 	bl	8001194 <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fe55 	bl	8001194 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e144      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002502:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800251e:	601a      	str	r2, [r3, #0]
  return result;
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0xe2c>
 800253e:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e027      	b.n	8002594 <HAL_RCC_OscConfig+0xe7c>
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800254c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002572:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002598:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800259c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fa92 f1a2 	rbit	r1, r2
 80025b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025b8:	6011      	str	r1, [r2, #0]
  return result;
 80025ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d082      	beq.n	80024e6 <HAL_RCC_OscConfig+0xdce>
 80025e0:	e0cf      	b.n	8002782 <HAL_RCC_OscConfig+0x106a>
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002606:	601a      	str	r2, [r3, #0]
  return result;
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002610:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800261c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	461a      	mov	r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fdb4 	bl	8001194 <HAL_GetTick>
 800262c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e009      	b.n	8002646 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fdaf 	bl	8001194 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e09e      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800264e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800266a:	601a      	str	r2, [r3, #0]
  return result;
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002674:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <HAL_RCC_OscConfig+0xf7c>
 800268a:	4b01      	ldr	r3, [pc, #4]	@ (8002690 <HAL_RCC_OscConfig+0xf78>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e029      	b.n	80026e4 <HAL_RCC_OscConfig+0xfcc>
 8002690:	40021000 	.word	0x40021000
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800269c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002790 <HAL_RCC_OscConfig+0x1078>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	fa92 f1a2 	rbit	r1, r2
 8002700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002704:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002708:	6011      	str	r1, [r2, #0]
  return result;
 800270a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800270e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d180      	bne.n	8002632 <HAL_RCC_OscConfig+0xf1a>
 8002730:	e027      	b.n	8002782 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e01e      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002746:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_RCC_OscConfig+0x1078>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800274e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002752:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	429a      	cmp	r2, r3
 8002764:	d10b      	bne.n	800277e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002766:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800276a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b09e      	sub	sp, #120	@ 0x78
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e162      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b90      	ldr	r3, [pc, #576]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b8d      	ldr	r3, [pc, #564]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	498b      	ldr	r1, [pc, #556]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b89      	ldr	r3, [pc, #548]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e14a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	497f      	ldr	r1, [pc, #508]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80dc 	beq.w	80029c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d13c      	bne.n	800288a <HAL_RCC_ClockConfig+0xf6>
 8002810:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002814:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800281e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_ClockConfig+0xa6>
 8002834:	4b6f      	ldr	r3, [pc, #444]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e00f      	b.n	800285a <HAL_RCC_ClockConfig+0xc6>
 800283a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800283e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	667b      	str	r3, [r7, #100]	@ 0x64
 8002848:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284c:	663b      	str	r3, [r7, #96]	@ 0x60
 800284e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002856:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800285e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d17b      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0f3      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d13c      	bne.n	800290c <HAL_RCC_ClockConfig+0x178>
 8002892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002896:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_ClockConfig+0x128>
 80028b6:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_ClockConfig+0x148>
 80028bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80028d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f002 021f 	and.w	r2, r2, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d13a      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b2      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_ClockConfig+0x1a0>
 800292e:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e00d      	b.n	8002950 <HAL_RCC_ClockConfig+0x1bc>
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2202      	movs	r2, #2
 8002952:	61ba      	str	r2, [r7, #24]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	617a      	str	r2, [r7, #20]
  return result;
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e079      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	491a      	ldr	r1, [pc, #104]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe fc00 	bl	8001194 <HAL_GetTick>
 8002994:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fbfc 	bl	8001194 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e061      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d214      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4906      	ldr	r1, [pc, #24]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e040      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	491a      	ldr	r1, [pc, #104]	@ (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a22:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4912      	ldr	r1, [pc, #72]	@ (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a36:	f000 f829 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a44:	22f0      	movs	r2, #240	@ 0xf0
 8002a46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fab2 f282 	clz	r2, r2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	40d3      	lsrs	r3, r2
 8002a5a:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x2ec>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <HAL_RCC_ClockConfig+0x2f0>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_RCC_ClockConfig+0x2f4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fb4e 	bl	800110c <HAL_InitTick>
  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3778      	adds	r7, #120	@ 0x78
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004cf4 	.word	0x08004cf4
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08b      	sub	sp, #44	@ 0x2c
 8002a90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x30>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aba:	e03c      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abe:	623b      	str	r3, [r7, #32]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ac8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002acc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	607a      	str	r2, [r7, #4]
  return result;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	220f      	movs	r2, #15
 8002af0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	60fa      	str	r2, [r7, #12]
  return result;
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	40d3      	lsrs	r3, r2
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b14:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b38:	623b      	str	r3, [r7, #32]
      break;
 8002b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	372c      	adds	r7, #44	@ 0x2c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	08004d0c 	.word	0x08004d0c
 8002b58:	08004d1c 	.word	0x08004d1c
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b7e:	f7ff ffef 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b8c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	fa92 f2a2 	rbit	r2, r2
 8002b98:	603a      	str	r2, [r7, #0]
  return result;
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	40d3      	lsrs	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004d04 	.word	0x08004d04

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bc2:	f7ff ffcd 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bd0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	603a      	str	r2, [r7, #0]
  return result;
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	40d3      	lsrs	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004d04 	.word	0x08004d04

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e049      	b.n	8002ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe f924 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 fcb4 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e049      	b.n	8002d54 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f841 	bl	8002d5c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 fc5d 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <HAL_TIM_IC_Start_IT+0x1e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e023      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0x66>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_IC_Start_IT+0x2e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e01b      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0x66>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_IC_Start_IT+0x3e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e013      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0x66>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start_IT+0x4e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e00b      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0x66>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0x5e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0x66>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_TIM_IC_Start_IT+0x78>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e013      	b.n	8002e10 <HAL_TIM_IC_Start_IT+0xa0>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d104      	bne.n	8002df8 <HAL_TIM_IC_Start_IT+0x88>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e00b      	b.n	8002e10 <HAL_TIM_IC_Start_IT+0xa0>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d104      	bne.n	8002e08 <HAL_TIM_IC_Start_IT+0x98>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e003      	b.n	8002e10 <HAL_TIM_IC_Start_IT+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e12:	7bbb      	ldrb	r3, [r7, #14]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e18:	7b7b      	ldrb	r3, [r7, #13]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0c9      	b.n	8002fb6 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Start_IT+0xc2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e30:	e023      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x10a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0xd2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	e01b      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x10a>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_IC_Start_IT+0xe2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e50:	e013      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x10a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_IC_Start_IT+0xf2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e60:	e00b      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x10a>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_IC_Start_IT+0x102>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x10a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_IC_Start_IT+0x11a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e88:	e013      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0x142>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_IC_Start_IT+0x12a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e98:	e00b      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0x142>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_IC_Start_IT+0x13a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ea8:	e003      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0x142>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d841      	bhi.n	8002f3c <HAL_TIM_IC_Start_IT+0x1cc>
 8002eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <HAL_TIM_IC_Start_IT+0x150>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f3d 	.word	0x08002f3d
 8002ec8:	08002f3d 	.word	0x08002f3d
 8002ecc:	08002f3d 	.word	0x08002f3d
 8002ed0:	08002f07 	.word	0x08002f07
 8002ed4:	08002f3d 	.word	0x08002f3d
 8002ed8:	08002f3d 	.word	0x08002f3d
 8002edc:	08002f3d 	.word	0x08002f3d
 8002ee0:	08002f19 	.word	0x08002f19
 8002ee4:	08002f3d 	.word	0x08002f3d
 8002ee8:	08002f3d 	.word	0x08002f3d
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f2b 	.word	0x08002f2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	60da      	str	r2, [r3, #12]
      break;
 8002f04:	e01d      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0204 	orr.w	r2, r2, #4
 8002f14:	60da      	str	r2, [r3, #12]
      break;
 8002f16:	e014      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	60da      	str	r2, [r3, #12]
      break;
 8002f28:	e00b      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0210 	orr.w	r2, r2, #16
 8002f38:	60da      	str	r2, [r3, #12]
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d135      	bne.n	8002fb4 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fd3f 	bl	80039d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	@ (8002fc0 <HAL_TIM_IC_Start_IT+0x250>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_TIM_IC_Start_IT+0x204>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d004      	beq.n	8002f74 <HAL_TIM_IC_Start_IT+0x204>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <HAL_TIM_IC_Start_IT+0x254>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d115      	bne.n	8002fa0 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <HAL_TIM_IC_Start_IT+0x258>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d015      	beq.n	8002fb2 <HAL_TIM_IC_Start_IT+0x242>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d011      	beq.n	8002fb2 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e008      	b.n	8002fb2 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e000      	b.n	8002fb4 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	00010007 	.word	0x00010007

08002fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fe86 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 faaa 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fab1 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0204 	mvn.w	r2, #4
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fe5c 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa80 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa87 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0208 	mvn.w	r2, #8
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fe32 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa56 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa5d 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0210 	mvn.w	r2, #16
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2208      	movs	r2, #8
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fe08 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa2c 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fa33 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0201 	mvn.w	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa06 	bl	800355c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b80      	cmp	r3, #128	@ 0x80
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fcc2 	bl	8003b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318a:	d10e      	bne.n	80031aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d107      	bne.n	80031aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fcb5 	bl	8003b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d10e      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f9e1 	bl	8003598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d10e      	bne.n	8003202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0220 	mvn.w	r2, #32
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc75 	bl	8003aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003224:	2302      	movs	r3, #2
 8003226:	e088      	b.n	800333a <HAL_TIM_IC_ConfigChannel+0x130>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11b      	bne.n	800326e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003246:	f000 fa1f 	bl	8003688 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 020c 	bic.w	r2, r2, #12
 8003258:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6999      	ldr	r1, [r3, #24]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	619a      	str	r2, [r3, #24]
 800326c:	e060      	b.n	8003330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d11c      	bne.n	80032ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003284:	f000 fa85 	bl	8003792 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003296:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	619a      	str	r2, [r3, #24]
 80032ac:	e040      	b.n	8003330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80032c4:	f000 fad2 	bl	800386c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020c 	bic.w	r2, r2, #12
 80032d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69d9      	ldr	r1, [r3, #28]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	61da      	str	r2, [r3, #28]
 80032ea:	e021      	b.n	8003330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d11c      	bne.n	800332c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003302:	f000 faef 	bl	80038e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003314:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	61da      	str	r2, [r3, #28]
 800332a:	e001      	b.n	8003330 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_TIM_ConfigClockSource+0x1c>
 800335a:	2302      	movs	r3, #2
 800335c:	e0b6      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x18a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003380:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003388:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339a:	d03e      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xd8>
 800339c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a0:	f200 8087 	bhi.w	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	f000 8086 	beq.w	80034b8 <HAL_TIM_ConfigClockSource+0x176>
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b0:	d87f      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033b2:	2b70      	cmp	r3, #112	@ 0x70
 80033b4:	d01a      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xaa>
 80033b6:	2b70      	cmp	r3, #112	@ 0x70
 80033b8:	d87b      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033ba:	2b60      	cmp	r3, #96	@ 0x60
 80033bc:	d050      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x11e>
 80033be:	2b60      	cmp	r3, #96	@ 0x60
 80033c0:	d877      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033c2:	2b50      	cmp	r3, #80	@ 0x50
 80033c4:	d03c      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0xfe>
 80033c6:	2b50      	cmp	r3, #80	@ 0x50
 80033c8:	d873      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d058      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x13e>
 80033ce:	2b40      	cmp	r3, #64	@ 0x40
 80033d0:	d86f      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033d2:	2b30      	cmp	r3, #48	@ 0x30
 80033d4:	d064      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15e>
 80033d6:	2b30      	cmp	r3, #48	@ 0x30
 80033d8:	d86b      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d060      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15e>
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d867      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d05c      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15e>
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d05a      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15e>
 80033ea:	e062      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	f000 faca 	bl	8003994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800340e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
      break;
 8003418:	e04f      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	f000 fab3 	bl	8003994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800343c:	609a      	str	r2, [r3, #8]
      break;
 800343e:	e03c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f971 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2150      	movs	r1, #80	@ 0x50
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fa80 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 800345e:	e02c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f9cd 	bl	800380c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2160      	movs	r1, #96	@ 0x60
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa70 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 800347e:	e01c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348c:	461a      	mov	r2, r3
 800348e:	f000 f951 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2140      	movs	r1, #64	@ 0x40
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fa60 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 800349e:	e00c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fa57 	bl	800395e <TIM_ITRx_SetConfig>
      break;
 80034b0:	e003      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d831      	bhi.n	800354c <HAL_TIM_ReadCapturedValue+0x78>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003525 	.word	0x08003525
 80034f4:	0800354d 	.word	0x0800354d
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	0800354d 	.word	0x0800354d
 8003500:	0800352f 	.word	0x0800352f
 8003504:	0800354d 	.word	0x0800354d
 8003508:	0800354d 	.word	0x0800354d
 800350c:	0800354d 	.word	0x0800354d
 8003510:	08003539 	.word	0x08003539
 8003514:	0800354d 	.word	0x0800354d
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800354d 	.word	0x0800354d
 8003520:	08003543 	.word	0x08003543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	60fb      	str	r3, [r7, #12]

      break;
 800352c:	e00f      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	60fb      	str	r3, [r7, #12]

      break;
 8003536:	e00a      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	60fb      	str	r3, [r7, #12]

      break;
 8003540:	e005      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	60fb      	str	r3, [r7, #12]

      break;
 800354a:	e000      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800354c:	bf00      	nop
  }

  return tmpreg;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a2e      	ldr	r2, [pc, #184]	@ (8003678 <TIM_Base_SetConfig+0xcc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x20>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	@ (8003678 <TIM_Base_SetConfig+0xcc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0x5a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0x5a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a22      	ldr	r2, [pc, #136]	@ (800367c <TIM_Base_SetConfig+0xd0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0x5a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a21      	ldr	r2, [pc, #132]	@ (8003680 <TIM_Base_SetConfig+0xd4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0x5a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a20      	ldr	r2, [pc, #128]	@ (8003684 <TIM_Base_SetConfig+0xd8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0e      	ldr	r2, [pc, #56]	@ (8003678 <TIM_Base_SetConfig+0xcc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <TIM_Base_SetConfig+0xd0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0c      	ldr	r2, [pc, #48]	@ (8003680 <TIM_Base_SetConfig+0xd4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0b      	ldr	r2, [pc, #44]	@ (8003684 <TIM_Base_SetConfig+0xd8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800

08003688 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <TIM_TI1_SetConfig+0xa4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_TI1_SetConfig+0x3e>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d003      	beq.n	80036c6 <TIM_TI1_SetConfig+0x3e>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <TIM_TI1_SetConfig+0xa8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <TIM_TI1_SetConfig+0x42>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <TIM_TI1_SetConfig+0x44>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e003      	b.n	80036ea <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f023 030a 	bic.w	r3, r3, #10
 8003704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 030a 	and.w	r3, r3, #10
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40014000 	.word	0x40014000

08003734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 030a 	bic.w	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0210 	bic.w	r2, r3, #16
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	031b      	lsls	r3, r3, #12
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 0210 	bic.w	r2, r3, #16
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	031b      	lsls	r3, r3, #12
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003848:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 0303 	bic.w	r3, r3, #3
 8003898:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80038bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003910:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003922:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	031b      	lsls	r3, r3, #12
 8003928:	b29b      	uxth	r3, r3
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003936:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	031b      	lsls	r3, r3, #12
 800393c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	f043 0307 	orr.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	021a      	lsls	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2201      	movs	r2, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	401a      	ands	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e04f      	b.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a14      	ldr	r2, [pc, #80]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa0:	d004      	beq.n	8003aac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a10      	ldr	r2, [pc, #64]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000

08003aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e040      	b.n	8003bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd f9da 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	@ 0x24
 8003b54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8b6 	bl	8003cd8 <UART_SetConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e022      	b.n	8003bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9e0 	bl	8003f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa67 	bl	8004088 <UART_CheckIdleState>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	@ 0x28
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d177      	bne.n	8003ccc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Transmit+0x24>
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e070      	b.n	8003cce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2221      	movs	r2, #33	@ 0x21
 8003bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bfa:	f7fd facb 	bl	8001194 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	88fa      	ldrh	r2, [r7, #6]
 8003c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c18:	d108      	bne.n	8003c2c <HAL_UART_Transmit+0x68>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e003      	b.n	8003c34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c34:	e02f      	b.n	8003c96 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fac9 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e03b      	b.n	8003cce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e007      	b.n	8003c84 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1c9      	bne.n	8003c36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	@ 0x40
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa93 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e005      	b.n	8003cce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b8a      	ldr	r3, [pc, #552]	@ (8003f2c <UART_SetConfig+0x254>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a78      	ldr	r2, [pc, #480]	@ (8003f30 <UART_SetConfig+0x258>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d120      	bne.n	8003d96 <UART_SetConfig+0xbe>
 8003d54:	4b77      	ldr	r3, [pc, #476]	@ (8003f34 <UART_SetConfig+0x25c>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d817      	bhi.n	8003d90 <UART_SetConfig+0xb8>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <UART_SetConfig+0x90>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d85 	.word	0x08003d85
 8003d70:	08003d8b 	.word	0x08003d8b
 8003d74:	08003d7f 	.word	0x08003d7f
 8003d78:	2300      	movs	r3, #0
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e01d      	b.n	8003dba <UART_SetConfig+0xe2>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e01a      	b.n	8003dba <UART_SetConfig+0xe2>
 8003d84:	2304      	movs	r3, #4
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e017      	b.n	8003dba <UART_SetConfig+0xe2>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e014      	b.n	8003dba <UART_SetConfig+0xe2>
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e011      	b.n	8003dba <UART_SetConfig+0xe2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a67      	ldr	r2, [pc, #412]	@ (8003f38 <UART_SetConfig+0x260>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d102      	bne.n	8003da6 <UART_SetConfig+0xce>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0xe2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <UART_SetConfig+0x264>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d102      	bne.n	8003db6 <UART_SetConfig+0xde>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e001      	b.n	8003dba <UART_SetConfig+0xe2>
 8003db6:	2310      	movs	r3, #16
 8003db8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc2:	d15a      	bne.n	8003e7a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d827      	bhi.n	8003e1a <UART_SetConfig+0x142>
 8003dca:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <UART_SetConfig+0xf8>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003e1b 	.word	0x08003e1b
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e1b 	.word	0x08003e1b
 8003dec:	08003e1b 	.word	0x08003e1b
 8003df0:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df4:	f7fe fec0 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003df8:	61b8      	str	r0, [r7, #24]
        break;
 8003dfa:	e013      	b.n	8003e24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7fe fede 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003e00:	61b8      	str	r0, [r7, #24]
        break;
 8003e02:	e00f      	b.n	8003e24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b4e      	ldr	r3, [pc, #312]	@ (8003f40 <UART_SetConfig+0x268>)
 8003e06:	61bb      	str	r3, [r7, #24]
        break;
 8003e08:	e00c      	b.n	8003e24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7fe fe3f 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8003e0e:	61b8      	str	r0, [r7, #24]
        break;
 8003e10:	e008      	b.n	8003e24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e004      	b.n	8003e24 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77bb      	strb	r3, [r7, #30]
        break;
 8003e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d074      	beq.n	8003f14 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	005a      	lsls	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d916      	bls.n	8003e74 <UART_SetConfig+0x19c>
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e4c:	d212      	bcs.n	8003e74 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f023 030f 	bic.w	r3, r3, #15
 8003e56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	89fb      	ldrh	r3, [r7, #14]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	89fa      	ldrh	r2, [r7, #14]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e04f      	b.n	8003f14 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77bb      	strb	r3, [r7, #30]
 8003e78:	e04c      	b.n	8003f14 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d828      	bhi.n	8003ed2 <UART_SetConfig+0x1fa>
 8003e80:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <UART_SetConfig+0x1b0>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003eb5 	.word	0x08003eb5
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08003ed3 	.word	0x08003ed3
 8003e98:	08003ec3 	.word	0x08003ec3
 8003e9c:	08003ed3 	.word	0x08003ed3
 8003ea0:	08003ed3 	.word	0x08003ed3
 8003ea4:	08003ed3 	.word	0x08003ed3
 8003ea8:	08003ecb 	.word	0x08003ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7fe fe64 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	61b8      	str	r0, [r7, #24]
        break;
 8003eb2:	e013      	b.n	8003edc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7fe fe82 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003eb8:	61b8      	str	r0, [r7, #24]
        break;
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ebc:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <UART_SetConfig+0x268>)
 8003ebe:	61bb      	str	r3, [r7, #24]
        break;
 8003ec0:	e00c      	b.n	8003edc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec2:	f7fe fde3 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8003ec6:	61b8      	str	r0, [r7, #24]
        break;
 8003ec8:	e008      	b.n	8003edc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e004      	b.n	8003edc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eda:	bf00      	nop
    }

    if (pclk != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d018      	beq.n	8003f14 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	085a      	lsrs	r2, r3, #1
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	441a      	add	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d909      	bls.n	8003f10 <UART_SetConfig+0x238>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f02:	d205      	bcs.n	8003f10 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	e001      	b.n	8003f14 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	efff69f3 	.word	0xefff69f3
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40004800 	.word	0x40004800
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004042:	d10a      	bne.n	800405a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b098      	sub	sp, #96	@ 0x60
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004098:	f7fd f87c 	bl	8001194 <HAL_GetTick>
 800409c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d12e      	bne.n	800410a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f88c 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d021      	beq.n	800410a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040da:	653b      	str	r3, [r7, #80]	@ 0x50
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e062      	b.n	80041d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d149      	bne.n	80041ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	2200      	movs	r2, #0
 8004122:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f856 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d03c      	beq.n	80041ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	623b      	str	r3, [r7, #32]
   return(result);
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30
 8004152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	60fb      	str	r3, [r7, #12]
   return(result);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	617b      	str	r3, [r7, #20]
   return(result);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e011      	b.n	80041d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3758      	adds	r7, #88	@ 0x58
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e049      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d045      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fc ffcf 	bl	8001194 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <UART_WaitOnFlagUntilTimeout+0x30>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e048      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d031      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d110      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2208      	movs	r2, #8
 800422e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f838 	bl	80042a6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2208      	movs	r2, #8
 800423a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e029      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004258:	d111      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f81e 	bl	80042a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e00f      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d0a6      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b095      	sub	sp, #84	@ 0x54
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004300:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	2b01      	cmp	r3, #1
 800431a:	d118      	bne.n	800434e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	60bb      	str	r3, [r7, #8]
   return(result);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0310 	bic.w	r3, r3, #16
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6979      	ldr	r1, [r7, #20]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	613b      	str	r3, [r7, #16]
   return(result);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004362:	bf00      	nop
 8004364:	3754      	adds	r7, #84	@ 0x54
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <siprintf>:
 8004370:	b40e      	push	{r1, r2, r3}
 8004372:	b500      	push	{lr}
 8004374:	b09c      	sub	sp, #112	@ 0x70
 8004376:	ab1d      	add	r3, sp, #116	@ 0x74
 8004378:	9002      	str	r0, [sp, #8]
 800437a:	9006      	str	r0, [sp, #24]
 800437c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004380:	4809      	ldr	r0, [pc, #36]	@ (80043a8 <siprintf+0x38>)
 8004382:	9107      	str	r1, [sp, #28]
 8004384:	9104      	str	r1, [sp, #16]
 8004386:	4909      	ldr	r1, [pc, #36]	@ (80043ac <siprintf+0x3c>)
 8004388:	f853 2b04 	ldr.w	r2, [r3], #4
 800438c:	9105      	str	r1, [sp, #20]
 800438e:	6800      	ldr	r0, [r0, #0]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	a902      	add	r1, sp, #8
 8004394:	f000 f994 	bl	80046c0 <_svfiprintf_r>
 8004398:	9b02      	ldr	r3, [sp, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	b01c      	add	sp, #112	@ 0x70
 80043a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a4:	b003      	add	sp, #12
 80043a6:	4770      	bx	lr
 80043a8:	20000010 	.word	0x20000010
 80043ac:	ffff0208 	.word	0xffff0208

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	@ (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000010 	.word	0x20000010

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004404 <__libc_init_array+0x38>)
 80043d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004408 <__libc_init_array+0x3c>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	2600      	movs	r6, #0
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	4d0b      	ldr	r5, [pc, #44]	@ (800440c <__libc_init_array+0x40>)
 80043de:	4c0c      	ldr	r4, [pc, #48]	@ (8004410 <__libc_init_array+0x44>)
 80043e0:	f000 fc66 	bl	8004cb0 <_init>
 80043e4:	1b64      	subs	r4, r4, r5
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	2600      	movs	r6, #0
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	08004d68 	.word	0x08004d68
 8004408:	08004d68 	.word	0x08004d68
 800440c:	08004d68 	.word	0x08004d68
 8004410:	08004d6c 	.word	0x08004d6c

08004414 <__retarget_lock_acquire_recursive>:
 8004414:	4770      	bx	lr

08004416 <__retarget_lock_release_recursive>:
 8004416:	4770      	bx	lr

08004418 <_free_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	2900      	cmp	r1, #0
 800441e:	d041      	beq.n	80044a4 <_free_r+0x8c>
 8004420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004424:	1f0c      	subs	r4, r1, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	18e4      	addlt	r4, r4, r3
 800442c:	f000 f8e0 	bl	80045f0 <__malloc_lock>
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <_free_r+0x90>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	b933      	cbnz	r3, 8004444 <_free_r+0x2c>
 8004436:	6063      	str	r3, [r4, #4]
 8004438:	6014      	str	r4, [r2, #0]
 800443a:	4628      	mov	r0, r5
 800443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004440:	f000 b8dc 	b.w	80045fc <__malloc_unlock>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d908      	bls.n	800445a <_free_r+0x42>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf01      	itttt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	1809      	addeq	r1, r1, r0
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	e7ed      	b.n	8004436 <_free_r+0x1e>
 800445a:	461a      	mov	r2, r3
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b10b      	cbz	r3, 8004464 <_free_r+0x4c>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d9fa      	bls.n	800445a <_free_r+0x42>
 8004464:	6811      	ldr	r1, [r2, #0]
 8004466:	1850      	adds	r0, r2, r1
 8004468:	42a0      	cmp	r0, r4
 800446a:	d10b      	bne.n	8004484 <_free_r+0x6c>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	4401      	add	r1, r0
 8004470:	1850      	adds	r0, r2, r1
 8004472:	4283      	cmp	r3, r0
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	d1e0      	bne.n	800443a <_free_r+0x22>
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	4408      	add	r0, r1
 8004480:	6010      	str	r0, [r2, #0]
 8004482:	e7da      	b.n	800443a <_free_r+0x22>
 8004484:	d902      	bls.n	800448c <_free_r+0x74>
 8004486:	230c      	movs	r3, #12
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	e7d6      	b.n	800443a <_free_r+0x22>
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	1821      	adds	r1, r4, r0
 8004490:	428b      	cmp	r3, r1
 8004492:	bf04      	itt	eq
 8004494:	6819      	ldreq	r1, [r3, #0]
 8004496:	685b      	ldreq	r3, [r3, #4]
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	bf04      	itt	eq
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	6054      	str	r4, [r2, #4]
 80044a2:	e7ca      	b.n	800443a <_free_r+0x22>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	20000314 	.word	0x20000314

080044ac <sbrk_aligned>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4e0f      	ldr	r6, [pc, #60]	@ (80044ec <sbrk_aligned+0x40>)
 80044b0:	460c      	mov	r4, r1
 80044b2:	6831      	ldr	r1, [r6, #0]
 80044b4:	4605      	mov	r5, r0
 80044b6:	b911      	cbnz	r1, 80044be <sbrk_aligned+0x12>
 80044b8:	f000 fba6 	bl	8004c08 <_sbrk_r>
 80044bc:	6030      	str	r0, [r6, #0]
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 fba1 	bl	8004c08 <_sbrk_r>
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d103      	bne.n	80044d2 <sbrk_aligned+0x26>
 80044ca:	f04f 34ff 	mov.w	r4, #4294967295
 80044ce:	4620      	mov	r0, r4
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	1cc4      	adds	r4, r0, #3
 80044d4:	f024 0403 	bic.w	r4, r4, #3
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d0f8      	beq.n	80044ce <sbrk_aligned+0x22>
 80044dc:	1a21      	subs	r1, r4, r0
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fb92 	bl	8004c08 <_sbrk_r>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d1f2      	bne.n	80044ce <sbrk_aligned+0x22>
 80044e8:	e7ef      	b.n	80044ca <sbrk_aligned+0x1e>
 80044ea:	bf00      	nop
 80044ec:	20000310 	.word	0x20000310

080044f0 <_malloc_r>:
 80044f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4606      	mov	r6, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d904      	bls.n	8004516 <_malloc_r+0x26>
 800450c:	230c      	movs	r3, #12
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	2000      	movs	r0, #0
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045ec <_malloc_r+0xfc>
 800451a:	f000 f869 	bl	80045f0 <__malloc_lock>
 800451e:	f8d8 3000 	ldr.w	r3, [r8]
 8004522:	461c      	mov	r4, r3
 8004524:	bb44      	cbnz	r4, 8004578 <_malloc_r+0x88>
 8004526:	4629      	mov	r1, r5
 8004528:	4630      	mov	r0, r6
 800452a:	f7ff ffbf 	bl	80044ac <sbrk_aligned>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	4604      	mov	r4, r0
 8004532:	d158      	bne.n	80045e6 <_malloc_r+0xf6>
 8004534:	f8d8 4000 	ldr.w	r4, [r8]
 8004538:	4627      	mov	r7, r4
 800453a:	2f00      	cmp	r7, #0
 800453c:	d143      	bne.n	80045c6 <_malloc_r+0xd6>
 800453e:	2c00      	cmp	r4, #0
 8004540:	d04b      	beq.n	80045da <_malloc_r+0xea>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	4639      	mov	r1, r7
 8004546:	4630      	mov	r0, r6
 8004548:	eb04 0903 	add.w	r9, r4, r3
 800454c:	f000 fb5c 	bl	8004c08 <_sbrk_r>
 8004550:	4581      	cmp	r9, r0
 8004552:	d142      	bne.n	80045da <_malloc_r+0xea>
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	1a6d      	subs	r5, r5, r1
 8004558:	4629      	mov	r1, r5
 800455a:	4630      	mov	r0, r6
 800455c:	f7ff ffa6 	bl	80044ac <sbrk_aligned>
 8004560:	3001      	adds	r0, #1
 8004562:	d03a      	beq.n	80045da <_malloc_r+0xea>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	442b      	add	r3, r5
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	f8d8 3000 	ldr.w	r3, [r8]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	bb62      	cbnz	r2, 80045cc <_malloc_r+0xdc>
 8004572:	f8c8 7000 	str.w	r7, [r8]
 8004576:	e00f      	b.n	8004598 <_malloc_r+0xa8>
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	1b52      	subs	r2, r2, r5
 800457c:	d420      	bmi.n	80045c0 <_malloc_r+0xd0>
 800457e:	2a0b      	cmp	r2, #11
 8004580:	d917      	bls.n	80045b2 <_malloc_r+0xc2>
 8004582:	1961      	adds	r1, r4, r5
 8004584:	42a3      	cmp	r3, r4
 8004586:	6025      	str	r5, [r4, #0]
 8004588:	bf18      	it	ne
 800458a:	6059      	strne	r1, [r3, #4]
 800458c:	6863      	ldr	r3, [r4, #4]
 800458e:	bf08      	it	eq
 8004590:	f8c8 1000 	streq.w	r1, [r8]
 8004594:	5162      	str	r2, [r4, r5]
 8004596:	604b      	str	r3, [r1, #4]
 8004598:	4630      	mov	r0, r6
 800459a:	f000 f82f 	bl	80045fc <__malloc_unlock>
 800459e:	f104 000b 	add.w	r0, r4, #11
 80045a2:	1d23      	adds	r3, r4, #4
 80045a4:	f020 0007 	bic.w	r0, r0, #7
 80045a8:	1ac2      	subs	r2, r0, r3
 80045aa:	bf1c      	itt	ne
 80045ac:	1a1b      	subne	r3, r3, r0
 80045ae:	50a3      	strne	r3, [r4, r2]
 80045b0:	e7af      	b.n	8004512 <_malloc_r+0x22>
 80045b2:	6862      	ldr	r2, [r4, #4]
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	bf0c      	ite	eq
 80045b8:	f8c8 2000 	streq.w	r2, [r8]
 80045bc:	605a      	strne	r2, [r3, #4]
 80045be:	e7eb      	b.n	8004598 <_malloc_r+0xa8>
 80045c0:	4623      	mov	r3, r4
 80045c2:	6864      	ldr	r4, [r4, #4]
 80045c4:	e7ae      	b.n	8004524 <_malloc_r+0x34>
 80045c6:	463c      	mov	r4, r7
 80045c8:	687f      	ldr	r7, [r7, #4]
 80045ca:	e7b6      	b.n	800453a <_malloc_r+0x4a>
 80045cc:	461a      	mov	r2, r3
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	d1fb      	bne.n	80045cc <_malloc_r+0xdc>
 80045d4:	2300      	movs	r3, #0
 80045d6:	6053      	str	r3, [r2, #4]
 80045d8:	e7de      	b.n	8004598 <_malloc_r+0xa8>
 80045da:	230c      	movs	r3, #12
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 f80c 	bl	80045fc <__malloc_unlock>
 80045e4:	e794      	b.n	8004510 <_malloc_r+0x20>
 80045e6:	6005      	str	r5, [r0, #0]
 80045e8:	e7d6      	b.n	8004598 <_malloc_r+0xa8>
 80045ea:	bf00      	nop
 80045ec:	20000314 	.word	0x20000314

080045f0 <__malloc_lock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	@ (80045f8 <__malloc_lock+0x8>)
 80045f2:	f7ff bf0f 	b.w	8004414 <__retarget_lock_acquire_recursive>
 80045f6:	bf00      	nop
 80045f8:	2000030c 	.word	0x2000030c

080045fc <__malloc_unlock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	@ (8004604 <__malloc_unlock+0x8>)
 80045fe:	f7ff bf0a 	b.w	8004416 <__retarget_lock_release_recursive>
 8004602:	bf00      	nop
 8004604:	2000030c 	.word	0x2000030c

08004608 <__ssputs_r>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	688e      	ldr	r6, [r1, #8]
 800460e:	461f      	mov	r7, r3
 8004610:	42be      	cmp	r6, r7
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	4682      	mov	sl, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4690      	mov	r8, r2
 800461a:	d82d      	bhi.n	8004678 <__ssputs_r+0x70>
 800461c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004620:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004624:	d026      	beq.n	8004674 <__ssputs_r+0x6c>
 8004626:	6965      	ldr	r5, [r4, #20]
 8004628:	6909      	ldr	r1, [r1, #16]
 800462a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462e:	eba3 0901 	sub.w	r9, r3, r1
 8004632:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004636:	1c7b      	adds	r3, r7, #1
 8004638:	444b      	add	r3, r9
 800463a:	106d      	asrs	r5, r5, #1
 800463c:	429d      	cmp	r5, r3
 800463e:	bf38      	it	cc
 8004640:	461d      	movcc	r5, r3
 8004642:	0553      	lsls	r3, r2, #21
 8004644:	d527      	bpl.n	8004696 <__ssputs_r+0x8e>
 8004646:	4629      	mov	r1, r5
 8004648:	f7ff ff52 	bl	80044f0 <_malloc_r>
 800464c:	4606      	mov	r6, r0
 800464e:	b360      	cbz	r0, 80046aa <__ssputs_r+0xa2>
 8004650:	6921      	ldr	r1, [r4, #16]
 8004652:	464a      	mov	r2, r9
 8004654:	f000 fae8 	bl	8004c28 <memcpy>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800465e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004662:	81a3      	strh	r3, [r4, #12]
 8004664:	6126      	str	r6, [r4, #16]
 8004666:	6165      	str	r5, [r4, #20]
 8004668:	444e      	add	r6, r9
 800466a:	eba5 0509 	sub.w	r5, r5, r9
 800466e:	6026      	str	r6, [r4, #0]
 8004670:	60a5      	str	r5, [r4, #8]
 8004672:	463e      	mov	r6, r7
 8004674:	42be      	cmp	r6, r7
 8004676:	d900      	bls.n	800467a <__ssputs_r+0x72>
 8004678:	463e      	mov	r6, r7
 800467a:	6820      	ldr	r0, [r4, #0]
 800467c:	4632      	mov	r2, r6
 800467e:	4641      	mov	r1, r8
 8004680:	f000 faa8 	bl	8004bd4 <memmove>
 8004684:	68a3      	ldr	r3, [r4, #8]
 8004686:	1b9b      	subs	r3, r3, r6
 8004688:	60a3      	str	r3, [r4, #8]
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4433      	add	r3, r6
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	2000      	movs	r0, #0
 8004692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004696:	462a      	mov	r2, r5
 8004698:	f000 fad4 	bl	8004c44 <_realloc_r>
 800469c:	4606      	mov	r6, r0
 800469e:	2800      	cmp	r0, #0
 80046a0:	d1e0      	bne.n	8004664 <__ssputs_r+0x5c>
 80046a2:	6921      	ldr	r1, [r4, #16]
 80046a4:	4650      	mov	r0, sl
 80046a6:	f7ff feb7 	bl	8004418 <_free_r>
 80046aa:	230c      	movs	r3, #12
 80046ac:	f8ca 3000 	str.w	r3, [sl]
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e7e9      	b.n	8004692 <__ssputs_r+0x8a>
	...

080046c0 <_svfiprintf_r>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	4698      	mov	r8, r3
 80046c6:	898b      	ldrh	r3, [r1, #12]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	b09d      	sub	sp, #116	@ 0x74
 80046cc:	4607      	mov	r7, r0
 80046ce:	460d      	mov	r5, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	d510      	bpl.n	80046f6 <_svfiprintf_r+0x36>
 80046d4:	690b      	ldr	r3, [r1, #16]
 80046d6:	b973      	cbnz	r3, 80046f6 <_svfiprintf_r+0x36>
 80046d8:	2140      	movs	r1, #64	@ 0x40
 80046da:	f7ff ff09 	bl	80044f0 <_malloc_r>
 80046de:	6028      	str	r0, [r5, #0]
 80046e0:	6128      	str	r0, [r5, #16]
 80046e2:	b930      	cbnz	r0, 80046f2 <_svfiprintf_r+0x32>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b01d      	add	sp, #116	@ 0x74
 80046ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f2:	2340      	movs	r3, #64	@ 0x40
 80046f4:	616b      	str	r3, [r5, #20]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80046fa:	2320      	movs	r3, #32
 80046fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004700:	f8cd 800c 	str.w	r8, [sp, #12]
 8004704:	2330      	movs	r3, #48	@ 0x30
 8004706:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048a4 <_svfiprintf_r+0x1e4>
 800470a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800470e:	f04f 0901 	mov.w	r9, #1
 8004712:	4623      	mov	r3, r4
 8004714:	469a      	mov	sl, r3
 8004716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800471a:	b10a      	cbz	r2, 8004720 <_svfiprintf_r+0x60>
 800471c:	2a25      	cmp	r2, #37	@ 0x25
 800471e:	d1f9      	bne.n	8004714 <_svfiprintf_r+0x54>
 8004720:	ebba 0b04 	subs.w	fp, sl, r4
 8004724:	d00b      	beq.n	800473e <_svfiprintf_r+0x7e>
 8004726:	465b      	mov	r3, fp
 8004728:	4622      	mov	r2, r4
 800472a:	4629      	mov	r1, r5
 800472c:	4638      	mov	r0, r7
 800472e:	f7ff ff6b 	bl	8004608 <__ssputs_r>
 8004732:	3001      	adds	r0, #1
 8004734:	f000 80a7 	beq.w	8004886 <_svfiprintf_r+0x1c6>
 8004738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473a:	445a      	add	r2, fp
 800473c:	9209      	str	r2, [sp, #36]	@ 0x24
 800473e:	f89a 3000 	ldrb.w	r3, [sl]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 809f 	beq.w	8004886 <_svfiprintf_r+0x1c6>
 8004748:	2300      	movs	r3, #0
 800474a:	f04f 32ff 	mov.w	r2, #4294967295
 800474e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004752:	f10a 0a01 	add.w	sl, sl, #1
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	9307      	str	r3, [sp, #28]
 800475a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800475e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004760:	4654      	mov	r4, sl
 8004762:	2205      	movs	r2, #5
 8004764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004768:	484e      	ldr	r0, [pc, #312]	@ (80048a4 <_svfiprintf_r+0x1e4>)
 800476a:	f7fb fd39 	bl	80001e0 <memchr>
 800476e:	9a04      	ldr	r2, [sp, #16]
 8004770:	b9d8      	cbnz	r0, 80047aa <_svfiprintf_r+0xea>
 8004772:	06d0      	lsls	r0, r2, #27
 8004774:	bf44      	itt	mi
 8004776:	2320      	movmi	r3, #32
 8004778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477c:	0711      	lsls	r1, r2, #28
 800477e:	bf44      	itt	mi
 8004780:	232b      	movmi	r3, #43	@ 0x2b
 8004782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b2a      	cmp	r3, #42	@ 0x2a
 800478c:	d015      	beq.n	80047ba <_svfiprintf_r+0xfa>
 800478e:	9a07      	ldr	r2, [sp, #28]
 8004790:	4654      	mov	r4, sl
 8004792:	2000      	movs	r0, #0
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	4621      	mov	r1, r4
 800479a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479e:	3b30      	subs	r3, #48	@ 0x30
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d94b      	bls.n	800483c <_svfiprintf_r+0x17c>
 80047a4:	b1b0      	cbz	r0, 80047d4 <_svfiprintf_r+0x114>
 80047a6:	9207      	str	r2, [sp, #28]
 80047a8:	e014      	b.n	80047d4 <_svfiprintf_r+0x114>
 80047aa:	eba0 0308 	sub.w	r3, r0, r8
 80047ae:	fa09 f303 	lsl.w	r3, r9, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	46a2      	mov	sl, r4
 80047b8:	e7d2      	b.n	8004760 <_svfiprintf_r+0xa0>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	9103      	str	r1, [sp, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfbb      	ittet	lt
 80047c6:	425b      	neglt	r3, r3
 80047c8:	f042 0202 	orrlt.w	r2, r2, #2
 80047cc:	9307      	strge	r3, [sp, #28]
 80047ce:	9307      	strlt	r3, [sp, #28]
 80047d0:	bfb8      	it	lt
 80047d2:	9204      	strlt	r2, [sp, #16]
 80047d4:	7823      	ldrb	r3, [r4, #0]
 80047d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d8:	d10a      	bne.n	80047f0 <_svfiprintf_r+0x130>
 80047da:	7863      	ldrb	r3, [r4, #1]
 80047dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80047de:	d132      	bne.n	8004846 <_svfiprintf_r+0x186>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ec:	3402      	adds	r4, #2
 80047ee:	9305      	str	r3, [sp, #20]
 80047f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048b4 <_svfiprintf_r+0x1f4>
 80047f4:	7821      	ldrb	r1, [r4, #0]
 80047f6:	2203      	movs	r2, #3
 80047f8:	4650      	mov	r0, sl
 80047fa:	f7fb fcf1 	bl	80001e0 <memchr>
 80047fe:	b138      	cbz	r0, 8004810 <_svfiprintf_r+0x150>
 8004800:	9b04      	ldr	r3, [sp, #16]
 8004802:	eba0 000a 	sub.w	r0, r0, sl
 8004806:	2240      	movs	r2, #64	@ 0x40
 8004808:	4082      	lsls	r2, r0
 800480a:	4313      	orrs	r3, r2
 800480c:	3401      	adds	r4, #1
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004814:	4824      	ldr	r0, [pc, #144]	@ (80048a8 <_svfiprintf_r+0x1e8>)
 8004816:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800481a:	2206      	movs	r2, #6
 800481c:	f7fb fce0 	bl	80001e0 <memchr>
 8004820:	2800      	cmp	r0, #0
 8004822:	d036      	beq.n	8004892 <_svfiprintf_r+0x1d2>
 8004824:	4b21      	ldr	r3, [pc, #132]	@ (80048ac <_svfiprintf_r+0x1ec>)
 8004826:	bb1b      	cbnz	r3, 8004870 <_svfiprintf_r+0x1b0>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	3307      	adds	r3, #7
 800482c:	f023 0307 	bic.w	r3, r3, #7
 8004830:	3308      	adds	r3, #8
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004836:	4433      	add	r3, r6
 8004838:	9309      	str	r3, [sp, #36]	@ 0x24
 800483a:	e76a      	b.n	8004712 <_svfiprintf_r+0x52>
 800483c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004840:	460c      	mov	r4, r1
 8004842:	2001      	movs	r0, #1
 8004844:	e7a8      	b.n	8004798 <_svfiprintf_r+0xd8>
 8004846:	2300      	movs	r3, #0
 8004848:	3401      	adds	r4, #1
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	4619      	mov	r1, r3
 800484e:	f04f 0c0a 	mov.w	ip, #10
 8004852:	4620      	mov	r0, r4
 8004854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004858:	3a30      	subs	r2, #48	@ 0x30
 800485a:	2a09      	cmp	r2, #9
 800485c:	d903      	bls.n	8004866 <_svfiprintf_r+0x1a6>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0c6      	beq.n	80047f0 <_svfiprintf_r+0x130>
 8004862:	9105      	str	r1, [sp, #20]
 8004864:	e7c4      	b.n	80047f0 <_svfiprintf_r+0x130>
 8004866:	fb0c 2101 	mla	r1, ip, r1, r2
 800486a:	4604      	mov	r4, r0
 800486c:	2301      	movs	r3, #1
 800486e:	e7f0      	b.n	8004852 <_svfiprintf_r+0x192>
 8004870:	ab03      	add	r3, sp, #12
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	462a      	mov	r2, r5
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <_svfiprintf_r+0x1f0>)
 8004878:	a904      	add	r1, sp, #16
 800487a:	4638      	mov	r0, r7
 800487c:	f3af 8000 	nop.w
 8004880:	1c42      	adds	r2, r0, #1
 8004882:	4606      	mov	r6, r0
 8004884:	d1d6      	bne.n	8004834 <_svfiprintf_r+0x174>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	065b      	lsls	r3, r3, #25
 800488a:	f53f af2d 	bmi.w	80046e8 <_svfiprintf_r+0x28>
 800488e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004890:	e72c      	b.n	80046ec <_svfiprintf_r+0x2c>
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <_svfiprintf_r+0x1f0>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4638      	mov	r0, r7
 800489e:	f000 f879 	bl	8004994 <_printf_i>
 80048a2:	e7ed      	b.n	8004880 <_svfiprintf_r+0x1c0>
 80048a4:	08004d2c 	.word	0x08004d2c
 80048a8:	08004d36 	.word	0x08004d36
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004609 	.word	0x08004609
 80048b4:	08004d32 	.word	0x08004d32

080048b8 <_printf_common>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	4616      	mov	r6, r2
 80048be:	4698      	mov	r8, r3
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfb8      	it	lt
 80048cc:	4613      	movlt	r3, r2
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048d4:	4607      	mov	r7, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b10a      	cbz	r2, 80048de <_printf_common+0x26>
 80048da:	3301      	adds	r3, #1
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	6833      	ldrmi	r3, [r6, #0]
 80048e6:	3302      	addmi	r3, #2
 80048e8:	6033      	strmi	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	f015 0506 	ands.w	r5, r5, #6
 80048f0:	d106      	bne.n	8004900 <_printf_common+0x48>
 80048f2:	f104 0a19 	add.w	sl, r4, #25
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dc26      	bgt.n	800494e <_printf_common+0x96>
 8004900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	3b00      	subs	r3, #0
 8004908:	bf18      	it	ne
 800490a:	2301      	movne	r3, #1
 800490c:	0692      	lsls	r2, r2, #26
 800490e:	d42b      	bmi.n	8004968 <_printf_common+0xb0>
 8004910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004914:	4641      	mov	r1, r8
 8004916:	4638      	mov	r0, r7
 8004918:	47c8      	blx	r9
 800491a:	3001      	adds	r0, #1
 800491c:	d01e      	beq.n	800495c <_printf_common+0xa4>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	2b04      	cmp	r3, #4
 8004928:	bf02      	ittt	eq
 800492a:	68e5      	ldreq	r5, [r4, #12]
 800492c:	6833      	ldreq	r3, [r6, #0]
 800492e:	1aed      	subeq	r5, r5, r3
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	2600      	movs	r6, #0
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xc8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xa8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4641      	mov	r1, r8
 8004954:	4638      	mov	r0, r7
 8004956:	47c8      	blx	r9
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xac>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c6      	b.n	80048f6 <_printf_common+0x3e>
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	2030      	movs	r0, #48	@ 0x30
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004972:	4422      	add	r2, r4
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800497c:	3302      	adds	r3, #2
 800497e:	e7c7      	b.n	8004910 <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4641      	mov	r1, r8
 8004986:	4638      	mov	r0, r7
 8004988:	47c8      	blx	r9
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa4>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x8e>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800499c:	2f78      	cmp	r7, #120	@ 0x78
 800499e:	4691      	mov	r9, r2
 80049a0:	4680      	mov	r8, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	469a      	mov	sl, r3
 80049a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	@ 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d2 	beq.w	8004b5a <_printf_i+0x1c6>
 80049b6:	2f58      	cmp	r7, #88	@ 0x58
 80049b8:	f000 80b9 	beq.w	8004b2e <_printf_i+0x19a>
 80049bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	@ (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b41 	.word	0x08004b41
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004afb 	.word	0x08004afb
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b63 	.word	0x08004b63
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a6b 	.word	0x08004a6b
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b03 	.word	0x08004b03
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6032      	str	r2, [r6, #0]
 8004a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09d      	b.n	8004b7c <_printf_i+0x1e8>
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	0606      	lsls	r6, r0, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xbc>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <_printf_i+0xc4>
 8004a50:	0645      	lsls	r5, r0, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xb8>
 8004a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xd0>
 8004a5c:	232d      	movs	r3, #45	@ 0x2d
 8004a5e:	426d      	negs	r5, r5
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a64:	4859      	ldr	r0, [pc, #356]	@ (8004bcc <_printf_i+0x238>)
 8004a66:	230a      	movs	r3, #10
 8004a68:	e011      	b.n	8004a8e <_printf_i+0xfa>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	0608      	lsls	r0, r1, #24
 8004a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a74:	d402      	bmi.n	8004a7c <_printf_i+0xe8>
 8004a76:	0649      	lsls	r1, r1, #25
 8004a78:	bf48      	it	mi
 8004a7a:	b2ad      	uxthmi	r5, r5
 8004a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7e:	4853      	ldr	r0, [pc, #332]	@ (8004bcc <_printf_i+0x238>)
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	bf14      	ite	ne
 8004a84:	230a      	movne	r3, #10
 8004a86:	2308      	moveq	r3, #8
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8e:	6866      	ldr	r6, [r4, #4]
 8004a90:	60a6      	str	r6, [r4, #8]
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	bfa2      	ittt	ge
 8004a96:	6821      	ldrge	r1, [r4, #0]
 8004a98:	f021 0104 	bicge.w	r1, r1, #4
 8004a9c:	6021      	strge	r1, [r4, #0]
 8004a9e:	b90d      	cbnz	r5, 8004aa4 <_printf_i+0x110>
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	d04b      	beq.n	8004b3c <_printf_i+0x1a8>
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8004aae:	5dc7      	ldrb	r7, [r0, r7]
 8004ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab4:	462f      	mov	r7, r5
 8004ab6:	42bb      	cmp	r3, r7
 8004ab8:	460d      	mov	r5, r1
 8004aba:	d9f4      	bls.n	8004aa6 <_printf_i+0x112>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10b      	bne.n	8004ad8 <_printf_i+0x144>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	07df      	lsls	r7, r3, #31
 8004ac4:	d508      	bpl.n	8004ad8 <_printf_i+0x144>
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	6861      	ldr	r1, [r4, #4]
 8004aca:	4299      	cmp	r1, r3
 8004acc:	bfde      	ittt	le
 8004ace:	2330      	movle	r3, #48	@ 0x30
 8004ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad8:	1b92      	subs	r2, r2, r6
 8004ada:	6122      	str	r2, [r4, #16]
 8004adc:	f8cd a000 	str.w	sl, [sp]
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	aa03      	add	r2, sp, #12
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff fee6 	bl	80048b8 <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d14a      	bne.n	8004b86 <_printf_i+0x1f2>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	b004      	add	sp, #16
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0320 	orr.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	4833      	ldr	r0, [pc, #204]	@ (8004bd0 <_printf_i+0x23c>)
 8004b04:	2778      	movs	r7, #120	@ 0x78
 8004b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	6831      	ldr	r1, [r6, #0]
 8004b0e:	061f      	lsls	r7, r3, #24
 8004b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0x188>
 8004b16:	065f      	lsls	r7, r3, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	6031      	str	r1, [r6, #0]
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	bf44      	itt	mi
 8004b22:	f043 0320 	orrmi.w	r3, r3, #32
 8004b26:	6023      	strmi	r3, [r4, #0]
 8004b28:	b11d      	cbz	r5, 8004b32 <_printf_i+0x19e>
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	e7ac      	b.n	8004a88 <_printf_i+0xf4>
 8004b2e:	4827      	ldr	r0, [pc, #156]	@ (8004bcc <_printf_i+0x238>)
 8004b30:	e7e9      	b.n	8004b06 <_printf_i+0x172>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f023 0320 	bic.w	r3, r3, #32
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	e7f6      	b.n	8004b2a <_printf_i+0x196>
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	e7bd      	b.n	8004abc <_printf_i+0x128>
 8004b40:	6833      	ldr	r3, [r6, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	6961      	ldr	r1, [r4, #20]
 8004b46:	1d18      	adds	r0, r3, #4
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	062e      	lsls	r6, r5, #24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	d501      	bpl.n	8004b54 <_printf_i+0x1c0>
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <_printf_i+0x1c6>
 8004b54:	0668      	lsls	r0, r5, #25
 8004b56:	d5fb      	bpl.n	8004b50 <_printf_i+0x1bc>
 8004b58:	8019      	strh	r1, [r3, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	4616      	mov	r6, r2
 8004b60:	e7bc      	b.n	8004adc <_printf_i+0x148>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	6032      	str	r2, [r6, #0]
 8004b68:	681e      	ldr	r6, [r3, #0]
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7fb fb36 	bl	80001e0 <memchr>
 8004b74:	b108      	cbz	r0, 8004b7a <_printf_i+0x1e6>
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	6060      	str	r0, [r4, #4]
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b84:	e7aa      	b.n	8004adc <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	47d0      	blx	sl
 8004b90:	3001      	adds	r0, #1
 8004b92:	d0ad      	beq.n	8004af0 <_printf_i+0x15c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	079b      	lsls	r3, r3, #30
 8004b98:	d413      	bmi.n	8004bc2 <_printf_i+0x22e>
 8004b9a:	68e0      	ldr	r0, [r4, #12]
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	4298      	cmp	r0, r3
 8004ba0:	bfb8      	it	lt
 8004ba2:	4618      	movlt	r0, r3
 8004ba4:	e7a6      	b.n	8004af4 <_printf_i+0x160>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	47d0      	blx	sl
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d09d      	beq.n	8004af0 <_printf_i+0x15c>
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	9903      	ldr	r1, [sp, #12]
 8004bba:	1a5b      	subs	r3, r3, r1
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dcf2      	bgt.n	8004ba6 <_printf_i+0x212>
 8004bc0:	e7eb      	b.n	8004b9a <_printf_i+0x206>
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	f104 0619 	add.w	r6, r4, #25
 8004bc8:	e7f5      	b.n	8004bb6 <_printf_i+0x222>
 8004bca:	bf00      	nop
 8004bcc:	08004d3d 	.word	0x08004d3d
 8004bd0:	08004d4e 	.word	0x08004d4e

08004bd4 <memmove>:
 8004bd4:	4288      	cmp	r0, r1
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	eb01 0402 	add.w	r4, r1, r2
 8004bdc:	d902      	bls.n	8004be4 <memmove+0x10>
 8004bde:	4284      	cmp	r4, r0
 8004be0:	4623      	mov	r3, r4
 8004be2:	d807      	bhi.n	8004bf4 <memmove+0x20>
 8004be4:	1e43      	subs	r3, r0, #1
 8004be6:	42a1      	cmp	r1, r4
 8004be8:	d008      	beq.n	8004bfc <memmove+0x28>
 8004bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bf2:	e7f8      	b.n	8004be6 <memmove+0x12>
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	d100      	bne.n	8004bfe <memmove+0x2a>
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c06:	e7f7      	b.n	8004bf8 <memmove+0x24>

08004c08 <_sbrk_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d06      	ldr	r5, [pc, #24]	@ (8004c24 <_sbrk_r+0x1c>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fc f9f2 	bl	8000ffc <_sbrk>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_sbrk_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_sbrk_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000308 	.word	0x20000308

08004c28 <memcpy>:
 8004c28:	440a      	add	r2, r1
 8004c2a:	4291      	cmp	r1, r2
 8004c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c30:	d100      	bne.n	8004c34 <memcpy+0xc>
 8004c32:	4770      	bx	lr
 8004c34:	b510      	push	{r4, lr}
 8004c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	d1f9      	bne.n	8004c36 <memcpy+0xe>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <_realloc_r>:
 8004c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c48:	4680      	mov	r8, r0
 8004c4a:	4615      	mov	r5, r2
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	b921      	cbnz	r1, 8004c5a <_realloc_r+0x16>
 8004c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	4611      	mov	r1, r2
 8004c56:	f7ff bc4b 	b.w	80044f0 <_malloc_r>
 8004c5a:	b92a      	cbnz	r2, 8004c68 <_realloc_r+0x24>
 8004c5c:	f7ff fbdc 	bl	8004418 <_free_r>
 8004c60:	2400      	movs	r4, #0
 8004c62:	4620      	mov	r0, r4
 8004c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c68:	f000 f81a 	bl	8004ca0 <_malloc_usable_size_r>
 8004c6c:	4285      	cmp	r5, r0
 8004c6e:	4606      	mov	r6, r0
 8004c70:	d802      	bhi.n	8004c78 <_realloc_r+0x34>
 8004c72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c76:	d8f4      	bhi.n	8004c62 <_realloc_r+0x1e>
 8004c78:	4629      	mov	r1, r5
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f7ff fc38 	bl	80044f0 <_malloc_r>
 8004c80:	4607      	mov	r7, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0ec      	beq.n	8004c60 <_realloc_r+0x1c>
 8004c86:	42b5      	cmp	r5, r6
 8004c88:	462a      	mov	r2, r5
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	bf28      	it	cs
 8004c8e:	4632      	movcs	r2, r6
 8004c90:	f7ff ffca 	bl	8004c28 <memcpy>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fbbe 	bl	8004418 <_free_r>
 8004c9c:	463c      	mov	r4, r7
 8004c9e:	e7e0      	b.n	8004c62 <_realloc_r+0x1e>

08004ca0 <_malloc_usable_size_r>:
 8004ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca4:	1f18      	subs	r0, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bfbc      	itt	lt
 8004caa:	580b      	ldrlt	r3, [r1, r0]
 8004cac:	18c0      	addlt	r0, r0, r3
 8004cae:	4770      	bx	lr

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
