
Projet_Proto_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007088  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007218  08007218  00008218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f0  080075f0  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080075f0  080075f0  000085f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f8  080075f8  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000085f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075fc  080075fc  000085fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007600  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d8  080077d8  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080077d8  00009498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9da  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b92  00000000  00000000  00016be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00018778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a5  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001656c  00000000  00000000  00019d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eef6  00000000  00000000  000302d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089801  00000000  00000000  0003f1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c89d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000c8a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d2  00000000  00000000  000ccf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007200 	.word	0x08007200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007200 	.word	0x08007200

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fb9c 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f80e 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f8ec 	bl	8000d90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb8:	f000 f84a 	bl	8000c50 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bbc:	f000 f8b8 	bl	8000d30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <main+0x24>)
 8000bc4:	f002 f9d8 	bl	8002f78 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <main+0x20>
 8000bcc:	200001f4 	.word	0x200001f4

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	@ 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	@ 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fa45 	bl	800506e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c06:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fe85 	bl	8001920 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c1c:	f000 f974 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 feaf 	bl	800299c <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c44:	f000 f960 	bl	8000f08 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3740      	adds	r7, #64	@ 0x40
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000c7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c84:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295
 8000c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca4:	4821      	ldr	r0, [pc, #132]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000ca6:	f002 f8af 	bl	8002e08 <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000cb0:	f000 f92a 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481a      	ldr	r0, [pc, #104]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000cc2:	f002 fc42 	bl	800354a <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ccc:	f000 f91c 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cd0:	4816      	ldr	r0, [pc, #88]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000cd2:	f002 f8f0 	bl	8002eb6 <HAL_TIM_IC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cdc:	f000 f914 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000cf0:	f002 ff9a 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000cfa:	f000 f905 	bl	8000f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_TIM2_Init+0xdc>)
 8000d16:	f002 fb7c 	bl	8003412 <HAL_TIM_IC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d20:	f000 f8f2 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	@ 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200001f4 	.word	0x200001f4

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d36:	4a15      	ldr	r2, [pc, #84]	@ (8000d8c <MX_USART2_UART_Init+0x5c>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d74:	f002 ffdc 	bl	8003d30 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f8c3 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000240 	.word	0x20000240
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2108      	movs	r1, #8
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <MX_GPIO_Init+0x78>)
 8000ddc:	f000 fd6e 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000de0:	2308      	movs	r3, #8
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_GPIO_Init+0x78>)
 8000df8:	f000 fbee 	bl	80015d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000e14:	2108      	movs	r1, #8
 8000e16:	4830      	ldr	r0, [pc, #192]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e18:	f000 fd68 	bl	80018ec <HAL_GPIO_TogglePin>
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e24:	d154      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0xc4>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7f1b      	ldrb	r3, [r3, #28]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d150      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0xc4>
	{
		if(capture == 0)
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10a      	bne.n	8000e4c <HAL_TIM_IC_CaptureCallback+0x40>
		{
			clock_before = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 fc4f 	bl	80036dc <HAL_TIM_ReadCapturedValue>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e42:	6013      	str	r3, [r2, #0]
			capture =1;
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
			sprintf(msg_data,"Frequence : %lu Hz | Capacite : %lu pF \n\r",freq, Capacity);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_data, strlen(msg_data), HAL_MAX_DELAY);
		}

	}
}
 8000e4a:	e041      	b.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0xc4>
			clock_act = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f002 fc44 	bl	80036dc <HAL_TIM_ReadCapturedValue>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e58:	6013      	str	r3, [r2, #0]
			period = clock_act - clock_before;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	4a20      	ldr	r2, [pc, #128]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e66:	6013      	str	r3, [r2, #0]
			capture =0;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
			temp = HAL_RCC_GetPCLK1Freq()/period;
 8000e6e:	f001 ff87 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e86:	edc3 7a00 	vstr	s15, [r3]
			freq = temp;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e94:	ee17 2a90 	vmov	r2, s15
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e9a:	601a      	str	r2, [r3, #0]
			Capacity = (1000000/freq);
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ea8:	6013      	str	r3, [r2, #0]
			sprintf(msg_data,"Frequence : %lu Hz | Capacite : %lu pF \n\r",freq, Capacity);
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4912      	ldr	r1, [pc, #72]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000eb6:	f004 f877 	bl	8004fa8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_data, strlen(msg_data), HAL_MAX_DELAY);
 8000eba:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ebc:	f7ff f9d8 	bl	8000270 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ecc:	f002 ff7e 	bl	8003dcc <HAL_UART_Transmit>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	200002dc 	.word	0x200002dc
 8000ee0:	200002cc 	.word	0x200002cc
 8000ee4:	200002c8 	.word	0x200002c8
 8000ee8:	200002d0 	.word	0x200002d0
 8000eec:	200002d8 	.word	0x200002d8
 8000ef0:	200002d4 	.word	0x200002d4
 8000ef4:	000f4240 	.word	0x000f4240
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	08007218 	.word	0x08007218
 8000f00:	200002e0 	.word	0x200002e0
 8000f04:	20000240 	.word	0x20000240

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f7c:	d130      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x8c>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f000 fb04 	bl	80015d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	201c      	movs	r0, #28
 8000fd6:	f000 fac8 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 fae1 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	@ 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_UART_MspInit+0x7c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d128      	bne.n	8001060 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_UART_MspInit+0x80>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <HAL_UART_MspInit+0x80>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_UART_MspInit+0x80>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_UART_MspInit+0x80>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a10      	ldr	r2, [pc, #64]	@ (800106c <HAL_UART_MspInit+0x80>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_UART_MspInit+0x80>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103e:	230c      	movs	r3, #12
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104e:	2307      	movs	r3, #7
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105c:	f000 fabc 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	@ 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <NMI_Handler+0x4>

08001078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <MemManage_Handler+0x4>

08001088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <UsageFault_Handler+0x4>

08001098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c6:	f000 f955 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d4:	4802      	ldr	r0, [pc, #8]	@ (80010e0 <TIM2_IRQHandler+0x10>)
 80010d6:	f002 f87d 	bl	80031d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001f4 	.word	0x200001f4

080010e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_kill>:

int _kill(int pid, int sig)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fe:	f004 f809 	bl	8005114 <__errno>
 8001102:	4603      	mov	r3, r0
 8001104:	2216      	movs	r2, #22
 8001106:	601a      	str	r2, [r3, #0]
  return -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_exit>:

void _exit (int status)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe7 	bl	80010f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001126:	bf00      	nop
 8001128:	e7fd      	b.n	8001126 <_exit+0x12>

0800112a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e00a      	b.n	8001152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800113c:	f3af 8000 	nop.w
 8001140:	4601      	mov	r1, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf0      	blt.n	800113c <_read+0x12>
  }

  return len;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e009      	b.n	800118a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	60ba      	str	r2, [r7, #8]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbf1      	blt.n	8001176 <_write+0x12>
  }
  return len;
 8001192:	687b      	ldr	r3, [r7, #4]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_close>:

int _close(int file)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011c4:	605a      	str	r2, [r3, #4]
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_isatty>:

int _isatty(int file)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f003 ff6e 	bl	8005114 <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20004000 	.word	0x20004000
 8001264:	00000400 	.word	0x00000400
 8001268:	20000344 	.word	0x20000344
 800126c:	20000498 	.word	0x20000498

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff ffea 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	@ (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	@ (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	@ (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f003 ff2d 	bl	8005120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fc6f 	bl	8000ba8 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80012d8:	08007600 	.word	0x08007600
  ldr r2, =_sbss
 80012dc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012e0:	20000498 	.word	0x20000498

080012e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f92b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fe06 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f943 	bl	80015be <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f90b 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000004 	.word	0x20000004
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000008 	.word	0x20000008

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000348 	.word	0x20000348

0800139c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000348 	.word	0x20000348

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	@ (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff3e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff31 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffa2 	bl	8001510 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e14e      	b.n	8001886 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8140 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x40>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809a 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b55      	ldr	r3, [pc, #340]	@ (80018a4 <HAL_GPIO_Init+0x2cc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <HAL_GPIO_Init+0x2cc>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HAL_GPIO_Init+0x2cc>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a50      	ldr	r2, [pc, #320]	@ (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a46      	ldr	r2, [pc, #280]	@ (80018ac <HAL_GPIO_Init+0x2d4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1dc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <HAL_GPIO_Init+0x2d8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1d8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a44      	ldr	r2, [pc, #272]	@ (80018b4 <HAL_GPIO_Init+0x2dc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1d4>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b8:	2300      	movs	r3, #0
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ca:	4937      	ldr	r1, [pc, #220]	@ (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d8:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017fc:	4a2e      	ldr	r2, [pc, #184]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001850:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_GPIO_Init+0x2e0>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f aea9 	bne.w	80015e8 <HAL_GPIO_Init+0x10>
  }
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43d9      	mvns	r1, r3
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	400b      	ands	r3, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001926:	af00      	add	r7, sp, #0
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001930:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f001 b823 	b.w	800298c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 817d 	beq.w	8001c56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195c:	4bbc      	ldr	r3, [pc, #752]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00c      	beq.n	8001982 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001968:	4bb9      	ldr	r3, [pc, #740]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d15c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x10e>
 8001974:	4bb6      	ldr	r3, [pc, #728]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001980:	d155      	bne.n	8001a2e <HAL_RCC_OscConfig+0x10e>
 8001982:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001986:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001996:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_RCC_OscConfig+0x94>
 80019ae:	4ba8      	ldr	r3, [pc, #672]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0xc0>
 80019b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80019e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80019f8:	fab2 f282 	clz	r2, r2
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f002 021f 	and.w	r2, r2, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 811f 	beq.w	8001c54 <HAL_RCC_OscConfig+0x334>
 8001a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8116 	bne.w	8001c54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f000 bfaf 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12e>
 8001a40:	4b83      	ldr	r3, [pc, #524]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a82      	ldr	r2, [pc, #520]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e036      	b.n	8001abc <HAL_RCC_OscConfig+0x19c>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x158>
 8001a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7b      	ldr	r2, [pc, #492]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b79      	ldr	r3, [pc, #484]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a78      	ldr	r2, [pc, #480]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e021      	b.n	8001abc <HAL_RCC_OscConfig+0x19c>
 8001a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x184>
 8001a8a:	4b71      	ldr	r3, [pc, #452]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a70      	ldr	r2, [pc, #448]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6e      	ldr	r3, [pc, #440]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x19c>
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a69      	ldr	r2, [pc, #420]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a66      	ldr	r2, [pc, #408]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001abc:	4b64      	ldr	r3, [pc, #400]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	f023 020f 	bic.w	r2, r3, #15
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	495f      	ldr	r1, [pc, #380]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d059      	beq.n	8001b9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fc59 	bl	800139c <HAL_GetTick>
 8001aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fc54 	bl	800139c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	@ 0x64
 8001afe:	d902      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	f000 bf43 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 8001b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b0a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x218>
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0x244>
 8001b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b50:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b60:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b68:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ab      	beq.n	8001af0 <HAL_RCC_OscConfig+0x1d0>
 8001b98:	e05d      	b.n	8001c56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fbff 	bl	800139c <HAL_GetTick>
 8001b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fbfa 	bl	800139c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	@ 0x64
 8001bb2:	d902      	bls.n	8001bba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f000 bee9 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 8001bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bbe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x2cc>
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	e015      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f8>
 8001bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c04:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_RCC_OscConfig+0x330>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c1c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c20:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c24:	fa92 f2a2 	rbit	r2, r2
 8001c28:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c30:	fab2 f282 	clz	r2, r2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f042 0220 	orr.w	r2, r2, #32
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f002 021f 	and.w	r2, r2, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ab      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x284>
 8001c4c:	e003      	b.n	8001c56 <HAL_RCC_OscConfig+0x336>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 817d 	beq.w	8001f66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6c:	4ba6      	ldr	r3, [pc, #664]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c78:	4ba3      	ldr	r3, [pc, #652]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d172      	bne.n	8001d6a <HAL_RCC_OscConfig+0x44a>
 8001c84:	4ba0      	ldr	r3, [pc, #640]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d16c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x44a>
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3a0>
 8001cba:	4b93      	ldr	r3, [pc, #588]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c8>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ce4:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001cee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001cf2:	fa92 f2a2 	rbit	r2, r2
 8001cf6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001cfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HAL_RCC_OscConfig+0x410>
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f000 be2e 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b75      	ldr	r3, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	21f8      	movs	r1, #248	@ 0xf8
 8001d46:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d4e:	fa91 f1a1 	rbit	r1, r1
 8001d52:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d56:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d5a:	fab1 f181 	clz	r1, r1
 8001d5e:	b2c9      	uxtb	r1, r1
 8001d60:	408b      	lsls	r3, r1
 8001d62:	4969      	ldr	r1, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d68:	e0fd      	b.n	8001f66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8088 	beq.w	8001e8c <HAL_RCC_OscConfig+0x56c>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	461a      	mov	r2, r3
 8001da4:	2301      	movs	r3, #1
 8001da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff faf8 	bl	800139c <HAL_GetTick>
 8001dac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff faf3 	bl	800139c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f000 bde2 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001df2:	4b45      	ldr	r3, [pc, #276]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e013      	b.n	8001e20 <HAL_RCC_OscConfig+0x500>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e10:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e26:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e32:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f002 021f 	and.w	r2, r2, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0af      	beq.n	8001db2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	21f8      	movs	r1, #248	@ 0xf8
 8001e68:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e70:	fa91 f1a1 	rbit	r1, r1
 8001e74:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e78:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e7c:	fab1 f181 	clz	r1, r1
 8001e80:	b2c9      	uxtb	r1, r1
 8001e82:	408b      	lsls	r3, r1
 8001e84:	4920      	ldr	r1, [pc, #128]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
 8001e8a:	e06c      	b.n	8001f66 <HAL_RCC_OscConfig+0x646>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001eac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fa70 	bl	800139c <HAL_GetTick>
 8001ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fa6b 	bl	800139c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f000 bd5a 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d104      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5ec>
 8001f02:	4b01      	ldr	r3, [pc, #4]	@ (8001f08 <HAL_RCC_OscConfig+0x5e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e015      	b.n	8001f34 <HAL_RCC_OscConfig+0x614>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f30:	4bc8      	ldr	r3, [pc, #800]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2202      	movs	r2, #2
 8001f36:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f46:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ad      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8110 	beq.w	800219c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d079      	beq.n	8002080 <HAL_RCC_OscConfig+0x760>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4bab      	ldr	r3, [pc, #684]	@ (8002258 <HAL_RCC_OscConfig+0x938>)
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f9f1 	bl	800139c <HAL_GetTick>
 8001fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f9ec 	bl	800139c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f000 bcdb 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002014:	2202      	movs	r2, #2
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800202e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002030:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 8002032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800203c:	2102      	movs	r1, #2
 800203e:	6019      	str	r1, [r3, #0]
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f1a3 	rbit	r1, r3
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002056:	6019      	str	r1, [r3, #0]
  return result;
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0a0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x6a0>
 800207e:	e08d      	b.n	800219c <HAL_RCC_OscConfig+0x87c>
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020a2:	601a      	str	r2, [r3, #0]
  return result;
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HAL_RCC_OscConfig+0x938>)
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f96b 	bl	800139c <HAL_GetTick>
 80020c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff f966 	bl	800139c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d902      	bls.n	80020e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	f000 bc55 	b.w	800298c <HAL_RCC_OscConfig+0x106c>
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020ea:	2202      	movs	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800214c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 8002150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800215a:	2102      	movs	r1, #2
 800215c:	6019      	str	r1, [r3, #0]
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f1a3 	rbit	r1, r3
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002174:	6019      	str	r1, [r3, #0]
  return result;
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d197      	bne.n	80020cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 81a1 	beq.w	80024f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b8:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d116      	bne.n	80021f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	61d3      	str	r3, [r2, #28]
 80021d0:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <HAL_RCC_OscConfig+0x93c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_RCC_OscConfig+0x93c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_RCC_OscConfig+0x93c>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220a:	f7ff f8c7 	bl	800139c <HAL_GetTick>
 800220e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002214:	f7ff f8c2 	bl	800139c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	@ 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e3b1      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_RCC_OscConfig+0x93c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ef      	beq.n	8002214 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10d      	bne.n	8002260 <HAL_RCC_OscConfig+0x940>
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a02      	ldr	r2, [pc, #8]	@ (8002254 <HAL_RCC_OscConfig+0x934>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e03c      	b.n	80022cc <HAL_RCC_OscConfig+0x9ac>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	10908120 	.word	0x10908120
 800225c:	40007000 	.word	0x40007000
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0x96a>
 8002270:	4bc1      	ldr	r3, [pc, #772]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4ac0      	ldr	r2, [pc, #768]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	4bbe      	ldr	r3, [pc, #760]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4abd      	ldr	r2, [pc, #756]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	e020      	b.n	80022cc <HAL_RCC_OscConfig+0x9ac>
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x994>
 800229a:	4bb7      	ldr	r3, [pc, #732]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4ab6      	ldr	r2, [pc, #728]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	4bb4      	ldr	r3, [pc, #720]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4ab3      	ldr	r2, [pc, #716]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0x9ac>
 80022b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4aaf      	ldr	r2, [pc, #700]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	4bad      	ldr	r3, [pc, #692]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4aac      	ldr	r2, [pc, #688]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8081 	beq.w	80023e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff f85d 	bl	800139c <HAL_GetTick>
 80022e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7ff f858 	bl	800139c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e345      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002346:	601a      	str	r2, [r3, #0]
  return result;
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002350:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0xa4c>
 8002366:	4b84      	ldr	r3, [pc, #528]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	e013      	b.n	8002394 <HAL_RCC_OscConfig+0xa74>
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	4b79      	ldr	r3, [pc, #484]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002398:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800239c:	2102      	movs	r1, #2
 800239e:	6011      	str	r1, [r2, #0]
 80023a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	fa92 f1a2 	rbit	r1, r2
 80023ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023b6:	6011      	str	r1, [r2, #0]
  return result;
 80023b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d084      	beq.n	80022e8 <HAL_RCC_OscConfig+0x9c8>
 80023de:	e07f      	b.n	80024e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe ffdc 	bl	800139c <HAL_GetTick>
 80023e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe ffd7 	bl	800139c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e2c4      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800240a:	2202      	movs	r2, #2
 800240c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fa93 f2a3 	rbit	r2, r3
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800242e:	2202      	movs	r2, #2
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0xb4e>
 8002468:	4b43      	ldr	r3, [pc, #268]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	e013      	b.n	8002496 <HAL_RCC_OscConfig+0xb76>
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800249a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800249e:	2102      	movs	r1, #2
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	fa92 f1a2 	rbit	r1, r2
 80024b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024b8:	6011      	str	r1, [r2, #0]
  return result;
 80024ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f002 021f 	and.w	r2, r2, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d184      	bne.n	80023ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8242 	beq.w	800298a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002506:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <HAL_RCC_OscConfig+0xc58>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	f000 8213 	beq.w	800293a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 8162 	bne.w	80027ea <HAL_RCC_OscConfig+0xeca>
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800252e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800254a:	601a      	str	r2, [r3, #0]
  return result;
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002554:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002560:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	461a      	mov	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe ff16 	bl	800139c <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	e00c      	b.n	8002590 <HAL_RCC_OscConfig+0xc70>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe ff0e 	bl	800139c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1fd      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025b4:	601a      	str	r2, [r3, #0]
  return result;
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_RCC_OscConfig+0xcba>
 80025d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e027      	b.n	800262a <HAL_RCC_OscConfig+0xd0a>
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002608:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b9c      	ldr	r3, [pc, #624]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800262e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002632:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002636:	6011      	str	r1, [r2, #0]
 8002638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800263c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	fa92 f1a2 	rbit	r1, r2
 8002646:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800264e:	6011      	str	r1, [r2, #0]
  return result;
 8002650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002654:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	fab2 f282 	clz	r2, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f042 0220 	orr.w	r2, r2, #32
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f002 021f 	and.w	r2, r2, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d182      	bne.n	800257c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002676:	4b88      	ldr	r3, [pc, #544]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	430b      	orrs	r3, r1
 8002698:	497f      	ldr	r1, [pc, #508]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026c2:	601a      	str	r2, [r3, #0]
  return result;
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	2301      	movs	r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fe5a 	bl	800139c <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	e009      	b.n	8002702 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fe55 	bl	800139c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e144      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800270a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0xe2c>
 8002746:	4b54      	ldr	r3, [pc, #336]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e027      	b.n	800279c <HAL_RCC_OscConfig+0xe7c>
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800277a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	fa92 f1a2 	rbit	r1, r2
 80027b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027c0:	6011      	str	r1, [r2, #0]
  return result;
 80027c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d082      	beq.n	80026ee <HAL_RCC_OscConfig+0xdce>
 80027e8:	e0cf      	b.n	800298a <HAL_RCC_OscConfig+0x106a>
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800280e:	601a      	str	r2, [r3, #0]
  return result;
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fdb4 	bl	800139c <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fdaf 	bl	800139c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e09e      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002856:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002872:	601a      	str	r2, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800287c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d104      	bne.n	800289c <HAL_RCC_OscConfig+0xf7c>
 8002892:	4b01      	ldr	r3, [pc, #4]	@ (8002898 <HAL_RCC_OscConfig+0xf78>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e029      	b.n	80028ec <HAL_RCC_OscConfig+0xfcc>
 8002898:	40021000 	.word	0x40021000
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <HAL_RCC_OscConfig+0x1078>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028f8:	6011      	str	r1, [r2, #0]
 80028fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fa92 f1a2 	rbit	r1, r2
 8002908:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002910:	6011      	str	r1, [r2, #0]
  return result;
 8002912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002916:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d180      	bne.n	800283a <HAL_RCC_OscConfig+0xf1a>
 8002938:	e027      	b.n	800298a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e01e      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_OscConfig+0x1078>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800295a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800296e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002972:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b09e      	sub	sp, #120	@ 0x78
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e162      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b90      	ldr	r3, [pc, #576]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	498b      	ldr	r1, [pc, #556]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b89      	ldr	r3, [pc, #548]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e14a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b82      	ldr	r3, [pc, #520]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	497f      	ldr	r1, [pc, #508]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80dc 	beq.w	8002bc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d13c      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xf6>
 8002a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xa6>
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e00f      	b.n	8002a62 <HAL_RCC_ClockConfig+0xc6>
 8002a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a5e:	4b67      	ldr	r3, [pc, #412]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a6a:	fa92 f2a2 	rbit	r2, r2
 8002a6e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d17b      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0f3      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d13c      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x178>
 8002a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x128>
 8002abe:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e00f      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
 8002ac4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae0:	4b46      	ldr	r3, [pc, #280]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002aea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aec:	fa92 f2a2 	rbit	r2, r2
 8002af0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f042 0220 	orr.w	r2, r2, #32
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f002 021f 	and.w	r2, r2, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d13a      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b2      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
 8002b14:	2302      	movs	r3, #2
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d102      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x1a0>
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e00d      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1bc>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	2302      	movs	r3, #2
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	2202      	movs	r2, #2
 8002b5a:	61ba      	str	r2, [r7, #24]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	617a      	str	r2, [r7, #20]
  return result;
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f042 0220 	orr.w	r2, r2, #32
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f002 021f 	and.w	r2, r2, #31
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e079      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	491a      	ldr	r1, [pc, #104]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fc00 	bl	800139c <HAL_GetTick>
 8002b9c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fe fbfc 	bl	800139c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e061      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d214      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4906      	ldr	r1, [pc, #24]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e040      	b.n	8002c7a <HAL_RCC_ClockConfig+0x2de>
 8002bf8:	40022000 	.word	0x40022000
 8002bfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	491a      	ldr	r1, [pc, #104]	@ (8002c84 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4912      	ldr	r1, [pc, #72]	@ (8002c84 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c3e:	f000 f829 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c42:	4601      	mov	r1, r0
 8002c44:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_RCC_ClockConfig+0x2e8>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4c:	22f0      	movs	r2, #240	@ 0xf0
 8002c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	fa92 f2a2 	rbit	r2, r2
 8002c56:	60fa      	str	r2, [r7, #12]
  return result;
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	40d3      	lsrs	r3, r2
 8002c62:	4a09      	ldr	r2, [pc, #36]	@ (8002c88 <HAL_RCC_ClockConfig+0x2ec>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	fa21 f303 	lsr.w	r3, r1, r3
 8002c6a:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <HAL_RCC_ClockConfig+0x2f0>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <HAL_RCC_ClockConfig+0x2f4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fb4e 	bl	8001314 <HAL_InitTick>
  
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3778      	adds	r7, #120	@ 0x78
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08007244 	.word	0x08007244
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	20000008 	.word	0x20000008

08002c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b08b      	sub	sp, #44	@ 0x2c
 8002c98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cae:	4b29      	ldr	r3, [pc, #164]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x36>
 8002cc2:	e03c      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc4:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc6:	623b      	str	r3, [r7, #32]
      break;
 8002cc8:	e03c      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002cd0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002cd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	607a      	str	r2, [r7, #4]
  return result;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	40d3      	lsrs	r3, r2
 8002ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	60fa      	str	r2, [r7, #12]
  return result;
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	40d3      	lsrs	r3, r2
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2c:	e004      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a0c      	ldr	r2, [pc, #48]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	623b      	str	r3, [r7, #32]
      break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d40:	623b      	str	r3, [r7, #32]
      break;
 8002d42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	372c      	adds	r7, #44	@ 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	007a1200 	.word	0x007a1200
 8002d5c:	0800725c 	.word	0x0800725c
 8002d60:	0800726c 	.word	0x0800726c
 8002d64:	003d0900 	.word	0x003d0900

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d86:	f7ff ffef 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d94:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	fa92 f2a2 	rbit	r2, r2
 8002da0:	603a      	str	r2, [r7, #0]
  return result;
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	40d3      	lsrs	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08007254 	.word	0x08007254

08002dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dca:	f7ff ffcd 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002dd8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	603a      	str	r2, [r7, #0]
  return result;
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	40d3      	lsrs	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08007254 	.word	0x08007254

08002e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e049      	b.n	8002eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe f894 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 fcb4 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e049      	b.n	8002f5c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f841 	bl	8002f64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f000 fc5d 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_IC_Start_IT+0x1e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e023      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x66>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0x2e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e01b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x66>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0x3e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e013      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x66>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0x4e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e00b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x66>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_IC_Start_IT+0x5e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e003      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x66>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_TIM_IC_Start_IT+0x78>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e013      	b.n	8003018 <HAL_TIM_IC_Start_IT+0xa0>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d104      	bne.n	8003000 <HAL_TIM_IC_Start_IT+0x88>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e00b      	b.n	8003018 <HAL_TIM_IC_Start_IT+0xa0>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d104      	bne.n	8003010 <HAL_TIM_IC_Start_IT+0x98>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e003      	b.n	8003018 <HAL_TIM_IC_Start_IT+0xa0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003016:	b2db      	uxtb	r3, r3
 8003018:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800301a:	7bbb      	ldrb	r3, [r7, #14]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003020:	7b7b      	ldrb	r3, [r7, #13]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0c9      	b.n	80031be <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_TIM_IC_Start_IT+0xc2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003038:	e023      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x10a>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d104      	bne.n	800304a <HAL_TIM_IC_Start_IT+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003048:	e01b      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x10a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d104      	bne.n	800305a <HAL_TIM_IC_Start_IT+0xe2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003058:	e013      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x10a>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d104      	bne.n	800306a <HAL_TIM_IC_Start_IT+0xf2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003068:	e00b      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x10a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d104      	bne.n	800307a <HAL_TIM_IC_Start_IT+0x102>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003078:	e003      	b.n	8003082 <HAL_TIM_IC_Start_IT+0x10a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_TIM_IC_Start_IT+0x11a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	e013      	b.n	80030ba <HAL_TIM_IC_Start_IT+0x142>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_IC_Start_IT+0x12a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030a0:	e00b      	b.n	80030ba <HAL_TIM_IC_Start_IT+0x142>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_IC_Start_IT+0x13a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030b0:	e003      	b.n	80030ba <HAL_TIM_IC_Start_IT+0x142>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d841      	bhi.n	8003144 <HAL_TIM_IC_Start_IT+0x1cc>
 80030c0:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <HAL_TIM_IC_Start_IT+0x150>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003145 	.word	0x08003145
 80030d0:	08003145 	.word	0x08003145
 80030d4:	08003145 	.word	0x08003145
 80030d8:	0800310f 	.word	0x0800310f
 80030dc:	08003145 	.word	0x08003145
 80030e0:	08003145 	.word	0x08003145
 80030e4:	08003145 	.word	0x08003145
 80030e8:	08003121 	.word	0x08003121
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003145 	.word	0x08003145
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003133 	.word	0x08003133
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0202 	orr.w	r2, r2, #2
 800310a:	60da      	str	r2, [r3, #12]
      break;
 800310c:	e01d      	b.n	800314a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0204 	orr.w	r2, r2, #4
 800311c:	60da      	str	r2, [r3, #12]
      break;
 800311e:	e014      	b.n	800314a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	60da      	str	r2, [r3, #12]
      break;
 8003130:	e00b      	b.n	800314a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0210 	orr.w	r2, r2, #16
 8003140:	60da      	str	r2, [r3, #12]
      break;
 8003142:	e002      	b.n	800314a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	bf00      	nop
  }

  if (status == HAL_OK)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d135      	bne.n	80031bc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fd3f 	bl	8003bdc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a19      	ldr	r2, [pc, #100]	@ (80031c8 <HAL_TIM_IC_Start_IT+0x250>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_TIM_IC_Start_IT+0x204>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d004      	beq.n	800317c <HAL_TIM_IC_Start_IT+0x204>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <HAL_TIM_IC_Start_IT+0x254>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d115      	bne.n	80031a8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <HAL_TIM_IC_Start_IT+0x258>)
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d015      	beq.n	80031ba <HAL_TIM_IC_Start_IT+0x242>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003194:	d011      	beq.n	80031ba <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	e008      	b.n	80031ba <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e000      	b.n	80031bc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40014000 	.word	0x40014000
 80031d0:	00010007 	.word	0x00010007

080031d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0202 	mvn.w	r2, #2
 8003200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fdf8 	bl	8000e0c <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faaa 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fab1 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0204 	mvn.w	r2, #4
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fdce 	bl	8000e0c <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa80 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa87 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0208 	mvn.w	r2, #8
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fda4 	bl	8000e0c <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa56 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fa5d 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d122      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d11b      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2208      	movs	r2, #8
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fd7a 	bl	8000e0c <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa2c 	bl	8003778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa33 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0201 	mvn.w	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa06 	bl	8003764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b80      	cmp	r3, #128	@ 0x80
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003370:	2b80      	cmp	r3, #128	@ 0x80
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fcc2 	bl	8003d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fcb5 	bl	8003d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033bc:	2b40      	cmp	r3, #64	@ 0x40
 80033be:	d10e      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d107      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9e1 	bl	80037a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d10e      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d107      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f06f 0220 	mvn.w	r2, #32
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fc75 	bl	8003cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIM_IC_ConfigChannel+0x1e>
 800342c:	2302      	movs	r3, #2
 800342e:	e088      	b.n	8003542 <HAL_TIM_IC_ConfigChannel+0x130>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11b      	bne.n	8003476 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800344e:	f000 fa1f 	bl	8003890 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 020c 	bic.w	r2, r2, #12
 8003460:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6999      	ldr	r1, [r3, #24]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	619a      	str	r2, [r3, #24]
 8003474:	e060      	b.n	8003538 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11c      	bne.n	80034b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800348c:	f000 fa85 	bl	800399a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800349e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	e040      	b.n	8003538 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034cc:	f000 fad2 	bl	8003a74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020c 	bic.w	r2, r2, #12
 80034de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69d9      	ldr	r1, [r3, #28]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e021      	b.n	8003538 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d11c      	bne.n	8003534 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800350a:	f000 faef 	bl	8003aec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800351c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69d9      	ldr	r1, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	021a      	lsls	r2, r3, #8
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	61da      	str	r2, [r3, #28]
 8003532:	e001      	b.n	8003538 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_ConfigClockSource+0x1c>
 8003562:	2302      	movs	r3, #2
 8003564:	e0b6      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x18a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003584:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003588:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003590:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a2:	d03e      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xd8>
 80035a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a8:	f200 8087 	bhi.w	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	f000 8086 	beq.w	80036c0 <HAL_TIM_ConfigClockSource+0x176>
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b8:	d87f      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035ba:	2b70      	cmp	r3, #112	@ 0x70
 80035bc:	d01a      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xaa>
 80035be:	2b70      	cmp	r3, #112	@ 0x70
 80035c0:	d87b      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035c2:	2b60      	cmp	r3, #96	@ 0x60
 80035c4:	d050      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0x11e>
 80035c6:	2b60      	cmp	r3, #96	@ 0x60
 80035c8:	d877      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035ca:	2b50      	cmp	r3, #80	@ 0x50
 80035cc:	d03c      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xfe>
 80035ce:	2b50      	cmp	r3, #80	@ 0x50
 80035d0:	d873      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d058      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x13e>
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d86f      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035da:	2b30      	cmp	r3, #48	@ 0x30
 80035dc:	d064      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x15e>
 80035de:	2b30      	cmp	r3, #48	@ 0x30
 80035e0:	d86b      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d060      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x15e>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d867      	bhi.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d05c      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x15e>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d05a      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x15e>
 80035f2:	e062      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	f000 faca 	bl	8003b9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003616:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e04f      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003632:	f000 fab3 	bl	8003b9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003644:	609a      	str	r2, [r3, #8]
      break;
 8003646:	e03c      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003654:	461a      	mov	r2, r3
 8003656:	f000 f971 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2150      	movs	r1, #80	@ 0x50
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fa80 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003666:	e02c      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003674:	461a      	mov	r2, r3
 8003676:	f000 f9cd 	bl	8003a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2160      	movs	r1, #96	@ 0x60
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa70 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003686:	e01c      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003694:	461a      	mov	r2, r3
 8003696:	f000 f951 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2140      	movs	r1, #64	@ 0x40
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa60 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80036a6:	e00c      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fa57 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80036b8:	e003      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
      break;
 80036be:	e000      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d831      	bhi.n	8003754 <HAL_TIM_ReadCapturedValue+0x78>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003755 	.word	0x08003755
 8003700:	08003755 	.word	0x08003755
 8003704:	08003755 	.word	0x08003755
 8003708:	08003737 	.word	0x08003737
 800370c:	08003755 	.word	0x08003755
 8003710:	08003755 	.word	0x08003755
 8003714:	08003755 	.word	0x08003755
 8003718:	08003741 	.word	0x08003741
 800371c:	08003755 	.word	0x08003755
 8003720:	08003755 	.word	0x08003755
 8003724:	08003755 	.word	0x08003755
 8003728:	0800374b 	.word	0x0800374b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003732:	60fb      	str	r3, [r7, #12]

      break;
 8003734:	e00f      	b.n	8003756 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	60fb      	str	r3, [r7, #12]

      break;
 800373e:	e00a      	b.n	8003756 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	60fb      	str	r3, [r7, #12]

      break;
 8003748:	e005      	b.n	8003756 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	60fb      	str	r3, [r7, #12]

      break;
 8003752:	e000      	b.n	8003756 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003754:	bf00      	nop
  }

  return tmpreg;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <TIM_Base_SetConfig+0xcc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_Base_SetConfig+0x20>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d2:	d108      	bne.n	80037e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a25      	ldr	r2, [pc, #148]	@ (8003880 <TIM_Base_SetConfig+0xcc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_Base_SetConfig+0x5a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d00b      	beq.n	800380e <TIM_Base_SetConfig+0x5a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <TIM_Base_SetConfig+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_Base_SetConfig+0x5a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <TIM_Base_SetConfig+0xd4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x5a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a20      	ldr	r2, [pc, #128]	@ (800388c <TIM_Base_SetConfig+0xd8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <TIM_Base_SetConfig+0xcc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00b      	beq.n	8003864 <TIM_Base_SetConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <TIM_Base_SetConfig+0xd0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <TIM_Base_SetConfig+0xb0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <TIM_Base_SetConfig+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0xb0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0b      	ldr	r2, [pc, #44]	@ (800388c <TIM_Base_SetConfig+0xd8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d103      	bne.n	800386c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	615a      	str	r2, [r3, #20]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <TIM_TI1_SetConfig+0xa4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_TI1_SetConfig+0x3e>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d003      	beq.n	80038ce <TIM_TI1_SetConfig+0x3e>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <TIM_TI1_SetConfig+0xa8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <TIM_TI1_SetConfig+0x42>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <TIM_TI1_SetConfig+0x44>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e003      	b.n	80038f2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f023 030a 	bic.w	r3, r3, #10
 800390c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 030a 	and.w	r3, r3, #10
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40014000 	.word	0x40014000

0800393c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 030a 	bic.w	r3, r3, #10
 8003978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800399a:	b480      	push	{r7}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0210 	bic.w	r2, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	b29b      	uxth	r3, r3
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0210 	bic.w	r2, r3, #16
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	031b      	lsls	r3, r3, #12
 8003b44:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f043 0307 	orr.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2201      	movs	r2, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e04f      	b.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d004      	beq.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10c      	bne.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40014000 	.word	0x40014000

08003cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e040      	b.n	8003dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd f94a 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	@ 0x24
 8003d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8b6 	bl	8003ee0 <UART_SetConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9e0 	bl	800414c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa67 	bl	8004290 <UART_CheckIdleState>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d177      	bne.n	8003ed4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_UART_Transmit+0x24>
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e070      	b.n	8003ed6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2221      	movs	r2, #33	@ 0x21
 8003e00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e02:	f7fd facb 	bl	800139c <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d108      	bne.n	8003e34 <HAL_UART_Transmit+0x68>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e3c:	e02f      	b.n	8003e9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fac9 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e03b      	b.n	8003ed6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e70:	b292      	uxth	r2, r2
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	3302      	adds	r3, #2
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e007      	b.n	8003e8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1c9      	bne.n	8003e3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	@ 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fa93 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e005      	b.n	8003ed6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b8a      	ldr	r3, [pc, #552]	@ (8004134 <UART_SetConfig+0x254>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a78      	ldr	r2, [pc, #480]	@ (8004138 <UART_SetConfig+0x258>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d120      	bne.n	8003f9e <UART_SetConfig+0xbe>
 8003f5c:	4b77      	ldr	r3, [pc, #476]	@ (800413c <UART_SetConfig+0x25c>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d817      	bhi.n	8003f98 <UART_SetConfig+0xb8>
 8003f68:	a201      	add	r2, pc, #4	@ (adr r2, 8003f70 <UART_SetConfig+0x90>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f8d 	.word	0x08003f8d
 8003f78:	08003f93 	.word	0x08003f93
 8003f7c:	08003f87 	.word	0x08003f87
 8003f80:	2300      	movs	r3, #0
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e01d      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003f86:	2302      	movs	r3, #2
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e01a      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e017      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003f92:	2308      	movs	r3, #8
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e014      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e011      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a67      	ldr	r2, [pc, #412]	@ (8004140 <UART_SetConfig+0x260>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d102      	bne.n	8003fae <UART_SetConfig+0xce>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e009      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a64      	ldr	r2, [pc, #400]	@ (8004144 <UART_SetConfig+0x264>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d102      	bne.n	8003fbe <UART_SetConfig+0xde>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e001      	b.n	8003fc2 <UART_SetConfig+0xe2>
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fca:	d15a      	bne.n	8004082 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003fcc:	7ffb      	ldrb	r3, [r7, #31]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d827      	bhi.n	8004022 <UART_SetConfig+0x142>
 8003fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <UART_SetConfig+0xf8>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004005 	.word	0x08004005
 8003fe0:	0800400d 	.word	0x0800400d
 8003fe4:	08004023 	.word	0x08004023
 8003fe8:	08004013 	.word	0x08004013
 8003fec:	08004023 	.word	0x08004023
 8003ff0:	08004023 	.word	0x08004023
 8003ff4:	08004023 	.word	0x08004023
 8003ff8:	0800401b 	.word	0x0800401b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7fe fec0 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004000:	61b8      	str	r0, [r7, #24]
        break;
 8004002:	e013      	b.n	800402c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004004:	f7fe fede 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 8004008:	61b8      	str	r0, [r7, #24]
        break;
 800400a:	e00f      	b.n	800402c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400c:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <UART_SetConfig+0x268>)
 800400e:	61bb      	str	r3, [r7, #24]
        break;
 8004010:	e00c      	b.n	800402c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004012:	f7fe fe3f 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8004016:	61b8      	str	r0, [r7, #24]
        break;
 8004018:	e008      	b.n	800402c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401e:	61bb      	str	r3, [r7, #24]
        break;
 8004020:	e004      	b.n	800402c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	77bb      	strb	r3, [r7, #30]
        break;
 800402a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d074      	beq.n	800411c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	005a      	lsls	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	d916      	bls.n	800407c <UART_SetConfig+0x19c>
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004054:	d212      	bcs.n	800407c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f023 030f 	bic.w	r3, r3, #15
 800405e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	b29b      	uxth	r3, r3
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	b29a      	uxth	r2, r3
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	4313      	orrs	r3, r2
 8004070:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	89fa      	ldrh	r2, [r7, #14]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e04f      	b.n	800411c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77bb      	strb	r3, [r7, #30]
 8004080:	e04c      	b.n	800411c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d828      	bhi.n	80040da <UART_SetConfig+0x1fa>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <UART_SetConfig+0x1b0>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040db 	.word	0x080040db
 80040a0:	080040cb 	.word	0x080040cb
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040db 	.word	0x080040db
 80040ac:	080040db 	.word	0x080040db
 80040b0:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b4:	f7fe fe64 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80040b8:	61b8      	str	r0, [r7, #24]
        break;
 80040ba:	e013      	b.n	80040e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe fe82 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 80040c0:	61b8      	str	r0, [r7, #24]
        break;
 80040c2:	e00f      	b.n	80040e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <UART_SetConfig+0x268>)
 80040c6:	61bb      	str	r3, [r7, #24]
        break;
 80040c8:	e00c      	b.n	80040e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7fe fde3 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80040ce:	61b8      	str	r0, [r7, #24]
        break;
 80040d0:	e008      	b.n	80040e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e004      	b.n	80040e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	77bb      	strb	r3, [r7, #30]
        break;
 80040e2:	bf00      	nop
    }

    if (pclk != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085a      	lsrs	r2, r3, #1
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d909      	bls.n	8004118 <UART_SetConfig+0x238>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410a:	d205      	bcs.n	8004118 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	e001      	b.n	800411c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004128:	7fbb      	ldrb	r3, [r7, #30]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	efff69f3 	.word	0xefff69f3
 8004138:	40013800 	.word	0x40013800
 800413c:	40021000 	.word	0x40021000
 8004140:	40004400 	.word	0x40004400
 8004144:	40004800 	.word	0x40004800
 8004148:	007a1200 	.word	0x007a1200

0800414c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800424a:	d10a      	bne.n	8004262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b098      	sub	sp, #96	@ 0x60
 8004294:	af02      	add	r7, sp, #8
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042a0:	f7fd f87c 	bl	800139c <HAL_GetTick>
 80042a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d12e      	bne.n	8004312 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	2200      	movs	r2, #0
 80042be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f88c 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d021      	beq.n	8004312 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e062      	b.n	80043d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d149      	bne.n	80043b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	2200      	movs	r2, #0
 800432a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f856 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03c      	beq.n	80043b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	623b      	str	r3, [r7, #32]
   return(result);
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004358:	633b      	str	r3, [r7, #48]	@ 0x30
 800435a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800435e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	60fb      	str	r3, [r7, #12]
   return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69b9      	ldr	r1, [r7, #24]
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	617b      	str	r3, [r7, #20]
   return(result);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e011      	b.n	80043d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3758      	adds	r7, #88	@ 0x58
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	e049      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d045      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fc ffcf 	bl	800139c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <UART_WaitOnFlagUntilTimeout+0x30>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e048      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d031      	beq.n	8004486 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d110      	bne.n	8004452 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f838 	bl	80044ae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2208      	movs	r2, #8
 8004442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e029      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004460:	d111      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800446a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f81e 	bl	80044ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00f      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d0a6      	beq.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b095      	sub	sp, #84	@ 0x54
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004520:	2b01      	cmp	r3, #1
 8004522:	d118      	bne.n	8004556 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	60bb      	str	r3, [r7, #8]
   return(result);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	647b      	str	r3, [r7, #68]	@ 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	613b      	str	r3, [r7, #16]
   return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800456a:	bf00      	nop
 800456c:	3754      	adds	r7, #84	@ 0x54
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <__cvt>:
 8004576:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457a:	ec57 6b10 	vmov	r6, r7, d0
 800457e:	2f00      	cmp	r7, #0
 8004580:	460c      	mov	r4, r1
 8004582:	4619      	mov	r1, r3
 8004584:	463b      	mov	r3, r7
 8004586:	bfbb      	ittet	lt
 8004588:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800458c:	461f      	movlt	r7, r3
 800458e:	2300      	movge	r3, #0
 8004590:	232d      	movlt	r3, #45	@ 0x2d
 8004592:	700b      	strb	r3, [r1, #0]
 8004594:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004596:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800459a:	4691      	mov	r9, r2
 800459c:	f023 0820 	bic.w	r8, r3, #32
 80045a0:	bfbc      	itt	lt
 80045a2:	4632      	movlt	r2, r6
 80045a4:	4616      	movlt	r6, r2
 80045a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045aa:	d005      	beq.n	80045b8 <__cvt+0x42>
 80045ac:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045b0:	d100      	bne.n	80045b4 <__cvt+0x3e>
 80045b2:	3401      	adds	r4, #1
 80045b4:	2102      	movs	r1, #2
 80045b6:	e000      	b.n	80045ba <__cvt+0x44>
 80045b8:	2103      	movs	r1, #3
 80045ba:	ab03      	add	r3, sp, #12
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	ab02      	add	r3, sp, #8
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	ec47 6b10 	vmov	d0, r6, r7
 80045c6:	4653      	mov	r3, sl
 80045c8:	4622      	mov	r2, r4
 80045ca:	f000 fe59 	bl	8005280 <_dtoa_r>
 80045ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045d2:	4605      	mov	r5, r0
 80045d4:	d119      	bne.n	800460a <__cvt+0x94>
 80045d6:	f019 0f01 	tst.w	r9, #1
 80045da:	d00e      	beq.n	80045fa <__cvt+0x84>
 80045dc:	eb00 0904 	add.w	r9, r0, r4
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fc fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ec:	b108      	cbz	r0, 80045f2 <__cvt+0x7c>
 80045ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80045f2:	2230      	movs	r2, #48	@ 0x30
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	454b      	cmp	r3, r9
 80045f8:	d31e      	bcc.n	8004638 <__cvt+0xc2>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045fe:	1b5b      	subs	r3, r3, r5
 8004600:	4628      	mov	r0, r5
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800460e:	eb00 0904 	add.w	r9, r0, r4
 8004612:	d1e5      	bne.n	80045e0 <__cvt+0x6a>
 8004614:	7803      	ldrb	r3, [r0, #0]
 8004616:	2b30      	cmp	r3, #48	@ 0x30
 8004618:	d10a      	bne.n	8004630 <__cvt+0xba>
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fc fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004626:	b918      	cbnz	r0, 8004630 <__cvt+0xba>
 8004628:	f1c4 0401 	rsb	r4, r4, #1
 800462c:	f8ca 4000 	str.w	r4, [sl]
 8004630:	f8da 3000 	ldr.w	r3, [sl]
 8004634:	4499      	add	r9, r3
 8004636:	e7d3      	b.n	80045e0 <__cvt+0x6a>
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	9103      	str	r1, [sp, #12]
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e7d9      	b.n	80045f4 <__cvt+0x7e>

08004640 <__exponent>:
 8004640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004642:	2900      	cmp	r1, #0
 8004644:	bfba      	itte	lt
 8004646:	4249      	neglt	r1, r1
 8004648:	232d      	movlt	r3, #45	@ 0x2d
 800464a:	232b      	movge	r3, #43	@ 0x2b
 800464c:	2909      	cmp	r1, #9
 800464e:	7002      	strb	r2, [r0, #0]
 8004650:	7043      	strb	r3, [r0, #1]
 8004652:	dd29      	ble.n	80046a8 <__exponent+0x68>
 8004654:	f10d 0307 	add.w	r3, sp, #7
 8004658:	461d      	mov	r5, r3
 800465a:	270a      	movs	r7, #10
 800465c:	461a      	mov	r2, r3
 800465e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004662:	fb07 1416 	mls	r4, r7, r6, r1
 8004666:	3430      	adds	r4, #48	@ 0x30
 8004668:	f802 4c01 	strb.w	r4, [r2, #-1]
 800466c:	460c      	mov	r4, r1
 800466e:	2c63      	cmp	r4, #99	@ 0x63
 8004670:	f103 33ff 	add.w	r3, r3, #4294967295
 8004674:	4631      	mov	r1, r6
 8004676:	dcf1      	bgt.n	800465c <__exponent+0x1c>
 8004678:	3130      	adds	r1, #48	@ 0x30
 800467a:	1e94      	subs	r4, r2, #2
 800467c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004680:	1c41      	adds	r1, r0, #1
 8004682:	4623      	mov	r3, r4
 8004684:	42ab      	cmp	r3, r5
 8004686:	d30a      	bcc.n	800469e <__exponent+0x5e>
 8004688:	f10d 0309 	add.w	r3, sp, #9
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	42ac      	cmp	r4, r5
 8004690:	bf88      	it	hi
 8004692:	2300      	movhi	r3, #0
 8004694:	3302      	adds	r3, #2
 8004696:	4403      	add	r3, r0
 8004698:	1a18      	subs	r0, r3, r0
 800469a:	b003      	add	sp, #12
 800469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046a6:	e7ed      	b.n	8004684 <__exponent+0x44>
 80046a8:	2330      	movs	r3, #48	@ 0x30
 80046aa:	3130      	adds	r1, #48	@ 0x30
 80046ac:	7083      	strb	r3, [r0, #2]
 80046ae:	70c1      	strb	r1, [r0, #3]
 80046b0:	1d03      	adds	r3, r0, #4
 80046b2:	e7f1      	b.n	8004698 <__exponent+0x58>

080046b4 <_printf_float>:
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	b08d      	sub	sp, #52	@ 0x34
 80046ba:	460c      	mov	r4, r1
 80046bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80046c0:	4616      	mov	r6, r2
 80046c2:	461f      	mov	r7, r3
 80046c4:	4605      	mov	r5, r0
 80046c6:	f000 fcdb 	bl	8005080 <_localeconv_r>
 80046ca:	6803      	ldr	r3, [r0, #0]
 80046cc:	9304      	str	r3, [sp, #16]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb fdce 	bl	8000270 <strlen>
 80046d4:	2300      	movs	r3, #0
 80046d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046d8:	f8d8 3000 	ldr.w	r3, [r8]
 80046dc:	9005      	str	r0, [sp, #20]
 80046de:	3307      	adds	r3, #7
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	f103 0208 	add.w	r2, r3, #8
 80046e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046ec:	f8d4 b000 	ldr.w	fp, [r4]
 80046f0:	f8c8 2000 	str.w	r2, [r8]
 80046f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046fc:	9307      	str	r3, [sp, #28]
 80046fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8004702:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470a:	4b9c      	ldr	r3, [pc, #624]	@ (800497c <_printf_float+0x2c8>)
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	f7fc fa0c 	bl	8000b2c <__aeabi_dcmpun>
 8004714:	bb70      	cbnz	r0, 8004774 <_printf_float+0xc0>
 8004716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471a:	4b98      	ldr	r3, [pc, #608]	@ (800497c <_printf_float+0x2c8>)
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	f7fc f9e6 	bl	8000af0 <__aeabi_dcmple>
 8004724:	bb30      	cbnz	r0, 8004774 <_printf_float+0xc0>
 8004726:	2200      	movs	r2, #0
 8004728:	2300      	movs	r3, #0
 800472a:	4640      	mov	r0, r8
 800472c:	4649      	mov	r1, r9
 800472e:	f7fc f9d5 	bl	8000adc <__aeabi_dcmplt>
 8004732:	b110      	cbz	r0, 800473a <_printf_float+0x86>
 8004734:	232d      	movs	r3, #45	@ 0x2d
 8004736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800473a:	4a91      	ldr	r2, [pc, #580]	@ (8004980 <_printf_float+0x2cc>)
 800473c:	4b91      	ldr	r3, [pc, #580]	@ (8004984 <_printf_float+0x2d0>)
 800473e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004742:	bf94      	ite	ls
 8004744:	4690      	movls	r8, r2
 8004746:	4698      	movhi	r8, r3
 8004748:	2303      	movs	r3, #3
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	f02b 0304 	bic.w	r3, fp, #4
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	f04f 0900 	mov.w	r9, #0
 8004756:	9700      	str	r7, [sp, #0]
 8004758:	4633      	mov	r3, r6
 800475a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f9d2 	bl	8004b08 <_printf_common>
 8004764:	3001      	adds	r0, #1
 8004766:	f040 808d 	bne.w	8004884 <_printf_float+0x1d0>
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	b00d      	add	sp, #52	@ 0x34
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	4640      	mov	r0, r8
 800477a:	4649      	mov	r1, r9
 800477c:	f7fc f9d6 	bl	8000b2c <__aeabi_dcmpun>
 8004780:	b140      	cbz	r0, 8004794 <_printf_float+0xe0>
 8004782:	464b      	mov	r3, r9
 8004784:	2b00      	cmp	r3, #0
 8004786:	bfbc      	itt	lt
 8004788:	232d      	movlt	r3, #45	@ 0x2d
 800478a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800478e:	4a7e      	ldr	r2, [pc, #504]	@ (8004988 <_printf_float+0x2d4>)
 8004790:	4b7e      	ldr	r3, [pc, #504]	@ (800498c <_printf_float+0x2d8>)
 8004792:	e7d4      	b.n	800473e <_printf_float+0x8a>
 8004794:	6863      	ldr	r3, [r4, #4]
 8004796:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800479a:	9206      	str	r2, [sp, #24]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	d13b      	bne.n	8004818 <_printf_float+0x164>
 80047a0:	2306      	movs	r3, #6
 80047a2:	6063      	str	r3, [r4, #4]
 80047a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80047a8:	2300      	movs	r3, #0
 80047aa:	6022      	str	r2, [r4, #0]
 80047ac:	9303      	str	r3, [sp, #12]
 80047ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80047b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80047b4:	ab09      	add	r3, sp, #36	@ 0x24
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	6861      	ldr	r1, [r4, #4]
 80047ba:	ec49 8b10 	vmov	d0, r8, r9
 80047be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7ff fed7 	bl	8004576 <__cvt>
 80047c8:	9b06      	ldr	r3, [sp, #24]
 80047ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80047cc:	2b47      	cmp	r3, #71	@ 0x47
 80047ce:	4680      	mov	r8, r0
 80047d0:	d129      	bne.n	8004826 <_printf_float+0x172>
 80047d2:	1cc8      	adds	r0, r1, #3
 80047d4:	db02      	blt.n	80047dc <_printf_float+0x128>
 80047d6:	6863      	ldr	r3, [r4, #4]
 80047d8:	4299      	cmp	r1, r3
 80047da:	dd41      	ble.n	8004860 <_printf_float+0x1ac>
 80047dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80047e0:	fa5f fa8a 	uxtb.w	sl, sl
 80047e4:	3901      	subs	r1, #1
 80047e6:	4652      	mov	r2, sl
 80047e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80047ee:	f7ff ff27 	bl	8004640 <__exponent>
 80047f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047f4:	1813      	adds	r3, r2, r0
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	4681      	mov	r9, r0
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	dc02      	bgt.n	8004804 <_printf_float+0x150>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	07d2      	lsls	r2, r2, #31
 8004802:	d501      	bpl.n	8004808 <_printf_float+0x154>
 8004804:	3301      	adds	r3, #1
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0a2      	beq.n	8004756 <_printf_float+0xa2>
 8004810:	232d      	movs	r3, #45	@ 0x2d
 8004812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004816:	e79e      	b.n	8004756 <_printf_float+0xa2>
 8004818:	9a06      	ldr	r2, [sp, #24]
 800481a:	2a47      	cmp	r2, #71	@ 0x47
 800481c:	d1c2      	bne.n	80047a4 <_printf_float+0xf0>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1c0      	bne.n	80047a4 <_printf_float+0xf0>
 8004822:	2301      	movs	r3, #1
 8004824:	e7bd      	b.n	80047a2 <_printf_float+0xee>
 8004826:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800482a:	d9db      	bls.n	80047e4 <_printf_float+0x130>
 800482c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004830:	d118      	bne.n	8004864 <_printf_float+0x1b0>
 8004832:	2900      	cmp	r1, #0
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	dd0b      	ble.n	8004850 <_printf_float+0x19c>
 8004838:	6121      	str	r1, [r4, #16]
 800483a:	b913      	cbnz	r3, 8004842 <_printf_float+0x18e>
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	07d0      	lsls	r0, r2, #31
 8004840:	d502      	bpl.n	8004848 <_printf_float+0x194>
 8004842:	3301      	adds	r3, #1
 8004844:	440b      	add	r3, r1
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	65a1      	str	r1, [r4, #88]	@ 0x58
 800484a:	f04f 0900 	mov.w	r9, #0
 800484e:	e7db      	b.n	8004808 <_printf_float+0x154>
 8004850:	b913      	cbnz	r3, 8004858 <_printf_float+0x1a4>
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	07d2      	lsls	r2, r2, #31
 8004856:	d501      	bpl.n	800485c <_printf_float+0x1a8>
 8004858:	3302      	adds	r3, #2
 800485a:	e7f4      	b.n	8004846 <_printf_float+0x192>
 800485c:	2301      	movs	r3, #1
 800485e:	e7f2      	b.n	8004846 <_printf_float+0x192>
 8004860:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004866:	4299      	cmp	r1, r3
 8004868:	db05      	blt.n	8004876 <_printf_float+0x1c2>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6121      	str	r1, [r4, #16]
 800486e:	07d8      	lsls	r0, r3, #31
 8004870:	d5ea      	bpl.n	8004848 <_printf_float+0x194>
 8004872:	1c4b      	adds	r3, r1, #1
 8004874:	e7e7      	b.n	8004846 <_printf_float+0x192>
 8004876:	2900      	cmp	r1, #0
 8004878:	bfd4      	ite	le
 800487a:	f1c1 0202 	rsble	r2, r1, #2
 800487e:	2201      	movgt	r2, #1
 8004880:	4413      	add	r3, r2
 8004882:	e7e0      	b.n	8004846 <_printf_float+0x192>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	055a      	lsls	r2, r3, #21
 8004888:	d407      	bmi.n	800489a <_printf_float+0x1e6>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	4642      	mov	r2, r8
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	d12b      	bne.n	80048f0 <_printf_float+0x23c>
 8004898:	e767      	b.n	800476a <_printf_float+0xb6>
 800489a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800489e:	f240 80dd 	bls.w	8004a5c <_printf_float+0x3a8>
 80048a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	f7fc f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d033      	beq.n	800491a <_printf_float+0x266>
 80048b2:	4a37      	ldr	r2, [pc, #220]	@ (8004990 <_printf_float+0x2dc>)
 80048b4:	2301      	movs	r3, #1
 80048b6:	4631      	mov	r1, r6
 80048b8:	4628      	mov	r0, r5
 80048ba:	47b8      	blx	r7
 80048bc:	3001      	adds	r0, #1
 80048be:	f43f af54 	beq.w	800476a <_printf_float+0xb6>
 80048c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80048c6:	4543      	cmp	r3, r8
 80048c8:	db02      	blt.n	80048d0 <_printf_float+0x21c>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	07d8      	lsls	r0, r3, #31
 80048ce:	d50f      	bpl.n	80048f0 <_printf_float+0x23c>
 80048d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af45 	beq.w	800476a <_printf_float+0xb6>
 80048e0:	f04f 0900 	mov.w	r9, #0
 80048e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80048e8:	f104 0a1a 	add.w	sl, r4, #26
 80048ec:	45c8      	cmp	r8, r9
 80048ee:	dc09      	bgt.n	8004904 <_printf_float+0x250>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	079b      	lsls	r3, r3, #30
 80048f4:	f100 8103 	bmi.w	8004afe <_printf_float+0x44a>
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048fc:	4298      	cmp	r0, r3
 80048fe:	bfb8      	it	lt
 8004900:	4618      	movlt	r0, r3
 8004902:	e734      	b.n	800476e <_printf_float+0xba>
 8004904:	2301      	movs	r3, #1
 8004906:	4652      	mov	r2, sl
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af2b 	beq.w	800476a <_printf_float+0xb6>
 8004914:	f109 0901 	add.w	r9, r9, #1
 8004918:	e7e8      	b.n	80048ec <_printf_float+0x238>
 800491a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	dc39      	bgt.n	8004994 <_printf_float+0x2e0>
 8004920:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <_printf_float+0x2dc>)
 8004922:	2301      	movs	r3, #1
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f af1d 	beq.w	800476a <_printf_float+0xb6>
 8004930:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004934:	ea59 0303 	orrs.w	r3, r9, r3
 8004938:	d102      	bne.n	8004940 <_printf_float+0x28c>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07d9      	lsls	r1, r3, #31
 800493e:	d5d7      	bpl.n	80048f0 <_printf_float+0x23c>
 8004940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af0d 	beq.w	800476a <_printf_float+0xb6>
 8004950:	f04f 0a00 	mov.w	sl, #0
 8004954:	f104 0b1a 	add.w	fp, r4, #26
 8004958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800495a:	425b      	negs	r3, r3
 800495c:	4553      	cmp	r3, sl
 800495e:	dc01      	bgt.n	8004964 <_printf_float+0x2b0>
 8004960:	464b      	mov	r3, r9
 8004962:	e793      	b.n	800488c <_printf_float+0x1d8>
 8004964:	2301      	movs	r3, #1
 8004966:	465a      	mov	r2, fp
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f aefb 	beq.w	800476a <_printf_float+0xb6>
 8004974:	f10a 0a01 	add.w	sl, sl, #1
 8004978:	e7ee      	b.n	8004958 <_printf_float+0x2a4>
 800497a:	bf00      	nop
 800497c:	7fefffff 	.word	0x7fefffff
 8004980:	0800727c 	.word	0x0800727c
 8004984:	08007280 	.word	0x08007280
 8004988:	08007284 	.word	0x08007284
 800498c:	08007288 	.word	0x08007288
 8004990:	0800728c 	.word	0x0800728c
 8004994:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004996:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800499a:	4553      	cmp	r3, sl
 800499c:	bfa8      	it	ge
 800499e:	4653      	movge	r3, sl
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	4699      	mov	r9, r3
 80049a4:	dc36      	bgt.n	8004a14 <_printf_float+0x360>
 80049a6:	f04f 0b00 	mov.w	fp, #0
 80049aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ae:	f104 021a 	add.w	r2, r4, #26
 80049b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049b4:	9306      	str	r3, [sp, #24]
 80049b6:	eba3 0309 	sub.w	r3, r3, r9
 80049ba:	455b      	cmp	r3, fp
 80049bc:	dc31      	bgt.n	8004a22 <_printf_float+0x36e>
 80049be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049c0:	459a      	cmp	sl, r3
 80049c2:	dc3a      	bgt.n	8004a3a <_printf_float+0x386>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	07da      	lsls	r2, r3, #31
 80049c8:	d437      	bmi.n	8004a3a <_printf_float+0x386>
 80049ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049cc:	ebaa 0903 	sub.w	r9, sl, r3
 80049d0:	9b06      	ldr	r3, [sp, #24]
 80049d2:	ebaa 0303 	sub.w	r3, sl, r3
 80049d6:	4599      	cmp	r9, r3
 80049d8:	bfa8      	it	ge
 80049da:	4699      	movge	r9, r3
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	dc33      	bgt.n	8004a4a <_printf_float+0x396>
 80049e2:	f04f 0800 	mov.w	r8, #0
 80049e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ea:	f104 0b1a 	add.w	fp, r4, #26
 80049ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f0:	ebaa 0303 	sub.w	r3, sl, r3
 80049f4:	eba3 0309 	sub.w	r3, r3, r9
 80049f8:	4543      	cmp	r3, r8
 80049fa:	f77f af79 	ble.w	80048f0 <_printf_float+0x23c>
 80049fe:	2301      	movs	r3, #1
 8004a00:	465a      	mov	r2, fp
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f aeae 	beq.w	800476a <_printf_float+0xb6>
 8004a0e:	f108 0801 	add.w	r8, r8, #1
 8004a12:	e7ec      	b.n	80049ee <_printf_float+0x33a>
 8004a14:	4642      	mov	r2, r8
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1c2      	bne.n	80049a6 <_printf_float+0x2f2>
 8004a20:	e6a3      	b.n	800476a <_printf_float+0xb6>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	9206      	str	r2, [sp, #24]
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f ae9c 	beq.w	800476a <_printf_float+0xb6>
 8004a32:	9a06      	ldr	r2, [sp, #24]
 8004a34:	f10b 0b01 	add.w	fp, fp, #1
 8004a38:	e7bb      	b.n	80049b2 <_printf_float+0x2fe>
 8004a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	d1c0      	bne.n	80049ca <_printf_float+0x316>
 8004a48:	e68f      	b.n	800476a <_printf_float+0xb6>
 8004a4a:	9a06      	ldr	r2, [sp, #24]
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	4442      	add	r2, r8
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	d1c3      	bne.n	80049e2 <_printf_float+0x32e>
 8004a5a:	e686      	b.n	800476a <_printf_float+0xb6>
 8004a5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a60:	f1ba 0f01 	cmp.w	sl, #1
 8004a64:	dc01      	bgt.n	8004a6a <_printf_float+0x3b6>
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d536      	bpl.n	8004ad8 <_printf_float+0x424>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f ae78 	beq.w	800476a <_printf_float+0xb6>
 8004a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f ae70 	beq.w	800476a <_printf_float+0xb6>
 8004a8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2300      	movs	r3, #0
 8004a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a96:	f7fc f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a9a:	b9c0      	cbnz	r0, 8004ace <_printf_float+0x41a>
 8004a9c:	4653      	mov	r3, sl
 8004a9e:	f108 0201 	add.w	r2, r8, #1
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d10c      	bne.n	8004ac6 <_printf_float+0x412>
 8004aac:	e65d      	b.n	800476a <_printf_float+0xb6>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	465a      	mov	r2, fp
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	f43f ae56 	beq.w	800476a <_printf_float+0xb6>
 8004abe:	f108 0801 	add.w	r8, r8, #1
 8004ac2:	45d0      	cmp	r8, sl
 8004ac4:	dbf3      	blt.n	8004aae <_printf_float+0x3fa>
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004acc:	e6df      	b.n	800488e <_printf_float+0x1da>
 8004ace:	f04f 0800 	mov.w	r8, #0
 8004ad2:	f104 0b1a 	add.w	fp, r4, #26
 8004ad6:	e7f4      	b.n	8004ac2 <_printf_float+0x40e>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	4642      	mov	r2, r8
 8004adc:	e7e1      	b.n	8004aa2 <_printf_float+0x3ee>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	464a      	mov	r2, r9
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b8      	blx	r7
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f43f ae3e 	beq.w	800476a <_printf_float+0xb6>
 8004aee:	f108 0801 	add.w	r8, r8, #1
 8004af2:	68e3      	ldr	r3, [r4, #12]
 8004af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004af6:	1a5b      	subs	r3, r3, r1
 8004af8:	4543      	cmp	r3, r8
 8004afa:	dcf0      	bgt.n	8004ade <_printf_float+0x42a>
 8004afc:	e6fc      	b.n	80048f8 <_printf_float+0x244>
 8004afe:	f04f 0800 	mov.w	r8, #0
 8004b02:	f104 0919 	add.w	r9, r4, #25
 8004b06:	e7f4      	b.n	8004af2 <_printf_float+0x43e>

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	4698      	mov	r8, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bfb8      	it	lt
 8004b1c:	4613      	movlt	r3, r2
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b24:	4607      	mov	r7, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b10a      	cbz	r2, 8004b2e <_printf_common+0x26>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	bf42      	ittt	mi
 8004b34:	6833      	ldrmi	r3, [r6, #0]
 8004b36:	3302      	addmi	r3, #2
 8004b38:	6033      	strmi	r3, [r6, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	f015 0506 	ands.w	r5, r5, #6
 8004b40:	d106      	bne.n	8004b50 <_printf_common+0x48>
 8004b42:	f104 0a19 	add.w	sl, r4, #25
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	6832      	ldr	r2, [r6, #0]
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dc26      	bgt.n	8004b9e <_printf_common+0x96>
 8004b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	3b00      	subs	r3, #0
 8004b58:	bf18      	it	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d42b      	bmi.n	8004bb8 <_printf_common+0xb0>
 8004b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b64:	4641      	mov	r1, r8
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c8      	blx	r9
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d01e      	beq.n	8004bac <_printf_common+0xa4>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf02      	ittt	eq
 8004b7a:	68e5      	ldreq	r5, [r4, #12]
 8004b7c:	6833      	ldreq	r3, [r6, #0]
 8004b7e:	1aed      	subeq	r5, r5, r3
 8004b80:	68a3      	ldr	r3, [r4, #8]
 8004b82:	bf0c      	ite	eq
 8004b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b88:	2500      	movne	r5, #0
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bfc4      	itt	gt
 8004b8e:	1a9b      	subgt	r3, r3, r2
 8004b90:	18ed      	addgt	r5, r5, r3
 8004b92:	2600      	movs	r6, #0
 8004b94:	341a      	adds	r4, #26
 8004b96:	42b5      	cmp	r5, r6
 8004b98:	d11a      	bne.n	8004bd0 <_printf_common+0xc8>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e008      	b.n	8004bb0 <_printf_common+0xa8>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	47c8      	blx	r9
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d103      	bne.n	8004bb4 <_printf_common+0xac>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	e7c6      	b.n	8004b46 <_printf_common+0x3e>
 8004bb8:	18e1      	adds	r1, r4, r3
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	2030      	movs	r0, #48	@ 0x30
 8004bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bc2:	4422      	add	r2, r4
 8004bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bcc:	3302      	adds	r3, #2
 8004bce:	e7c7      	b.n	8004b60 <_printf_common+0x58>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c8      	blx	r9
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d0e6      	beq.n	8004bac <_printf_common+0xa4>
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7d9      	b.n	8004b96 <_printf_common+0x8e>
	...

08004be4 <_printf_i>:
 8004be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	7e0f      	ldrb	r7, [r1, #24]
 8004bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bec:	2f78      	cmp	r7, #120	@ 0x78
 8004bee:	4691      	mov	r9, r2
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	469a      	mov	sl, r3
 8004bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bfa:	d807      	bhi.n	8004c0c <_printf_i+0x28>
 8004bfc:	2f62      	cmp	r7, #98	@ 0x62
 8004bfe:	d80a      	bhi.n	8004c16 <_printf_i+0x32>
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	f000 80d2 	beq.w	8004daa <_printf_i+0x1c6>
 8004c06:	2f58      	cmp	r7, #88	@ 0x58
 8004c08:	f000 80b9 	beq.w	8004d7e <_printf_i+0x19a>
 8004c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c14:	e03a      	b.n	8004c8c <_printf_i+0xa8>
 8004c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c1a:	2b15      	cmp	r3, #21
 8004c1c:	d8f6      	bhi.n	8004c0c <_printf_i+0x28>
 8004c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c24 <_printf_i+0x40>)
 8004c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c24:	08004c7d 	.word	0x08004c7d
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c0d 	.word	0x08004c0d
 8004c30:	08004c0d 	.word	0x08004c0d
 8004c34:	08004c0d 	.word	0x08004c0d
 8004c38:	08004c0d 	.word	0x08004c0d
 8004c3c:	08004c91 	.word	0x08004c91
 8004c40:	08004c0d 	.word	0x08004c0d
 8004c44:	08004c0d 	.word	0x08004c0d
 8004c48:	08004c0d 	.word	0x08004c0d
 8004c4c:	08004c0d 	.word	0x08004c0d
 8004c50:	08004d91 	.word	0x08004d91
 8004c54:	08004cbb 	.word	0x08004cbb
 8004c58:	08004d4b 	.word	0x08004d4b
 8004c5c:	08004c0d 	.word	0x08004c0d
 8004c60:	08004c0d 	.word	0x08004c0d
 8004c64:	08004db3 	.word	0x08004db3
 8004c68:	08004c0d 	.word	0x08004c0d
 8004c6c:	08004cbb 	.word	0x08004cbb
 8004c70:	08004c0d 	.word	0x08004c0d
 8004c74:	08004c0d 	.word	0x08004c0d
 8004c78:	08004d53 	.word	0x08004d53
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6032      	str	r2, [r6, #0]
 8004c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e09d      	b.n	8004dcc <_printf_i+0x1e8>
 8004c90:	6833      	ldr	r3, [r6, #0]
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	1d19      	adds	r1, r3, #4
 8004c96:	6031      	str	r1, [r6, #0]
 8004c98:	0606      	lsls	r6, r0, #24
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_i+0xbc>
 8004c9c:	681d      	ldr	r5, [r3, #0]
 8004c9e:	e003      	b.n	8004ca8 <_printf_i+0xc4>
 8004ca0:	0645      	lsls	r5, r0, #25
 8004ca2:	d5fb      	bpl.n	8004c9c <_printf_i+0xb8>
 8004ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	da03      	bge.n	8004cb4 <_printf_i+0xd0>
 8004cac:	232d      	movs	r3, #45	@ 0x2d
 8004cae:	426d      	negs	r5, r5
 8004cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb4:	4859      	ldr	r0, [pc, #356]	@ (8004e1c <_printf_i+0x238>)
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	e011      	b.n	8004cde <_printf_i+0xfa>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	0608      	lsls	r0, r1, #24
 8004cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cc4:	d402      	bmi.n	8004ccc <_printf_i+0xe8>
 8004cc6:	0649      	lsls	r1, r1, #25
 8004cc8:	bf48      	it	mi
 8004cca:	b2ad      	uxthmi	r5, r5
 8004ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cce:	4853      	ldr	r0, [pc, #332]	@ (8004e1c <_printf_i+0x238>)
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	bf14      	ite	ne
 8004cd4:	230a      	movne	r3, #10
 8004cd6:	2308      	moveq	r3, #8
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cde:	6866      	ldr	r6, [r4, #4]
 8004ce0:	60a6      	str	r6, [r4, #8]
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	bfa2      	ittt	ge
 8004ce6:	6821      	ldrge	r1, [r4, #0]
 8004ce8:	f021 0104 	bicge.w	r1, r1, #4
 8004cec:	6021      	strge	r1, [r4, #0]
 8004cee:	b90d      	cbnz	r5, 8004cf4 <_printf_i+0x110>
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	d04b      	beq.n	8004d8c <_printf_i+0x1a8>
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8004cfe:	5dc7      	ldrb	r7, [r0, r7]
 8004d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d04:	462f      	mov	r7, r5
 8004d06:	42bb      	cmp	r3, r7
 8004d08:	460d      	mov	r5, r1
 8004d0a:	d9f4      	bls.n	8004cf6 <_printf_i+0x112>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10b      	bne.n	8004d28 <_printf_i+0x144>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07df      	lsls	r7, r3, #31
 8004d14:	d508      	bpl.n	8004d28 <_printf_i+0x144>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	bfde      	ittt	le
 8004d1e:	2330      	movle	r3, #48	@ 0x30
 8004d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d28:	1b92      	subs	r2, r2, r6
 8004d2a:	6122      	str	r2, [r4, #16]
 8004d2c:	f8cd a000 	str.w	sl, [sp]
 8004d30:	464b      	mov	r3, r9
 8004d32:	aa03      	add	r2, sp, #12
 8004d34:	4621      	mov	r1, r4
 8004d36:	4640      	mov	r0, r8
 8004d38:	f7ff fee6 	bl	8004b08 <_printf_common>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d14a      	bne.n	8004dd6 <_printf_i+0x1f2>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	b004      	add	sp, #16
 8004d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	f043 0320 	orr.w	r3, r3, #32
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	4833      	ldr	r0, [pc, #204]	@ (8004e20 <_printf_i+0x23c>)
 8004d54:	2778      	movs	r7, #120	@ 0x78
 8004d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	6831      	ldr	r1, [r6, #0]
 8004d5e:	061f      	lsls	r7, r3, #24
 8004d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d64:	d402      	bmi.n	8004d6c <_printf_i+0x188>
 8004d66:	065f      	lsls	r7, r3, #25
 8004d68:	bf48      	it	mi
 8004d6a:	b2ad      	uxthmi	r5, r5
 8004d6c:	6031      	str	r1, [r6, #0]
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	bf44      	itt	mi
 8004d72:	f043 0320 	orrmi.w	r3, r3, #32
 8004d76:	6023      	strmi	r3, [r4, #0]
 8004d78:	b11d      	cbz	r5, 8004d82 <_printf_i+0x19e>
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	e7ac      	b.n	8004cd8 <_printf_i+0xf4>
 8004d7e:	4827      	ldr	r0, [pc, #156]	@ (8004e1c <_printf_i+0x238>)
 8004d80:	e7e9      	b.n	8004d56 <_printf_i+0x172>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f023 0320 	bic.w	r3, r3, #32
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	e7f6      	b.n	8004d7a <_printf_i+0x196>
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	e7bd      	b.n	8004d0c <_printf_i+0x128>
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	6825      	ldr	r5, [r4, #0]
 8004d94:	6961      	ldr	r1, [r4, #20]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	062e      	lsls	r6, r5, #24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	d501      	bpl.n	8004da4 <_printf_i+0x1c0>
 8004da0:	6019      	str	r1, [r3, #0]
 8004da2:	e002      	b.n	8004daa <_printf_i+0x1c6>
 8004da4:	0668      	lsls	r0, r5, #25
 8004da6:	d5fb      	bpl.n	8004da0 <_printf_i+0x1bc>
 8004da8:	8019      	strh	r1, [r3, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	4616      	mov	r6, r2
 8004db0:	e7bc      	b.n	8004d2c <_printf_i+0x148>
 8004db2:	6833      	ldr	r3, [r6, #0]
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	6032      	str	r2, [r6, #0]
 8004db8:	681e      	ldr	r6, [r3, #0]
 8004dba:	6862      	ldr	r2, [r4, #4]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f7fb fa06 	bl	80001d0 <memchr>
 8004dc4:	b108      	cbz	r0, 8004dca <_printf_i+0x1e6>
 8004dc6:	1b80      	subs	r0, r0, r6
 8004dc8:	6060      	str	r0, [r4, #4]
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd4:	e7aa      	b.n	8004d2c <_printf_i+0x148>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d0ad      	beq.n	8004d40 <_printf_i+0x15c>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	079b      	lsls	r3, r3, #30
 8004de8:	d413      	bmi.n	8004e12 <_printf_i+0x22e>
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	4298      	cmp	r0, r3
 8004df0:	bfb8      	it	lt
 8004df2:	4618      	movlt	r0, r3
 8004df4:	e7a6      	b.n	8004d44 <_printf_i+0x160>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	47d0      	blx	sl
 8004e00:	3001      	adds	r0, #1
 8004e02:	d09d      	beq.n	8004d40 <_printf_i+0x15c>
 8004e04:	3501      	adds	r5, #1
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	9903      	ldr	r1, [sp, #12]
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	dcf2      	bgt.n	8004df6 <_printf_i+0x212>
 8004e10:	e7eb      	b.n	8004dea <_printf_i+0x206>
 8004e12:	2500      	movs	r5, #0
 8004e14:	f104 0619 	add.w	r6, r4, #25
 8004e18:	e7f5      	b.n	8004e06 <_printf_i+0x222>
 8004e1a:	bf00      	nop
 8004e1c:	0800728e 	.word	0x0800728e
 8004e20:	0800729f 	.word	0x0800729f

08004e24 <std>:
 8004e24:	2300      	movs	r3, #0
 8004e26:	b510      	push	{r4, lr}
 8004e28:	4604      	mov	r4, r0
 8004e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e32:	6083      	str	r3, [r0, #8]
 8004e34:	8181      	strh	r1, [r0, #12]
 8004e36:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e38:	81c2      	strh	r2, [r0, #14]
 8004e3a:	6183      	str	r3, [r0, #24]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	2208      	movs	r2, #8
 8004e40:	305c      	adds	r0, #92	@ 0x5c
 8004e42:	f000 f914 	bl	800506e <memset>
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x58>)
 8004e48:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <std+0x5c>)
 8004e4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <std+0x60>)
 8004e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <std+0x64>)
 8004e54:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <std+0x68>)
 8004e58:	6224      	str	r4, [r4, #32]
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d006      	beq.n	8004e6c <std+0x48>
 8004e5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e62:	4294      	cmp	r4, r2
 8004e64:	d002      	beq.n	8004e6c <std+0x48>
 8004e66:	33d0      	adds	r3, #208	@ 0xd0
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d105      	bne.n	8004e78 <std+0x54>
 8004e6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e74:	f000 b978 	b.w	8005168 <__retarget_lock_init_recursive>
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08004fe9 	.word	0x08004fe9
 8004e80:	0800500b 	.word	0x0800500b
 8004e84:	08005043 	.word	0x08005043
 8004e88:	08005067 	.word	0x08005067
 8004e8c:	2000034c 	.word	0x2000034c

08004e90 <stdio_exit_handler>:
 8004e90:	4a02      	ldr	r2, [pc, #8]	@ (8004e9c <stdio_exit_handler+0xc>)
 8004e92:	4903      	ldr	r1, [pc, #12]	@ (8004ea0 <stdio_exit_handler+0x10>)
 8004e94:	4803      	ldr	r0, [pc, #12]	@ (8004ea4 <stdio_exit_handler+0x14>)
 8004e96:	f000 b869 	b.w	8004f6c <_fwalk_sglue>
 8004e9a:	bf00      	nop
 8004e9c:	20000010 	.word	0x20000010
 8004ea0:	08006ac5 	.word	0x08006ac5
 8004ea4:	20000020 	.word	0x20000020

08004ea8 <cleanup_stdio>:
 8004ea8:	6841      	ldr	r1, [r0, #4]
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <cleanup_stdio+0x34>)
 8004eac:	4299      	cmp	r1, r3
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	d001      	beq.n	8004eb8 <cleanup_stdio+0x10>
 8004eb4:	f001 fe06 	bl	8006ac4 <_fflush_r>
 8004eb8:	68a1      	ldr	r1, [r4, #8]
 8004eba:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <cleanup_stdio+0x38>)
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	d002      	beq.n	8004ec6 <cleanup_stdio+0x1e>
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f001 fdff 	bl	8006ac4 <_fflush_r>
 8004ec6:	68e1      	ldr	r1, [r4, #12]
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <cleanup_stdio+0x3c>)
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	d004      	beq.n	8004ed8 <cleanup_stdio+0x30>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed4:	f001 bdf6 	b.w	8006ac4 <_fflush_r>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	bf00      	nop
 8004edc:	2000034c 	.word	0x2000034c
 8004ee0:	200003b4 	.word	0x200003b4
 8004ee4:	2000041c 	.word	0x2000041c

08004ee8 <global_stdio_init.part.0>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <global_stdio_init.part.0+0x30>)
 8004eec:	4c0b      	ldr	r4, [pc, #44]	@ (8004f1c <global_stdio_init.part.0+0x34>)
 8004eee:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <global_stdio_init.part.0+0x38>)
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	f7ff ff94 	bl	8004e24 <std>
 8004efc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f00:	2201      	movs	r2, #1
 8004f02:	2109      	movs	r1, #9
 8004f04:	f7ff ff8e 	bl	8004e24 <std>
 8004f08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f12:	2112      	movs	r1, #18
 8004f14:	f7ff bf86 	b.w	8004e24 <std>
 8004f18:	20000484 	.word	0x20000484
 8004f1c:	2000034c 	.word	0x2000034c
 8004f20:	08004e91 	.word	0x08004e91

08004f24 <__sfp_lock_acquire>:
 8004f24:	4801      	ldr	r0, [pc, #4]	@ (8004f2c <__sfp_lock_acquire+0x8>)
 8004f26:	f000 b920 	b.w	800516a <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	2000048d 	.word	0x2000048d

08004f30 <__sfp_lock_release>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__sfp_lock_release+0x8>)
 8004f32:	f000 b91b 	b.w	800516c <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	2000048d 	.word	0x2000048d

08004f3c <__sinit>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	4604      	mov	r4, r0
 8004f40:	f7ff fff0 	bl	8004f24 <__sfp_lock_acquire>
 8004f44:	6a23      	ldr	r3, [r4, #32]
 8004f46:	b11b      	cbz	r3, 8004f50 <__sinit+0x14>
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4c:	f7ff bff0 	b.w	8004f30 <__sfp_lock_release>
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <__sinit+0x28>)
 8004f52:	6223      	str	r3, [r4, #32]
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <__sinit+0x2c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f5      	bne.n	8004f48 <__sinit+0xc>
 8004f5c:	f7ff ffc4 	bl	8004ee8 <global_stdio_init.part.0>
 8004f60:	e7f2      	b.n	8004f48 <__sinit+0xc>
 8004f62:	bf00      	nop
 8004f64:	08004ea9 	.word	0x08004ea9
 8004f68:	20000484 	.word	0x20000484

08004f6c <_fwalk_sglue>:
 8004f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f70:	4607      	mov	r7, r0
 8004f72:	4688      	mov	r8, r1
 8004f74:	4614      	mov	r4, r2
 8004f76:	2600      	movs	r6, #0
 8004f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f80:	d505      	bpl.n	8004f8e <_fwalk_sglue+0x22>
 8004f82:	6824      	ldr	r4, [r4, #0]
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	d1f7      	bne.n	8004f78 <_fwalk_sglue+0xc>
 8004f88:	4630      	mov	r0, r6
 8004f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d907      	bls.n	8004fa4 <_fwalk_sglue+0x38>
 8004f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	d003      	beq.n	8004fa4 <_fwalk_sglue+0x38>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	47c0      	blx	r8
 8004fa2:	4306      	orrs	r6, r0
 8004fa4:	3568      	adds	r5, #104	@ 0x68
 8004fa6:	e7e9      	b.n	8004f7c <_fwalk_sglue+0x10>

08004fa8 <siprintf>:
 8004fa8:	b40e      	push	{r1, r2, r3}
 8004faa:	b500      	push	{lr}
 8004fac:	b09c      	sub	sp, #112	@ 0x70
 8004fae:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fb0:	9002      	str	r0, [sp, #8]
 8004fb2:	9006      	str	r0, [sp, #24]
 8004fb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fb8:	4809      	ldr	r0, [pc, #36]	@ (8004fe0 <siprintf+0x38>)
 8004fba:	9107      	str	r1, [sp, #28]
 8004fbc:	9104      	str	r1, [sp, #16]
 8004fbe:	4909      	ldr	r1, [pc, #36]	@ (8004fe4 <siprintf+0x3c>)
 8004fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	a902      	add	r1, sp, #8
 8004fcc:	f001 fbfa 	bl	80067c4 <_svfiprintf_r>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	b01c      	add	sp, #112	@ 0x70
 8004fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fdc:	b003      	add	sp, #12
 8004fde:	4770      	bx	lr
 8004fe0:	2000001c 	.word	0x2000001c
 8004fe4:	ffff0208 	.word	0xffff0208

08004fe8 <__sread>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	460c      	mov	r4, r1
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	f000 f86c 	bl	80050cc <_read_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	bfab      	itete	ge
 8004ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8004ffc:	181b      	addge	r3, r3, r0
 8004ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005002:	bfac      	ite	ge
 8005004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005006:	81a3      	strhlt	r3, [r4, #12]
 8005008:	bd10      	pop	{r4, pc}

0800500a <__swrite>:
 800500a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500e:	461f      	mov	r7, r3
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	05db      	lsls	r3, r3, #23
 8005014:	4605      	mov	r5, r0
 8005016:	460c      	mov	r4, r1
 8005018:	4616      	mov	r6, r2
 800501a:	d505      	bpl.n	8005028 <__swrite+0x1e>
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	2302      	movs	r3, #2
 8005022:	2200      	movs	r2, #0
 8005024:	f000 f840 	bl	80050a8 <_lseek_r>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800502e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	4632      	mov	r2, r6
 8005036:	463b      	mov	r3, r7
 8005038:	4628      	mov	r0, r5
 800503a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	f000 b857 	b.w	80050f0 <_write_r>

08005042 <__sseek>:
 8005042:	b510      	push	{r4, lr}
 8005044:	460c      	mov	r4, r1
 8005046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504a:	f000 f82d 	bl	80050a8 <_lseek_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	bf15      	itete	ne
 8005054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800505a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800505e:	81a3      	strheq	r3, [r4, #12]
 8005060:	bf18      	it	ne
 8005062:	81a3      	strhne	r3, [r4, #12]
 8005064:	bd10      	pop	{r4, pc}

08005066 <__sclose>:
 8005066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506a:	f000 b80d 	b.w	8005088 <_close_r>

0800506e <memset>:
 800506e:	4402      	add	r2, r0
 8005070:	4603      	mov	r3, r0
 8005072:	4293      	cmp	r3, r2
 8005074:	d100      	bne.n	8005078 <memset+0xa>
 8005076:	4770      	bx	lr
 8005078:	f803 1b01 	strb.w	r1, [r3], #1
 800507c:	e7f9      	b.n	8005072 <memset+0x4>
	...

08005080 <_localeconv_r>:
 8005080:	4800      	ldr	r0, [pc, #0]	@ (8005084 <_localeconv_r+0x4>)
 8005082:	4770      	bx	lr
 8005084:	2000015c 	.word	0x2000015c

08005088 <_close_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d06      	ldr	r5, [pc, #24]	@ (80050a4 <_close_r+0x1c>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	602b      	str	r3, [r5, #0]
 8005094:	f7fc f882 	bl	800119c <_close>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_close_r+0x1a>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_close_r+0x1a>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000488 	.word	0x20000488

080050a8 <_lseek_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	@ (80050c8 <_lseek_r+0x20>)
 80050ac:	4604      	mov	r4, r0
 80050ae:	4608      	mov	r0, r1
 80050b0:	4611      	mov	r1, r2
 80050b2:	2200      	movs	r2, #0
 80050b4:	602a      	str	r2, [r5, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f7fc f897 	bl	80011ea <_lseek>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_lseek_r+0x1e>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_lseek_r+0x1e>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000488 	.word	0x20000488

080050cc <_read_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d07      	ldr	r5, [pc, #28]	@ (80050ec <_read_r+0x20>)
 80050d0:	4604      	mov	r4, r0
 80050d2:	4608      	mov	r0, r1
 80050d4:	4611      	mov	r1, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	602a      	str	r2, [r5, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fc f825 	bl	800112a <_read>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_read_r+0x1e>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_read_r+0x1e>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000488 	.word	0x20000488

080050f0 <_write_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d07      	ldr	r5, [pc, #28]	@ (8005110 <_write_r+0x20>)
 80050f4:	4604      	mov	r4, r0
 80050f6:	4608      	mov	r0, r1
 80050f8:	4611      	mov	r1, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	602a      	str	r2, [r5, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fc f830 	bl	8001164 <_write>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_write_r+0x1e>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_write_r+0x1e>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000488 	.word	0x20000488

08005114 <__errno>:
 8005114:	4b01      	ldr	r3, [pc, #4]	@ (800511c <__errno+0x8>)
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000001c 	.word	0x2000001c

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4d0d      	ldr	r5, [pc, #52]	@ (8005158 <__libc_init_array+0x38>)
 8005124:	4c0d      	ldr	r4, [pc, #52]	@ (800515c <__libc_init_array+0x3c>)
 8005126:	1b64      	subs	r4, r4, r5
 8005128:	10a4      	asrs	r4, r4, #2
 800512a:	2600      	movs	r6, #0
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	4d0b      	ldr	r5, [pc, #44]	@ (8005160 <__libc_init_array+0x40>)
 8005132:	4c0c      	ldr	r4, [pc, #48]	@ (8005164 <__libc_init_array+0x44>)
 8005134:	f002 f864 	bl	8007200 <_init>
 8005138:	1b64      	subs	r4, r4, r5
 800513a:	10a4      	asrs	r4, r4, #2
 800513c:	2600      	movs	r6, #0
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f855 3b04 	ldr.w	r3, [r5], #4
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	080075f8 	.word	0x080075f8
 800515c:	080075f8 	.word	0x080075f8
 8005160:	080075f8 	.word	0x080075f8
 8005164:	080075fc 	.word	0x080075fc

08005168 <__retarget_lock_init_recursive>:
 8005168:	4770      	bx	lr

0800516a <__retarget_lock_acquire_recursive>:
 800516a:	4770      	bx	lr

0800516c <__retarget_lock_release_recursive>:
 800516c:	4770      	bx	lr

0800516e <quorem>:
 800516e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005172:	6903      	ldr	r3, [r0, #16]
 8005174:	690c      	ldr	r4, [r1, #16]
 8005176:	42a3      	cmp	r3, r4
 8005178:	4607      	mov	r7, r0
 800517a:	db7e      	blt.n	800527a <quorem+0x10c>
 800517c:	3c01      	subs	r4, #1
 800517e:	f101 0814 	add.w	r8, r1, #20
 8005182:	00a3      	lsls	r3, r4, #2
 8005184:	f100 0514 	add.w	r5, r0, #20
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005198:	3301      	adds	r3, #1
 800519a:	429a      	cmp	r2, r3
 800519c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051a4:	d32e      	bcc.n	8005204 <quorem+0x96>
 80051a6:	f04f 0a00 	mov.w	sl, #0
 80051aa:	46c4      	mov	ip, r8
 80051ac:	46ae      	mov	lr, r5
 80051ae:	46d3      	mov	fp, sl
 80051b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051b4:	b298      	uxth	r0, r3
 80051b6:	fb06 a000 	mla	r0, r6, r0, sl
 80051ba:	0c02      	lsrs	r2, r0, #16
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	fb06 2303 	mla	r3, r6, r3, r2
 80051c2:	f8de 2000 	ldr.w	r2, [lr]
 80051c6:	b280      	uxth	r0, r0
 80051c8:	b292      	uxth	r2, r2
 80051ca:	1a12      	subs	r2, r2, r0
 80051cc:	445a      	add	r2, fp
 80051ce:	f8de 0000 	ldr.w	r0, [lr]
 80051d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80051dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80051e0:	b292      	uxth	r2, r2
 80051e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80051e6:	45e1      	cmp	r9, ip
 80051e8:	f84e 2b04 	str.w	r2, [lr], #4
 80051ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80051f0:	d2de      	bcs.n	80051b0 <quorem+0x42>
 80051f2:	9b00      	ldr	r3, [sp, #0]
 80051f4:	58eb      	ldr	r3, [r5, r3]
 80051f6:	b92b      	cbnz	r3, 8005204 <quorem+0x96>
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	3b04      	subs	r3, #4
 80051fc:	429d      	cmp	r5, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	d32f      	bcc.n	8005262 <quorem+0xf4>
 8005202:	613c      	str	r4, [r7, #16]
 8005204:	4638      	mov	r0, r7
 8005206:	f001 f979 	bl	80064fc <__mcmp>
 800520a:	2800      	cmp	r0, #0
 800520c:	db25      	blt.n	800525a <quorem+0xec>
 800520e:	4629      	mov	r1, r5
 8005210:	2000      	movs	r0, #0
 8005212:	f858 2b04 	ldr.w	r2, [r8], #4
 8005216:	f8d1 c000 	ldr.w	ip, [r1]
 800521a:	fa1f fe82 	uxth.w	lr, r2
 800521e:	fa1f f38c 	uxth.w	r3, ip
 8005222:	eba3 030e 	sub.w	r3, r3, lr
 8005226:	4403      	add	r3, r0
 8005228:	0c12      	lsrs	r2, r2, #16
 800522a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800522e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005232:	b29b      	uxth	r3, r3
 8005234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005238:	45c1      	cmp	r9, r8
 800523a:	f841 3b04 	str.w	r3, [r1], #4
 800523e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005242:	d2e6      	bcs.n	8005212 <quorem+0xa4>
 8005244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005248:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800524c:	b922      	cbnz	r2, 8005258 <quorem+0xea>
 800524e:	3b04      	subs	r3, #4
 8005250:	429d      	cmp	r5, r3
 8005252:	461a      	mov	r2, r3
 8005254:	d30b      	bcc.n	800526e <quorem+0x100>
 8005256:	613c      	str	r4, [r7, #16]
 8005258:	3601      	adds	r6, #1
 800525a:	4630      	mov	r0, r6
 800525c:	b003      	add	sp, #12
 800525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	3b04      	subs	r3, #4
 8005266:	2a00      	cmp	r2, #0
 8005268:	d1cb      	bne.n	8005202 <quorem+0x94>
 800526a:	3c01      	subs	r4, #1
 800526c:	e7c6      	b.n	80051fc <quorem+0x8e>
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	3b04      	subs	r3, #4
 8005272:	2a00      	cmp	r2, #0
 8005274:	d1ef      	bne.n	8005256 <quorem+0xe8>
 8005276:	3c01      	subs	r4, #1
 8005278:	e7ea      	b.n	8005250 <quorem+0xe2>
 800527a:	2000      	movs	r0, #0
 800527c:	e7ee      	b.n	800525c <quorem+0xee>
	...

08005280 <_dtoa_r>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	69c7      	ldr	r7, [r0, #28]
 8005286:	b099      	sub	sp, #100	@ 0x64
 8005288:	ed8d 0b02 	vstr	d0, [sp, #8]
 800528c:	ec55 4b10 	vmov	r4, r5, d0
 8005290:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005292:	9109      	str	r1, [sp, #36]	@ 0x24
 8005294:	4683      	mov	fp, r0
 8005296:	920e      	str	r2, [sp, #56]	@ 0x38
 8005298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800529a:	b97f      	cbnz	r7, 80052bc <_dtoa_r+0x3c>
 800529c:	2010      	movs	r0, #16
 800529e:	f000 fdfd 	bl	8005e9c <malloc>
 80052a2:	4602      	mov	r2, r0
 80052a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80052a8:	b920      	cbnz	r0, 80052b4 <_dtoa_r+0x34>
 80052aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005548 <_dtoa_r+0x2c8>)
 80052ac:	21ef      	movs	r1, #239	@ 0xef
 80052ae:	48a7      	ldr	r0, [pc, #668]	@ (800554c <_dtoa_r+0x2cc>)
 80052b0:	f001 fc68 	bl	8006b84 <__assert_func>
 80052b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052b8:	6007      	str	r7, [r0, #0]
 80052ba:	60c7      	str	r7, [r0, #12]
 80052bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	b159      	cbz	r1, 80052dc <_dtoa_r+0x5c>
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	604a      	str	r2, [r1, #4]
 80052c8:	2301      	movs	r3, #1
 80052ca:	4093      	lsls	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	4658      	mov	r0, fp
 80052d0:	f000 feda 	bl	8006088 <_Bfree>
 80052d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	1e2b      	subs	r3, r5, #0
 80052de:	bfb9      	ittee	lt
 80052e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80052e4:	9303      	strlt	r3, [sp, #12]
 80052e6:	2300      	movge	r3, #0
 80052e8:	6033      	strge	r3, [r6, #0]
 80052ea:	9f03      	ldr	r7, [sp, #12]
 80052ec:	4b98      	ldr	r3, [pc, #608]	@ (8005550 <_dtoa_r+0x2d0>)
 80052ee:	bfbc      	itt	lt
 80052f0:	2201      	movlt	r2, #1
 80052f2:	6032      	strlt	r2, [r6, #0]
 80052f4:	43bb      	bics	r3, r7
 80052f6:	d112      	bne.n	800531e <_dtoa_r+0x9e>
 80052f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005304:	4323      	orrs	r3, r4
 8005306:	f000 854d 	beq.w	8005da4 <_dtoa_r+0xb24>
 800530a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800530c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005564 <_dtoa_r+0x2e4>
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 854f 	beq.w	8005db4 <_dtoa_r+0xb34>
 8005316:	f10a 0303 	add.w	r3, sl, #3
 800531a:	f000 bd49 	b.w	8005db0 <_dtoa_r+0xb30>
 800531e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	ec51 0b17 	vmov	r0, r1, d7
 8005328:	2300      	movs	r3, #0
 800532a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800532e:	f7fb fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005332:	4680      	mov	r8, r0
 8005334:	b158      	cbz	r0, 800534e <_dtoa_r+0xce>
 8005336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005338:	2301      	movs	r3, #1
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800533e:	b113      	cbz	r3, 8005346 <_dtoa_r+0xc6>
 8005340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005342:	4b84      	ldr	r3, [pc, #528]	@ (8005554 <_dtoa_r+0x2d4>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005568 <_dtoa_r+0x2e8>
 800534a:	f000 bd33 	b.w	8005db4 <_dtoa_r+0xb34>
 800534e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005352:	aa16      	add	r2, sp, #88	@ 0x58
 8005354:	a917      	add	r1, sp, #92	@ 0x5c
 8005356:	4658      	mov	r0, fp
 8005358:	f001 f980 	bl	800665c <__d2b>
 800535c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005360:	4681      	mov	r9, r0
 8005362:	2e00      	cmp	r6, #0
 8005364:	d077      	beq.n	8005456 <_dtoa_r+0x1d6>
 8005366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005368:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800536c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800537c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005380:	4619      	mov	r1, r3
 8005382:	2200      	movs	r2, #0
 8005384:	4b74      	ldr	r3, [pc, #464]	@ (8005558 <_dtoa_r+0x2d8>)
 8005386:	f7fa ff7f 	bl	8000288 <__aeabi_dsub>
 800538a:	a369      	add	r3, pc, #420	@ (adr r3, 8005530 <_dtoa_r+0x2b0>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	a368      	add	r3, pc, #416	@ (adr r3, 8005538 <_dtoa_r+0x2b8>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	f7fa ff77 	bl	800028c <__adddf3>
 800539e:	4604      	mov	r4, r0
 80053a0:	4630      	mov	r0, r6
 80053a2:	460d      	mov	r5, r1
 80053a4:	f7fb f8be 	bl	8000524 <__aeabi_i2d>
 80053a8:	a365      	add	r3, pc, #404	@ (adr r3, 8005540 <_dtoa_r+0x2c0>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fb f923 	bl	80005f8 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4620      	mov	r0, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	f7fa ff67 	bl	800028c <__adddf3>
 80053be:	4604      	mov	r4, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	f7fb fbc9 	bl	8000b58 <__aeabi_d2iz>
 80053c6:	2200      	movs	r2, #0
 80053c8:	4607      	mov	r7, r0
 80053ca:	2300      	movs	r3, #0
 80053cc:	4620      	mov	r0, r4
 80053ce:	4629      	mov	r1, r5
 80053d0:	f7fb fb84 	bl	8000adc <__aeabi_dcmplt>
 80053d4:	b140      	cbz	r0, 80053e8 <_dtoa_r+0x168>
 80053d6:	4638      	mov	r0, r7
 80053d8:	f7fb f8a4 	bl	8000524 <__aeabi_i2d>
 80053dc:	4622      	mov	r2, r4
 80053de:	462b      	mov	r3, r5
 80053e0:	f7fb fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e4:	b900      	cbnz	r0, 80053e8 <_dtoa_r+0x168>
 80053e6:	3f01      	subs	r7, #1
 80053e8:	2f16      	cmp	r7, #22
 80053ea:	d851      	bhi.n	8005490 <_dtoa_r+0x210>
 80053ec:	4b5b      	ldr	r3, [pc, #364]	@ (800555c <_dtoa_r+0x2dc>)
 80053ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053fa:	f7fb fb6f 	bl	8000adc <__aeabi_dcmplt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d048      	beq.n	8005494 <_dtoa_r+0x214>
 8005402:	3f01      	subs	r7, #1
 8005404:	2300      	movs	r3, #0
 8005406:	9312      	str	r3, [sp, #72]	@ 0x48
 8005408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800540a:	1b9b      	subs	r3, r3, r6
 800540c:	1e5a      	subs	r2, r3, #1
 800540e:	bf44      	itt	mi
 8005410:	f1c3 0801 	rsbmi	r8, r3, #1
 8005414:	2300      	movmi	r3, #0
 8005416:	9208      	str	r2, [sp, #32]
 8005418:	bf54      	ite	pl
 800541a:	f04f 0800 	movpl.w	r8, #0
 800541e:	9308      	strmi	r3, [sp, #32]
 8005420:	2f00      	cmp	r7, #0
 8005422:	db39      	blt.n	8005498 <_dtoa_r+0x218>
 8005424:	9b08      	ldr	r3, [sp, #32]
 8005426:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005428:	443b      	add	r3, r7
 800542a:	9308      	str	r3, [sp, #32]
 800542c:	2300      	movs	r3, #0
 800542e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005432:	2b09      	cmp	r3, #9
 8005434:	d864      	bhi.n	8005500 <_dtoa_r+0x280>
 8005436:	2b05      	cmp	r3, #5
 8005438:	bfc4      	itt	gt
 800543a:	3b04      	subgt	r3, #4
 800543c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800543e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005440:	f1a3 0302 	sub.w	r3, r3, #2
 8005444:	bfcc      	ite	gt
 8005446:	2400      	movgt	r4, #0
 8005448:	2401      	movle	r4, #1
 800544a:	2b03      	cmp	r3, #3
 800544c:	d863      	bhi.n	8005516 <_dtoa_r+0x296>
 800544e:	e8df f003 	tbb	[pc, r3]
 8005452:	372a      	.short	0x372a
 8005454:	5535      	.short	0x5535
 8005456:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800545a:	441e      	add	r6, r3
 800545c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005460:	2b20      	cmp	r3, #32
 8005462:	bfc1      	itttt	gt
 8005464:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005468:	409f      	lslgt	r7, r3
 800546a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800546e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005472:	bfd6      	itet	le
 8005474:	f1c3 0320 	rsble	r3, r3, #32
 8005478:	ea47 0003 	orrgt.w	r0, r7, r3
 800547c:	fa04 f003 	lslle.w	r0, r4, r3
 8005480:	f7fb f840 	bl	8000504 <__aeabi_ui2d>
 8005484:	2201      	movs	r2, #1
 8005486:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800548a:	3e01      	subs	r6, #1
 800548c:	9214      	str	r2, [sp, #80]	@ 0x50
 800548e:	e777      	b.n	8005380 <_dtoa_r+0x100>
 8005490:	2301      	movs	r3, #1
 8005492:	e7b8      	b.n	8005406 <_dtoa_r+0x186>
 8005494:	9012      	str	r0, [sp, #72]	@ 0x48
 8005496:	e7b7      	b.n	8005408 <_dtoa_r+0x188>
 8005498:	427b      	negs	r3, r7
 800549a:	930a      	str	r3, [sp, #40]	@ 0x28
 800549c:	2300      	movs	r3, #0
 800549e:	eba8 0807 	sub.w	r8, r8, r7
 80054a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80054a4:	e7c4      	b.n	8005430 <_dtoa_r+0x1b0>
 80054a6:	2300      	movs	r3, #0
 80054a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	dc35      	bgt.n	800551c <_dtoa_r+0x29c>
 80054b0:	2301      	movs	r3, #1
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	461a      	mov	r2, r3
 80054b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80054ba:	e00b      	b.n	80054d4 <_dtoa_r+0x254>
 80054bc:	2301      	movs	r3, #1
 80054be:	e7f3      	b.n	80054a8 <_dtoa_r+0x228>
 80054c0:	2300      	movs	r3, #0
 80054c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	9307      	str	r3, [sp, #28]
 80054d0:	bfb8      	it	lt
 80054d2:	2301      	movlt	r3, #1
 80054d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80054d8:	2100      	movs	r1, #0
 80054da:	2204      	movs	r2, #4
 80054dc:	f102 0514 	add.w	r5, r2, #20
 80054e0:	429d      	cmp	r5, r3
 80054e2:	d91f      	bls.n	8005524 <_dtoa_r+0x2a4>
 80054e4:	6041      	str	r1, [r0, #4]
 80054e6:	4658      	mov	r0, fp
 80054e8:	f000 fd8e 	bl	8006008 <_Balloc>
 80054ec:	4682      	mov	sl, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d13c      	bne.n	800556c <_dtoa_r+0x2ec>
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <_dtoa_r+0x2e0>)
 80054f4:	4602      	mov	r2, r0
 80054f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80054fa:	e6d8      	b.n	80052ae <_dtoa_r+0x2e>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e7e0      	b.n	80054c2 <_dtoa_r+0x242>
 8005500:	2401      	movs	r4, #1
 8005502:	2300      	movs	r3, #0
 8005504:	9309      	str	r3, [sp, #36]	@ 0x24
 8005506:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005508:	f04f 33ff 	mov.w	r3, #4294967295
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	9307      	str	r3, [sp, #28]
 8005510:	2200      	movs	r2, #0
 8005512:	2312      	movs	r3, #18
 8005514:	e7d0      	b.n	80054b8 <_dtoa_r+0x238>
 8005516:	2301      	movs	r3, #1
 8005518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800551a:	e7f5      	b.n	8005508 <_dtoa_r+0x288>
 800551c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	9307      	str	r3, [sp, #28]
 8005522:	e7d7      	b.n	80054d4 <_dtoa_r+0x254>
 8005524:	3101      	adds	r1, #1
 8005526:	0052      	lsls	r2, r2, #1
 8005528:	e7d8      	b.n	80054dc <_dtoa_r+0x25c>
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w
 8005530:	636f4361 	.word	0x636f4361
 8005534:	3fd287a7 	.word	0x3fd287a7
 8005538:	8b60c8b3 	.word	0x8b60c8b3
 800553c:	3fc68a28 	.word	0x3fc68a28
 8005540:	509f79fb 	.word	0x509f79fb
 8005544:	3fd34413 	.word	0x3fd34413
 8005548:	080072bd 	.word	0x080072bd
 800554c:	080072d4 	.word	0x080072d4
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	0800728d 	.word	0x0800728d
 8005558:	3ff80000 	.word	0x3ff80000
 800555c:	080073d0 	.word	0x080073d0
 8005560:	0800732c 	.word	0x0800732c
 8005564:	080072b9 	.word	0x080072b9
 8005568:	0800728c 	.word	0x0800728c
 800556c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005570:	6018      	str	r0, [r3, #0]
 8005572:	9b07      	ldr	r3, [sp, #28]
 8005574:	2b0e      	cmp	r3, #14
 8005576:	f200 80a4 	bhi.w	80056c2 <_dtoa_r+0x442>
 800557a:	2c00      	cmp	r4, #0
 800557c:	f000 80a1 	beq.w	80056c2 <_dtoa_r+0x442>
 8005580:	2f00      	cmp	r7, #0
 8005582:	dd33      	ble.n	80055ec <_dtoa_r+0x36c>
 8005584:	4bad      	ldr	r3, [pc, #692]	@ (800583c <_dtoa_r+0x5bc>)
 8005586:	f007 020f 	and.w	r2, r7, #15
 800558a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800558e:	ed93 7b00 	vldr	d7, [r3]
 8005592:	05f8      	lsls	r0, r7, #23
 8005594:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800559c:	d516      	bpl.n	80055cc <_dtoa_r+0x34c>
 800559e:	4ba8      	ldr	r3, [pc, #672]	@ (8005840 <_dtoa_r+0x5c0>)
 80055a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055a8:	f7fb f950 	bl	800084c <__aeabi_ddiv>
 80055ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b0:	f004 040f 	and.w	r4, r4, #15
 80055b4:	2603      	movs	r6, #3
 80055b6:	4da2      	ldr	r5, [pc, #648]	@ (8005840 <_dtoa_r+0x5c0>)
 80055b8:	b954      	cbnz	r4, 80055d0 <_dtoa_r+0x350>
 80055ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c2:	f7fb f943 	bl	800084c <__aeabi_ddiv>
 80055c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ca:	e028      	b.n	800561e <_dtoa_r+0x39e>
 80055cc:	2602      	movs	r6, #2
 80055ce:	e7f2      	b.n	80055b6 <_dtoa_r+0x336>
 80055d0:	07e1      	lsls	r1, r4, #31
 80055d2:	d508      	bpl.n	80055e6 <_dtoa_r+0x366>
 80055d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055dc:	f7fb f80c 	bl	80005f8 <__aeabi_dmul>
 80055e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055e4:	3601      	adds	r6, #1
 80055e6:	1064      	asrs	r4, r4, #1
 80055e8:	3508      	adds	r5, #8
 80055ea:	e7e5      	b.n	80055b8 <_dtoa_r+0x338>
 80055ec:	f000 80d2 	beq.w	8005794 <_dtoa_r+0x514>
 80055f0:	427c      	negs	r4, r7
 80055f2:	4b92      	ldr	r3, [pc, #584]	@ (800583c <_dtoa_r+0x5bc>)
 80055f4:	4d92      	ldr	r5, [pc, #584]	@ (8005840 <_dtoa_r+0x5c0>)
 80055f6:	f004 020f 	and.w	r2, r4, #15
 80055fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005606:	f7fa fff7 	bl	80005f8 <__aeabi_dmul>
 800560a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800560e:	1124      	asrs	r4, r4, #4
 8005610:	2300      	movs	r3, #0
 8005612:	2602      	movs	r6, #2
 8005614:	2c00      	cmp	r4, #0
 8005616:	f040 80b2 	bne.w	800577e <_dtoa_r+0x4fe>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d3      	bne.n	80055c6 <_dtoa_r+0x346>
 800561e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005620:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80b7 	beq.w	8005798 <_dtoa_r+0x518>
 800562a:	4b86      	ldr	r3, [pc, #536]	@ (8005844 <_dtoa_r+0x5c4>)
 800562c:	2200      	movs	r2, #0
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fb fa53 	bl	8000adc <__aeabi_dcmplt>
 8005636:	2800      	cmp	r0, #0
 8005638:	f000 80ae 	beq.w	8005798 <_dtoa_r+0x518>
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80aa 	beq.w	8005798 <_dtoa_r+0x518>
 8005644:	9b00      	ldr	r3, [sp, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd37      	ble.n	80056ba <_dtoa_r+0x43a>
 800564a:	1e7b      	subs	r3, r7, #1
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	4620      	mov	r0, r4
 8005650:	4b7d      	ldr	r3, [pc, #500]	@ (8005848 <_dtoa_r+0x5c8>)
 8005652:	2200      	movs	r2, #0
 8005654:	4629      	mov	r1, r5
 8005656:	f7fa ffcf 	bl	80005f8 <__aeabi_dmul>
 800565a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800565e:	9c00      	ldr	r4, [sp, #0]
 8005660:	3601      	adds	r6, #1
 8005662:	4630      	mov	r0, r6
 8005664:	f7fa ff5e 	bl	8000524 <__aeabi_i2d>
 8005668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800566c:	f7fa ffc4 	bl	80005f8 <__aeabi_dmul>
 8005670:	4b76      	ldr	r3, [pc, #472]	@ (800584c <_dtoa_r+0x5cc>)
 8005672:	2200      	movs	r2, #0
 8005674:	f7fa fe0a 	bl	800028c <__adddf3>
 8005678:	4605      	mov	r5, r0
 800567a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800567e:	2c00      	cmp	r4, #0
 8005680:	f040 808d 	bne.w	800579e <_dtoa_r+0x51e>
 8005684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005688:	4b71      	ldr	r3, [pc, #452]	@ (8005850 <_dtoa_r+0x5d0>)
 800568a:	2200      	movs	r2, #0
 800568c:	f7fa fdfc 	bl	8000288 <__aeabi_dsub>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005698:	462a      	mov	r2, r5
 800569a:	4633      	mov	r3, r6
 800569c:	f7fb fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f040 828b 	bne.w	8005bbc <_dtoa_r+0x93c>
 80056a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056aa:	462a      	mov	r2, r5
 80056ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056b0:	f7fb fa14 	bl	8000adc <__aeabi_dcmplt>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f040 8128 	bne.w	800590a <_dtoa_r+0x68a>
 80056ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80056be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f2c0 815a 	blt.w	800597e <_dtoa_r+0x6fe>
 80056ca:	2f0e      	cmp	r7, #14
 80056cc:	f300 8157 	bgt.w	800597e <_dtoa_r+0x6fe>
 80056d0:	4b5a      	ldr	r3, [pc, #360]	@ (800583c <_dtoa_r+0x5bc>)
 80056d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056d6:	ed93 7b00 	vldr	d7, [r3]
 80056da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	ed8d 7b00 	vstr	d7, [sp]
 80056e2:	da03      	bge.n	80056ec <_dtoa_r+0x46c>
 80056e4:	9b07      	ldr	r3, [sp, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f340 8101 	ble.w	80058ee <_dtoa_r+0x66e>
 80056ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80056f0:	4656      	mov	r6, sl
 80056f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fb f8a7 	bl	800084c <__aeabi_ddiv>
 80056fe:	f7fb fa2b 	bl	8000b58 <__aeabi_d2iz>
 8005702:	4680      	mov	r8, r0
 8005704:	f7fa ff0e 	bl	8000524 <__aeabi_i2d>
 8005708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800570c:	f7fa ff74 	bl	80005f8 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800571c:	f7fa fdb4 	bl	8000288 <__aeabi_dsub>
 8005720:	f806 4b01 	strb.w	r4, [r6], #1
 8005724:	9d07      	ldr	r5, [sp, #28]
 8005726:	eba6 040a 	sub.w	r4, r6, sl
 800572a:	42a5      	cmp	r5, r4
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	f040 8117 	bne.w	8005962 <_dtoa_r+0x6e2>
 8005734:	f7fa fdaa 	bl	800028c <__adddf3>
 8005738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800573c:	4604      	mov	r4, r0
 800573e:	460d      	mov	r5, r1
 8005740:	f7fb f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 80f9 	bne.w	800593c <_dtoa_r+0x6bc>
 800574a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005756:	b118      	cbz	r0, 8005760 <_dtoa_r+0x4e0>
 8005758:	f018 0f01 	tst.w	r8, #1
 800575c:	f040 80ee 	bne.w	800593c <_dtoa_r+0x6bc>
 8005760:	4649      	mov	r1, r9
 8005762:	4658      	mov	r0, fp
 8005764:	f000 fc90 	bl	8006088 <_Bfree>
 8005768:	2300      	movs	r3, #0
 800576a:	7033      	strb	r3, [r6, #0]
 800576c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800576e:	3701      	adds	r7, #1
 8005770:	601f      	str	r7, [r3, #0]
 8005772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 831d 	beq.w	8005db4 <_dtoa_r+0xb34>
 800577a:	601e      	str	r6, [r3, #0]
 800577c:	e31a      	b.n	8005db4 <_dtoa_r+0xb34>
 800577e:	07e2      	lsls	r2, r4, #31
 8005780:	d505      	bpl.n	800578e <_dtoa_r+0x50e>
 8005782:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005786:	f7fa ff37 	bl	80005f8 <__aeabi_dmul>
 800578a:	3601      	adds	r6, #1
 800578c:	2301      	movs	r3, #1
 800578e:	1064      	asrs	r4, r4, #1
 8005790:	3508      	adds	r5, #8
 8005792:	e73f      	b.n	8005614 <_dtoa_r+0x394>
 8005794:	2602      	movs	r6, #2
 8005796:	e742      	b.n	800561e <_dtoa_r+0x39e>
 8005798:	9c07      	ldr	r4, [sp, #28]
 800579a:	9704      	str	r7, [sp, #16]
 800579c:	e761      	b.n	8005662 <_dtoa_r+0x3e2>
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <_dtoa_r+0x5bc>)
 80057a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057aa:	4454      	add	r4, sl
 80057ac:	2900      	cmp	r1, #0
 80057ae:	d053      	beq.n	8005858 <_dtoa_r+0x5d8>
 80057b0:	4928      	ldr	r1, [pc, #160]	@ (8005854 <_dtoa_r+0x5d4>)
 80057b2:	2000      	movs	r0, #0
 80057b4:	f7fb f84a 	bl	800084c <__aeabi_ddiv>
 80057b8:	4633      	mov	r3, r6
 80057ba:	462a      	mov	r2, r5
 80057bc:	f7fa fd64 	bl	8000288 <__aeabi_dsub>
 80057c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057c4:	4656      	mov	r6, sl
 80057c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ca:	f7fb f9c5 	bl	8000b58 <__aeabi_d2iz>
 80057ce:	4605      	mov	r5, r0
 80057d0:	f7fa fea8 	bl	8000524 <__aeabi_i2d>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057dc:	f7fa fd54 	bl	8000288 <__aeabi_dsub>
 80057e0:	3530      	adds	r5, #48	@ 0x30
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057ea:	f806 5b01 	strb.w	r5, [r6], #1
 80057ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057f2:	f7fb f973 	bl	8000adc <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d171      	bne.n	80058de <_dtoa_r+0x65e>
 80057fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fe:	4911      	ldr	r1, [pc, #68]	@ (8005844 <_dtoa_r+0x5c4>)
 8005800:	2000      	movs	r0, #0
 8005802:	f7fa fd41 	bl	8000288 <__aeabi_dsub>
 8005806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800580a:	f7fb f967 	bl	8000adc <__aeabi_dcmplt>
 800580e:	2800      	cmp	r0, #0
 8005810:	f040 8095 	bne.w	800593e <_dtoa_r+0x6be>
 8005814:	42a6      	cmp	r6, r4
 8005816:	f43f af50 	beq.w	80056ba <_dtoa_r+0x43a>
 800581a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800581e:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <_dtoa_r+0x5c8>)
 8005820:	2200      	movs	r2, #0
 8005822:	f7fa fee9 	bl	80005f8 <__aeabi_dmul>
 8005826:	4b08      	ldr	r3, [pc, #32]	@ (8005848 <_dtoa_r+0x5c8>)
 8005828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800582c:	2200      	movs	r2, #0
 800582e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005832:	f7fa fee1 	bl	80005f8 <__aeabi_dmul>
 8005836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583a:	e7c4      	b.n	80057c6 <_dtoa_r+0x546>
 800583c:	080073d0 	.word	0x080073d0
 8005840:	080073a8 	.word	0x080073a8
 8005844:	3ff00000 	.word	0x3ff00000
 8005848:	40240000 	.word	0x40240000
 800584c:	401c0000 	.word	0x401c0000
 8005850:	40140000 	.word	0x40140000
 8005854:	3fe00000 	.word	0x3fe00000
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005864:	9415      	str	r4, [sp, #84]	@ 0x54
 8005866:	4656      	mov	r6, sl
 8005868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586c:	f7fb f974 	bl	8000b58 <__aeabi_d2iz>
 8005870:	4605      	mov	r5, r0
 8005872:	f7fa fe57 	bl	8000524 <__aeabi_i2d>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800587e:	f7fa fd03 	bl	8000288 <__aeabi_dsub>
 8005882:	3530      	adds	r5, #48	@ 0x30
 8005884:	f806 5b01 	strb.w	r5, [r6], #1
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	42a6      	cmp	r6, r4
 800588e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	d124      	bne.n	80058e2 <_dtoa_r+0x662>
 8005898:	4bac      	ldr	r3, [pc, #688]	@ (8005b4c <_dtoa_r+0x8cc>)
 800589a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800589e:	f7fa fcf5 	bl	800028c <__adddf3>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058aa:	f7fb f935 	bl	8000b18 <__aeabi_dcmpgt>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d145      	bne.n	800593e <_dtoa_r+0x6be>
 80058b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058b6:	49a5      	ldr	r1, [pc, #660]	@ (8005b4c <_dtoa_r+0x8cc>)
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7fa fce5 	bl	8000288 <__aeabi_dsub>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c6:	f7fb f909 	bl	8000adc <__aeabi_dcmplt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f43f aef5 	beq.w	80056ba <_dtoa_r+0x43a>
 80058d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80058d2:	1e73      	subs	r3, r6, #1
 80058d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80058d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80058da:	2b30      	cmp	r3, #48	@ 0x30
 80058dc:	d0f8      	beq.n	80058d0 <_dtoa_r+0x650>
 80058de:	9f04      	ldr	r7, [sp, #16]
 80058e0:	e73e      	b.n	8005760 <_dtoa_r+0x4e0>
 80058e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005b50 <_dtoa_r+0x8d0>)
 80058e4:	f7fa fe88 	bl	80005f8 <__aeabi_dmul>
 80058e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ec:	e7bc      	b.n	8005868 <_dtoa_r+0x5e8>
 80058ee:	d10c      	bne.n	800590a <_dtoa_r+0x68a>
 80058f0:	4b98      	ldr	r3, [pc, #608]	@ (8005b54 <_dtoa_r+0x8d4>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f8:	f7fa fe7e 	bl	80005f8 <__aeabi_dmul>
 80058fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005900:	f7fb f900 	bl	8000b04 <__aeabi_dcmpge>
 8005904:	2800      	cmp	r0, #0
 8005906:	f000 8157 	beq.w	8005bb8 <_dtoa_r+0x938>
 800590a:	2400      	movs	r4, #0
 800590c:	4625      	mov	r5, r4
 800590e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005910:	43db      	mvns	r3, r3
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	4656      	mov	r6, sl
 8005916:	2700      	movs	r7, #0
 8005918:	4621      	mov	r1, r4
 800591a:	4658      	mov	r0, fp
 800591c:	f000 fbb4 	bl	8006088 <_Bfree>
 8005920:	2d00      	cmp	r5, #0
 8005922:	d0dc      	beq.n	80058de <_dtoa_r+0x65e>
 8005924:	b12f      	cbz	r7, 8005932 <_dtoa_r+0x6b2>
 8005926:	42af      	cmp	r7, r5
 8005928:	d003      	beq.n	8005932 <_dtoa_r+0x6b2>
 800592a:	4639      	mov	r1, r7
 800592c:	4658      	mov	r0, fp
 800592e:	f000 fbab 	bl	8006088 <_Bfree>
 8005932:	4629      	mov	r1, r5
 8005934:	4658      	mov	r0, fp
 8005936:	f000 fba7 	bl	8006088 <_Bfree>
 800593a:	e7d0      	b.n	80058de <_dtoa_r+0x65e>
 800593c:	9704      	str	r7, [sp, #16]
 800593e:	4633      	mov	r3, r6
 8005940:	461e      	mov	r6, r3
 8005942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005946:	2a39      	cmp	r2, #57	@ 0x39
 8005948:	d107      	bne.n	800595a <_dtoa_r+0x6da>
 800594a:	459a      	cmp	sl, r3
 800594c:	d1f8      	bne.n	8005940 <_dtoa_r+0x6c0>
 800594e:	9a04      	ldr	r2, [sp, #16]
 8005950:	3201      	adds	r2, #1
 8005952:	9204      	str	r2, [sp, #16]
 8005954:	2230      	movs	r2, #48	@ 0x30
 8005956:	f88a 2000 	strb.w	r2, [sl]
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	3201      	adds	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e7bd      	b.n	80058de <_dtoa_r+0x65e>
 8005962:	4b7b      	ldr	r3, [pc, #492]	@ (8005b50 <_dtoa_r+0x8d0>)
 8005964:	2200      	movs	r2, #0
 8005966:	f7fa fe47 	bl	80005f8 <__aeabi_dmul>
 800596a:	2200      	movs	r2, #0
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	460d      	mov	r5, r1
 8005972:	f7fb f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005976:	2800      	cmp	r0, #0
 8005978:	f43f aebb 	beq.w	80056f2 <_dtoa_r+0x472>
 800597c:	e6f0      	b.n	8005760 <_dtoa_r+0x4e0>
 800597e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005980:	2a00      	cmp	r2, #0
 8005982:	f000 80db 	beq.w	8005b3c <_dtoa_r+0x8bc>
 8005986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005988:	2a01      	cmp	r2, #1
 800598a:	f300 80bf 	bgt.w	8005b0c <_dtoa_r+0x88c>
 800598e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005990:	2a00      	cmp	r2, #0
 8005992:	f000 80b7 	beq.w	8005b04 <_dtoa_r+0x884>
 8005996:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800599a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800599c:	4646      	mov	r6, r8
 800599e:	9a08      	ldr	r2, [sp, #32]
 80059a0:	2101      	movs	r1, #1
 80059a2:	441a      	add	r2, r3
 80059a4:	4658      	mov	r0, fp
 80059a6:	4498      	add	r8, r3
 80059a8:	9208      	str	r2, [sp, #32]
 80059aa:	f000 fc21 	bl	80061f0 <__i2b>
 80059ae:	4605      	mov	r5, r0
 80059b0:	b15e      	cbz	r6, 80059ca <_dtoa_r+0x74a>
 80059b2:	9b08      	ldr	r3, [sp, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dd08      	ble.n	80059ca <_dtoa_r+0x74a>
 80059b8:	42b3      	cmp	r3, r6
 80059ba:	9a08      	ldr	r2, [sp, #32]
 80059bc:	bfa8      	it	ge
 80059be:	4633      	movge	r3, r6
 80059c0:	eba8 0803 	sub.w	r8, r8, r3
 80059c4:	1af6      	subs	r6, r6, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	9308      	str	r3, [sp, #32]
 80059ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059cc:	b1f3      	cbz	r3, 8005a0c <_dtoa_r+0x78c>
 80059ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80b7 	beq.w	8005b44 <_dtoa_r+0x8c4>
 80059d6:	b18c      	cbz	r4, 80059fc <_dtoa_r+0x77c>
 80059d8:	4629      	mov	r1, r5
 80059da:	4622      	mov	r2, r4
 80059dc:	4658      	mov	r0, fp
 80059de:	f000 fcc7 	bl	8006370 <__pow5mult>
 80059e2:	464a      	mov	r2, r9
 80059e4:	4601      	mov	r1, r0
 80059e6:	4605      	mov	r5, r0
 80059e8:	4658      	mov	r0, fp
 80059ea:	f000 fc17 	bl	800621c <__multiply>
 80059ee:	4649      	mov	r1, r9
 80059f0:	9004      	str	r0, [sp, #16]
 80059f2:	4658      	mov	r0, fp
 80059f4:	f000 fb48 	bl	8006088 <_Bfree>
 80059f8:	9b04      	ldr	r3, [sp, #16]
 80059fa:	4699      	mov	r9, r3
 80059fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059fe:	1b1a      	subs	r2, r3, r4
 8005a00:	d004      	beq.n	8005a0c <_dtoa_r+0x78c>
 8005a02:	4649      	mov	r1, r9
 8005a04:	4658      	mov	r0, fp
 8005a06:	f000 fcb3 	bl	8006370 <__pow5mult>
 8005a0a:	4681      	mov	r9, r0
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4658      	mov	r0, fp
 8005a10:	f000 fbee 	bl	80061f0 <__i2b>
 8005a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a16:	4604      	mov	r4, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 81cf 	beq.w	8005dbc <_dtoa_r+0xb3c>
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4601      	mov	r1, r0
 8005a22:	4658      	mov	r0, fp
 8005a24:	f000 fca4 	bl	8006370 <__pow5mult>
 8005a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	f300 8095 	bgt.w	8005b5c <_dtoa_r+0x8dc>
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 8087 	bne.w	8005b48 <_dtoa_r+0x8c8>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8089 	bne.w	8005b58 <_dtoa_r+0x8d8>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	051b      	lsls	r3, r3, #20
 8005a50:	b12b      	cbz	r3, 8005a5e <_dtoa_r+0x7de>
 8005a52:	9b08      	ldr	r3, [sp, #32]
 8005a54:	3301      	adds	r3, #1
 8005a56:	9308      	str	r3, [sp, #32]
 8005a58:	f108 0801 	add.w	r8, r8, #1
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 81b0 	beq.w	8005dc8 <_dtoa_r+0xb48>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a6e:	6918      	ldr	r0, [r3, #16]
 8005a70:	f000 fb72 	bl	8006158 <__hi0bits>
 8005a74:	f1c0 0020 	rsb	r0, r0, #32
 8005a78:	9b08      	ldr	r3, [sp, #32]
 8005a7a:	4418      	add	r0, r3
 8005a7c:	f010 001f 	ands.w	r0, r0, #31
 8005a80:	d077      	beq.n	8005b72 <_dtoa_r+0x8f2>
 8005a82:	f1c0 0320 	rsb	r3, r0, #32
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	dd6b      	ble.n	8005b62 <_dtoa_r+0x8e2>
 8005a8a:	9b08      	ldr	r3, [sp, #32]
 8005a8c:	f1c0 001c 	rsb	r0, r0, #28
 8005a90:	4403      	add	r3, r0
 8005a92:	4480      	add	r8, r0
 8005a94:	4406      	add	r6, r0
 8005a96:	9308      	str	r3, [sp, #32]
 8005a98:	f1b8 0f00 	cmp.w	r8, #0
 8005a9c:	dd05      	ble.n	8005aaa <_dtoa_r+0x82a>
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4658      	mov	r0, fp
 8005aa4:	f000 fcbe 	bl	8006424 <__lshift>
 8005aa8:	4681      	mov	r9, r0
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd05      	ble.n	8005abc <_dtoa_r+0x83c>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 fcb5 	bl	8006424 <__lshift>
 8005aba:	4604      	mov	r4, r0
 8005abc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d059      	beq.n	8005b76 <_dtoa_r+0x8f6>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f000 fd19 	bl	80064fc <__mcmp>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	da53      	bge.n	8005b76 <_dtoa_r+0x8f6>
 8005ace:	1e7b      	subs	r3, r7, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	220a      	movs	r2, #10
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f000 faf7 	bl	80060cc <__multadd>
 8005ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ae0:	4681      	mov	r9, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8172 	beq.w	8005dcc <_dtoa_r+0xb4c>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4629      	mov	r1, r5
 8005aec:	220a      	movs	r2, #10
 8005aee:	4658      	mov	r0, fp
 8005af0:	f000 faec 	bl	80060cc <__multadd>
 8005af4:	9b00      	ldr	r3, [sp, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	4605      	mov	r5, r0
 8005afa:	dc67      	bgt.n	8005bcc <_dtoa_r+0x94c>
 8005afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	dc41      	bgt.n	8005b86 <_dtoa_r+0x906>
 8005b02:	e063      	b.n	8005bcc <_dtoa_r+0x94c>
 8005b04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005b06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b0a:	e746      	b.n	800599a <_dtoa_r+0x71a>
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	1e5c      	subs	r4, r3, #1
 8005b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	bfbf      	itttt	lt
 8005b16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005b1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005b1c:	1ae3      	sublt	r3, r4, r3
 8005b1e:	bfb4      	ite	lt
 8005b20:	18d2      	addlt	r2, r2, r3
 8005b22:	1b1c      	subge	r4, r3, r4
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	bfbc      	itt	lt
 8005b28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005b2a:	2400      	movlt	r4, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bfb5      	itete	lt
 8005b30:	eba8 0603 	sublt.w	r6, r8, r3
 8005b34:	9b07      	ldrge	r3, [sp, #28]
 8005b36:	2300      	movlt	r3, #0
 8005b38:	4646      	movge	r6, r8
 8005b3a:	e730      	b.n	800599e <_dtoa_r+0x71e>
 8005b3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b40:	4646      	mov	r6, r8
 8005b42:	e735      	b.n	80059b0 <_dtoa_r+0x730>
 8005b44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b46:	e75c      	b.n	8005a02 <_dtoa_r+0x782>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e788      	b.n	8005a5e <_dtoa_r+0x7de>
 8005b4c:	3fe00000 	.word	0x3fe00000
 8005b50:	40240000 	.word	0x40240000
 8005b54:	40140000 	.word	0x40140000
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	e780      	b.n	8005a5e <_dtoa_r+0x7de>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b60:	e782      	b.n	8005a68 <_dtoa_r+0x7e8>
 8005b62:	d099      	beq.n	8005a98 <_dtoa_r+0x818>
 8005b64:	9a08      	ldr	r2, [sp, #32]
 8005b66:	331c      	adds	r3, #28
 8005b68:	441a      	add	r2, r3
 8005b6a:	4498      	add	r8, r3
 8005b6c:	441e      	add	r6, r3
 8005b6e:	9208      	str	r2, [sp, #32]
 8005b70:	e792      	b.n	8005a98 <_dtoa_r+0x818>
 8005b72:	4603      	mov	r3, r0
 8005b74:	e7f6      	b.n	8005b64 <_dtoa_r+0x8e4>
 8005b76:	9b07      	ldr	r3, [sp, #28]
 8005b78:	9704      	str	r7, [sp, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc20      	bgt.n	8005bc0 <_dtoa_r+0x940>
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	dd1e      	ble.n	8005bc4 <_dtoa_r+0x944>
 8005b86:	9b00      	ldr	r3, [sp, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f47f aec0 	bne.w	800590e <_dtoa_r+0x68e>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	2205      	movs	r2, #5
 8005b92:	4658      	mov	r0, fp
 8005b94:	f000 fa9a 	bl	80060cc <__multadd>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4648      	mov	r0, r9
 8005b9e:	f000 fcad 	bl	80064fc <__mcmp>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f77f aeb3 	ble.w	800590e <_dtoa_r+0x68e>
 8005ba8:	4656      	mov	r6, sl
 8005baa:	2331      	movs	r3, #49	@ 0x31
 8005bac:	f806 3b01 	strb.w	r3, [r6], #1
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	e6ae      	b.n	8005916 <_dtoa_r+0x696>
 8005bb8:	9c07      	ldr	r4, [sp, #28]
 8005bba:	9704      	str	r7, [sp, #16]
 8005bbc:	4625      	mov	r5, r4
 8005bbe:	e7f3      	b.n	8005ba8 <_dtoa_r+0x928>
 8005bc0:	9b07      	ldr	r3, [sp, #28]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8104 	beq.w	8005dd4 <_dtoa_r+0xb54>
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	dd05      	ble.n	8005bdc <_dtoa_r+0x95c>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	f000 fc25 	bl	8006424 <__lshift>
 8005bda:	4605      	mov	r5, r0
 8005bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d05a      	beq.n	8005c98 <_dtoa_r+0xa18>
 8005be2:	6869      	ldr	r1, [r5, #4]
 8005be4:	4658      	mov	r0, fp
 8005be6:	f000 fa0f 	bl	8006008 <_Balloc>
 8005bea:	4606      	mov	r6, r0
 8005bec:	b928      	cbnz	r0, 8005bfa <_dtoa_r+0x97a>
 8005bee:	4b84      	ldr	r3, [pc, #528]	@ (8005e00 <_dtoa_r+0xb80>)
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005bf6:	f7ff bb5a 	b.w	80052ae <_dtoa_r+0x2e>
 8005bfa:	692a      	ldr	r2, [r5, #16]
 8005bfc:	3202      	adds	r2, #2
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	f105 010c 	add.w	r1, r5, #12
 8005c04:	300c      	adds	r0, #12
 8005c06:	f000 ffaf 	bl	8006b68 <memcpy>
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4658      	mov	r0, fp
 8005c10:	f000 fc08 	bl	8006424 <__lshift>
 8005c14:	f10a 0301 	add.w	r3, sl, #1
 8005c18:	9307      	str	r3, [sp, #28]
 8005c1a:	9b00      	ldr	r3, [sp, #0]
 8005c1c:	4453      	add	r3, sl
 8005c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	462f      	mov	r7, r5
 8005c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4648      	mov	r0, r9
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	f7ff fa9a 	bl	800516e <quorem>
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	9002      	str	r0, [sp, #8]
 8005c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c42:	4648      	mov	r0, r9
 8005c44:	f000 fc5a 	bl	80064fc <__mcmp>
 8005c48:	462a      	mov	r2, r5
 8005c4a:	9008      	str	r0, [sp, #32]
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4658      	mov	r0, fp
 8005c50:	f000 fc70 	bl	8006534 <__mdiff>
 8005c54:	68c2      	ldr	r2, [r0, #12]
 8005c56:	4606      	mov	r6, r0
 8005c58:	bb02      	cbnz	r2, 8005c9c <_dtoa_r+0xa1c>
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	4648      	mov	r0, r9
 8005c5e:	f000 fc4d 	bl	80064fc <__mcmp>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4631      	mov	r1, r6
 8005c66:	4658      	mov	r0, fp
 8005c68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c6a:	f000 fa0d 	bl	8006088 <_Bfree>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c72:	9e07      	ldr	r6, [sp, #28]
 8005c74:	ea43 0102 	orr.w	r1, r3, r2
 8005c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c7a:	4319      	orrs	r1, r3
 8005c7c:	d110      	bne.n	8005ca0 <_dtoa_r+0xa20>
 8005c7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c82:	d029      	beq.n	8005cd8 <_dtoa_r+0xa58>
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd02      	ble.n	8005c90 <_dtoa_r+0xa10>
 8005c8a:	9b02      	ldr	r3, [sp, #8]
 8005c8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005c90:	9b00      	ldr	r3, [sp, #0]
 8005c92:	f883 8000 	strb.w	r8, [r3]
 8005c96:	e63f      	b.n	8005918 <_dtoa_r+0x698>
 8005c98:	4628      	mov	r0, r5
 8005c9a:	e7bb      	b.n	8005c14 <_dtoa_r+0x994>
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	e7e1      	b.n	8005c64 <_dtoa_r+0x9e4>
 8005ca0:	9b08      	ldr	r3, [sp, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	db04      	blt.n	8005cb0 <_dtoa_r+0xa30>
 8005ca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cac:	430b      	orrs	r3, r1
 8005cae:	d120      	bne.n	8005cf2 <_dtoa_r+0xa72>
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	dded      	ble.n	8005c90 <_dtoa_r+0xa10>
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4658      	mov	r0, fp
 8005cba:	f000 fbb3 	bl	8006424 <__lshift>
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	f000 fc1b 	bl	80064fc <__mcmp>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	dc03      	bgt.n	8005cd2 <_dtoa_r+0xa52>
 8005cca:	d1e1      	bne.n	8005c90 <_dtoa_r+0xa10>
 8005ccc:	f018 0f01 	tst.w	r8, #1
 8005cd0:	d0de      	beq.n	8005c90 <_dtoa_r+0xa10>
 8005cd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cd6:	d1d8      	bne.n	8005c8a <_dtoa_r+0xa0a>
 8005cd8:	9a00      	ldr	r2, [sp, #0]
 8005cda:	2339      	movs	r3, #57	@ 0x39
 8005cdc:	7013      	strb	r3, [r2, #0]
 8005cde:	4633      	mov	r3, r6
 8005ce0:	461e      	mov	r6, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ce8:	2a39      	cmp	r2, #57	@ 0x39
 8005cea:	d052      	beq.n	8005d92 <_dtoa_r+0xb12>
 8005cec:	3201      	adds	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	e612      	b.n	8005918 <_dtoa_r+0x698>
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	dd07      	ble.n	8005d06 <_dtoa_r+0xa86>
 8005cf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cfa:	d0ed      	beq.n	8005cd8 <_dtoa_r+0xa58>
 8005cfc:	9a00      	ldr	r2, [sp, #0]
 8005cfe:	f108 0301 	add.w	r3, r8, #1
 8005d02:	7013      	strb	r3, [r2, #0]
 8005d04:	e608      	b.n	8005918 <_dtoa_r+0x698>
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	9a07      	ldr	r2, [sp, #28]
 8005d0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d028      	beq.n	8005d66 <_dtoa_r+0xae6>
 8005d14:	4649      	mov	r1, r9
 8005d16:	2300      	movs	r3, #0
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4658      	mov	r0, fp
 8005d1c:	f000 f9d6 	bl	80060cc <__multadd>
 8005d20:	42af      	cmp	r7, r5
 8005d22:	4681      	mov	r9, r0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	f04f 020a 	mov.w	r2, #10
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	4658      	mov	r0, fp
 8005d30:	d107      	bne.n	8005d42 <_dtoa_r+0xac2>
 8005d32:	f000 f9cb 	bl	80060cc <__multadd>
 8005d36:	4607      	mov	r7, r0
 8005d38:	4605      	mov	r5, r0
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	9307      	str	r3, [sp, #28]
 8005d40:	e774      	b.n	8005c2c <_dtoa_r+0x9ac>
 8005d42:	f000 f9c3 	bl	80060cc <__multadd>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4607      	mov	r7, r0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	220a      	movs	r2, #10
 8005d4e:	4658      	mov	r0, fp
 8005d50:	f000 f9bc 	bl	80060cc <__multadd>
 8005d54:	4605      	mov	r5, r0
 8005d56:	e7f0      	b.n	8005d3a <_dtoa_r+0xaba>
 8005d58:	9b00      	ldr	r3, [sp, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfcc      	ite	gt
 8005d5e:	461e      	movgt	r6, r3
 8005d60:	2601      	movle	r6, #1
 8005d62:	4456      	add	r6, sl
 8005d64:	2700      	movs	r7, #0
 8005d66:	4649      	mov	r1, r9
 8005d68:	2201      	movs	r2, #1
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	f000 fb5a 	bl	8006424 <__lshift>
 8005d70:	4621      	mov	r1, r4
 8005d72:	4681      	mov	r9, r0
 8005d74:	f000 fbc2 	bl	80064fc <__mcmp>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	dcb0      	bgt.n	8005cde <_dtoa_r+0xa5e>
 8005d7c:	d102      	bne.n	8005d84 <_dtoa_r+0xb04>
 8005d7e:	f018 0f01 	tst.w	r8, #1
 8005d82:	d1ac      	bne.n	8005cde <_dtoa_r+0xa5e>
 8005d84:	4633      	mov	r3, r6
 8005d86:	461e      	mov	r6, r3
 8005d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d8c:	2a30      	cmp	r2, #48	@ 0x30
 8005d8e:	d0fa      	beq.n	8005d86 <_dtoa_r+0xb06>
 8005d90:	e5c2      	b.n	8005918 <_dtoa_r+0x698>
 8005d92:	459a      	cmp	sl, r3
 8005d94:	d1a4      	bne.n	8005ce0 <_dtoa_r+0xa60>
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	2331      	movs	r3, #49	@ 0x31
 8005d9e:	f88a 3000 	strb.w	r3, [sl]
 8005da2:	e5b9      	b.n	8005918 <_dtoa_r+0x698>
 8005da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005da6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e04 <_dtoa_r+0xb84>
 8005daa:	b11b      	cbz	r3, 8005db4 <_dtoa_r+0xb34>
 8005dac:	f10a 0308 	add.w	r3, sl, #8
 8005db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4650      	mov	r0, sl
 8005db6:	b019      	add	sp, #100	@ 0x64
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	f77f ae37 	ble.w	8005a32 <_dtoa_r+0x7b2>
 8005dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e655      	b.n	8005a78 <_dtoa_r+0x7f8>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f77f aed6 	ble.w	8005b80 <_dtoa_r+0x900>
 8005dd4:	4656      	mov	r6, sl
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4648      	mov	r0, r9
 8005dda:	f7ff f9c8 	bl	800516e <quorem>
 8005dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005de2:	f806 8b01 	strb.w	r8, [r6], #1
 8005de6:	9b00      	ldr	r3, [sp, #0]
 8005de8:	eba6 020a 	sub.w	r2, r6, sl
 8005dec:	4293      	cmp	r3, r2
 8005dee:	ddb3      	ble.n	8005d58 <_dtoa_r+0xad8>
 8005df0:	4649      	mov	r1, r9
 8005df2:	2300      	movs	r3, #0
 8005df4:	220a      	movs	r2, #10
 8005df6:	4658      	mov	r0, fp
 8005df8:	f000 f968 	bl	80060cc <__multadd>
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	e7ea      	b.n	8005dd6 <_dtoa_r+0xb56>
 8005e00:	0800732c 	.word	0x0800732c
 8005e04:	080072b0 	.word	0x080072b0

08005e08 <_free_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	d041      	beq.n	8005e94 <_free_r+0x8c>
 8005e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e14:	1f0c      	subs	r4, r1, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bfb8      	it	lt
 8005e1a:	18e4      	addlt	r4, r4, r3
 8005e1c:	f000 f8e8 	bl	8005ff0 <__malloc_lock>
 8005e20:	4a1d      	ldr	r2, [pc, #116]	@ (8005e98 <_free_r+0x90>)
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	b933      	cbnz	r3, 8005e34 <_free_r+0x2c>
 8005e26:	6063      	str	r3, [r4, #4]
 8005e28:	6014      	str	r4, [r2, #0]
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e30:	f000 b8e4 	b.w	8005ffc <__malloc_unlock>
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d908      	bls.n	8005e4a <_free_r+0x42>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	1821      	adds	r1, r4, r0
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	bf01      	itttt	eq
 8005e40:	6819      	ldreq	r1, [r3, #0]
 8005e42:	685b      	ldreq	r3, [r3, #4]
 8005e44:	1809      	addeq	r1, r1, r0
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	e7ed      	b.n	8005e26 <_free_r+0x1e>
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	b10b      	cbz	r3, 8005e54 <_free_r+0x4c>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d9fa      	bls.n	8005e4a <_free_r+0x42>
 8005e54:	6811      	ldr	r1, [r2, #0]
 8005e56:	1850      	adds	r0, r2, r1
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d10b      	bne.n	8005e74 <_free_r+0x6c>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	4401      	add	r1, r0
 8005e60:	1850      	adds	r0, r2, r1
 8005e62:	4283      	cmp	r3, r0
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	d1e0      	bne.n	8005e2a <_free_r+0x22>
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	6053      	str	r3, [r2, #4]
 8005e6e:	4408      	add	r0, r1
 8005e70:	6010      	str	r0, [r2, #0]
 8005e72:	e7da      	b.n	8005e2a <_free_r+0x22>
 8005e74:	d902      	bls.n	8005e7c <_free_r+0x74>
 8005e76:	230c      	movs	r3, #12
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	e7d6      	b.n	8005e2a <_free_r+0x22>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	1821      	adds	r1, r4, r0
 8005e80:	428b      	cmp	r3, r1
 8005e82:	bf04      	itt	eq
 8005e84:	6819      	ldreq	r1, [r3, #0]
 8005e86:	685b      	ldreq	r3, [r3, #4]
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	bf04      	itt	eq
 8005e8c:	1809      	addeq	r1, r1, r0
 8005e8e:	6021      	streq	r1, [r4, #0]
 8005e90:	6054      	str	r4, [r2, #4]
 8005e92:	e7ca      	b.n	8005e2a <_free_r+0x22>
 8005e94:	bd38      	pop	{r3, r4, r5, pc}
 8005e96:	bf00      	nop
 8005e98:	20000494 	.word	0x20000494

08005e9c <malloc>:
 8005e9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ea8 <malloc+0xc>)
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	f000 b825 	b.w	8005ef0 <_malloc_r>
 8005ea6:	bf00      	nop
 8005ea8:	2000001c 	.word	0x2000001c

08005eac <sbrk_aligned>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4e0f      	ldr	r6, [pc, #60]	@ (8005eec <sbrk_aligned+0x40>)
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	6831      	ldr	r1, [r6, #0]
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b911      	cbnz	r1, 8005ebe <sbrk_aligned+0x12>
 8005eb8:	f000 fe46 	bl	8006b48 <_sbrk_r>
 8005ebc:	6030      	str	r0, [r6, #0]
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 fe41 	bl	8006b48 <_sbrk_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d103      	bne.n	8005ed2 <sbrk_aligned+0x26>
 8005eca:	f04f 34ff 	mov.w	r4, #4294967295
 8005ece:	4620      	mov	r0, r4
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	1cc4      	adds	r4, r0, #3
 8005ed4:	f024 0403 	bic.w	r4, r4, #3
 8005ed8:	42a0      	cmp	r0, r4
 8005eda:	d0f8      	beq.n	8005ece <sbrk_aligned+0x22>
 8005edc:	1a21      	subs	r1, r4, r0
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 fe32 	bl	8006b48 <_sbrk_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1f2      	bne.n	8005ece <sbrk_aligned+0x22>
 8005ee8:	e7ef      	b.n	8005eca <sbrk_aligned+0x1e>
 8005eea:	bf00      	nop
 8005eec:	20000490 	.word	0x20000490

08005ef0 <_malloc_r>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	1ccd      	adds	r5, r1, #3
 8005ef6:	f025 0503 	bic.w	r5, r5, #3
 8005efa:	3508      	adds	r5, #8
 8005efc:	2d0c      	cmp	r5, #12
 8005efe:	bf38      	it	cc
 8005f00:	250c      	movcc	r5, #12
 8005f02:	2d00      	cmp	r5, #0
 8005f04:	4606      	mov	r6, r0
 8005f06:	db01      	blt.n	8005f0c <_malloc_r+0x1c>
 8005f08:	42a9      	cmp	r1, r5
 8005f0a:	d904      	bls.n	8005f16 <_malloc_r+0x26>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	6033      	str	r3, [r6, #0]
 8005f10:	2000      	movs	r0, #0
 8005f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fec <_malloc_r+0xfc>
 8005f1a:	f000 f869 	bl	8005ff0 <__malloc_lock>
 8005f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f22:	461c      	mov	r4, r3
 8005f24:	bb44      	cbnz	r4, 8005f78 <_malloc_r+0x88>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff ffbf 	bl	8005eac <sbrk_aligned>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	4604      	mov	r4, r0
 8005f32:	d158      	bne.n	8005fe6 <_malloc_r+0xf6>
 8005f34:	f8d8 4000 	ldr.w	r4, [r8]
 8005f38:	4627      	mov	r7, r4
 8005f3a:	2f00      	cmp	r7, #0
 8005f3c:	d143      	bne.n	8005fc6 <_malloc_r+0xd6>
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	d04b      	beq.n	8005fda <_malloc_r+0xea>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	4639      	mov	r1, r7
 8005f46:	4630      	mov	r0, r6
 8005f48:	eb04 0903 	add.w	r9, r4, r3
 8005f4c:	f000 fdfc 	bl	8006b48 <_sbrk_r>
 8005f50:	4581      	cmp	r9, r0
 8005f52:	d142      	bne.n	8005fda <_malloc_r+0xea>
 8005f54:	6821      	ldr	r1, [r4, #0]
 8005f56:	1a6d      	subs	r5, r5, r1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f7ff ffa6 	bl	8005eac <sbrk_aligned>
 8005f60:	3001      	adds	r0, #1
 8005f62:	d03a      	beq.n	8005fda <_malloc_r+0xea>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	442b      	add	r3, r5
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	bb62      	cbnz	r2, 8005fcc <_malloc_r+0xdc>
 8005f72:	f8c8 7000 	str.w	r7, [r8]
 8005f76:	e00f      	b.n	8005f98 <_malloc_r+0xa8>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	1b52      	subs	r2, r2, r5
 8005f7c:	d420      	bmi.n	8005fc0 <_malloc_r+0xd0>
 8005f7e:	2a0b      	cmp	r2, #11
 8005f80:	d917      	bls.n	8005fb2 <_malloc_r+0xc2>
 8005f82:	1961      	adds	r1, r4, r5
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	6025      	str	r5, [r4, #0]
 8005f88:	bf18      	it	ne
 8005f8a:	6059      	strne	r1, [r3, #4]
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	bf08      	it	eq
 8005f90:	f8c8 1000 	streq.w	r1, [r8]
 8005f94:	5162      	str	r2, [r4, r5]
 8005f96:	604b      	str	r3, [r1, #4]
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 f82f 	bl	8005ffc <__malloc_unlock>
 8005f9e:	f104 000b 	add.w	r0, r4, #11
 8005fa2:	1d23      	adds	r3, r4, #4
 8005fa4:	f020 0007 	bic.w	r0, r0, #7
 8005fa8:	1ac2      	subs	r2, r0, r3
 8005faa:	bf1c      	itt	ne
 8005fac:	1a1b      	subne	r3, r3, r0
 8005fae:	50a3      	strne	r3, [r4, r2]
 8005fb0:	e7af      	b.n	8005f12 <_malloc_r+0x22>
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	bf0c      	ite	eq
 8005fb8:	f8c8 2000 	streq.w	r2, [r8]
 8005fbc:	605a      	strne	r2, [r3, #4]
 8005fbe:	e7eb      	b.n	8005f98 <_malloc_r+0xa8>
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	6864      	ldr	r4, [r4, #4]
 8005fc4:	e7ae      	b.n	8005f24 <_malloc_r+0x34>
 8005fc6:	463c      	mov	r4, r7
 8005fc8:	687f      	ldr	r7, [r7, #4]
 8005fca:	e7b6      	b.n	8005f3a <_malloc_r+0x4a>
 8005fcc:	461a      	mov	r2, r3
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	d1fb      	bne.n	8005fcc <_malloc_r+0xdc>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6053      	str	r3, [r2, #4]
 8005fd8:	e7de      	b.n	8005f98 <_malloc_r+0xa8>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f80c 	bl	8005ffc <__malloc_unlock>
 8005fe4:	e794      	b.n	8005f10 <_malloc_r+0x20>
 8005fe6:	6005      	str	r5, [r0, #0]
 8005fe8:	e7d6      	b.n	8005f98 <_malloc_r+0xa8>
 8005fea:	bf00      	nop
 8005fec:	20000494 	.word	0x20000494

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	@ (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f7ff b8ba 	b.w	800516a <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	2000048c 	.word	0x2000048c

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	@ (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f7ff b8b5 	b.w	800516c <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	2000048c 	.word	0x2000048c

08006008 <_Balloc>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	69c6      	ldr	r6, [r0, #28]
 800600c:	4604      	mov	r4, r0
 800600e:	460d      	mov	r5, r1
 8006010:	b976      	cbnz	r6, 8006030 <_Balloc+0x28>
 8006012:	2010      	movs	r0, #16
 8006014:	f7ff ff42 	bl	8005e9c <malloc>
 8006018:	4602      	mov	r2, r0
 800601a:	61e0      	str	r0, [r4, #28]
 800601c:	b920      	cbnz	r0, 8006028 <_Balloc+0x20>
 800601e:	4b18      	ldr	r3, [pc, #96]	@ (8006080 <_Balloc+0x78>)
 8006020:	4818      	ldr	r0, [pc, #96]	@ (8006084 <_Balloc+0x7c>)
 8006022:	216b      	movs	r1, #107	@ 0x6b
 8006024:	f000 fdae 	bl	8006b84 <__assert_func>
 8006028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800602c:	6006      	str	r6, [r0, #0]
 800602e:	60c6      	str	r6, [r0, #12]
 8006030:	69e6      	ldr	r6, [r4, #28]
 8006032:	68f3      	ldr	r3, [r6, #12]
 8006034:	b183      	cbz	r3, 8006058 <_Balloc+0x50>
 8006036:	69e3      	ldr	r3, [r4, #28]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800603e:	b9b8      	cbnz	r0, 8006070 <_Balloc+0x68>
 8006040:	2101      	movs	r1, #1
 8006042:	fa01 f605 	lsl.w	r6, r1, r5
 8006046:	1d72      	adds	r2, r6, #5
 8006048:	0092      	lsls	r2, r2, #2
 800604a:	4620      	mov	r0, r4
 800604c:	f000 fdb8 	bl	8006bc0 <_calloc_r>
 8006050:	b160      	cbz	r0, 800606c <_Balloc+0x64>
 8006052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006056:	e00e      	b.n	8006076 <_Balloc+0x6e>
 8006058:	2221      	movs	r2, #33	@ 0x21
 800605a:	2104      	movs	r1, #4
 800605c:	4620      	mov	r0, r4
 800605e:	f000 fdaf 	bl	8006bc0 <_calloc_r>
 8006062:	69e3      	ldr	r3, [r4, #28]
 8006064:	60f0      	str	r0, [r6, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e4      	bne.n	8006036 <_Balloc+0x2e>
 800606c:	2000      	movs	r0, #0
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	6802      	ldr	r2, [r0, #0]
 8006072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006076:	2300      	movs	r3, #0
 8006078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800607c:	e7f7      	b.n	800606e <_Balloc+0x66>
 800607e:	bf00      	nop
 8006080:	080072bd 	.word	0x080072bd
 8006084:	0800733d 	.word	0x0800733d

08006088 <_Bfree>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	69c6      	ldr	r6, [r0, #28]
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	b976      	cbnz	r6, 80060b0 <_Bfree+0x28>
 8006092:	2010      	movs	r0, #16
 8006094:	f7ff ff02 	bl	8005e9c <malloc>
 8006098:	4602      	mov	r2, r0
 800609a:	61e8      	str	r0, [r5, #28]
 800609c:	b920      	cbnz	r0, 80060a8 <_Bfree+0x20>
 800609e:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <_Bfree+0x3c>)
 80060a0:	4809      	ldr	r0, [pc, #36]	@ (80060c8 <_Bfree+0x40>)
 80060a2:	218f      	movs	r1, #143	@ 0x8f
 80060a4:	f000 fd6e 	bl	8006b84 <__assert_func>
 80060a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060ac:	6006      	str	r6, [r0, #0]
 80060ae:	60c6      	str	r6, [r0, #12]
 80060b0:	b13c      	cbz	r4, 80060c2 <_Bfree+0x3a>
 80060b2:	69eb      	ldr	r3, [r5, #28]
 80060b4:	6862      	ldr	r2, [r4, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060bc:	6021      	str	r1, [r4, #0]
 80060be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	080072bd 	.word	0x080072bd
 80060c8:	0800733d 	.word	0x0800733d

080060cc <__multadd>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	690d      	ldr	r5, [r1, #16]
 80060d2:	4607      	mov	r7, r0
 80060d4:	460c      	mov	r4, r1
 80060d6:	461e      	mov	r6, r3
 80060d8:	f101 0c14 	add.w	ip, r1, #20
 80060dc:	2000      	movs	r0, #0
 80060de:	f8dc 3000 	ldr.w	r3, [ip]
 80060e2:	b299      	uxth	r1, r3
 80060e4:	fb02 6101 	mla	r1, r2, r1, r6
 80060e8:	0c1e      	lsrs	r6, r3, #16
 80060ea:	0c0b      	lsrs	r3, r1, #16
 80060ec:	fb02 3306 	mla	r3, r2, r6, r3
 80060f0:	b289      	uxth	r1, r1
 80060f2:	3001      	adds	r0, #1
 80060f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060f8:	4285      	cmp	r5, r0
 80060fa:	f84c 1b04 	str.w	r1, [ip], #4
 80060fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006102:	dcec      	bgt.n	80060de <__multadd+0x12>
 8006104:	b30e      	cbz	r6, 800614a <__multadd+0x7e>
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	42ab      	cmp	r3, r5
 800610a:	dc19      	bgt.n	8006140 <__multadd+0x74>
 800610c:	6861      	ldr	r1, [r4, #4]
 800610e:	4638      	mov	r0, r7
 8006110:	3101      	adds	r1, #1
 8006112:	f7ff ff79 	bl	8006008 <_Balloc>
 8006116:	4680      	mov	r8, r0
 8006118:	b928      	cbnz	r0, 8006126 <__multadd+0x5a>
 800611a:	4602      	mov	r2, r0
 800611c:	4b0c      	ldr	r3, [pc, #48]	@ (8006150 <__multadd+0x84>)
 800611e:	480d      	ldr	r0, [pc, #52]	@ (8006154 <__multadd+0x88>)
 8006120:	21ba      	movs	r1, #186	@ 0xba
 8006122:	f000 fd2f 	bl	8006b84 <__assert_func>
 8006126:	6922      	ldr	r2, [r4, #16]
 8006128:	3202      	adds	r2, #2
 800612a:	f104 010c 	add.w	r1, r4, #12
 800612e:	0092      	lsls	r2, r2, #2
 8006130:	300c      	adds	r0, #12
 8006132:	f000 fd19 	bl	8006b68 <memcpy>
 8006136:	4621      	mov	r1, r4
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff ffa5 	bl	8006088 <_Bfree>
 800613e:	4644      	mov	r4, r8
 8006140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006144:	3501      	adds	r5, #1
 8006146:	615e      	str	r6, [r3, #20]
 8006148:	6125      	str	r5, [r4, #16]
 800614a:	4620      	mov	r0, r4
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	0800732c 	.word	0x0800732c
 8006154:	0800733d 	.word	0x0800733d

08006158 <__hi0bits>:
 8006158:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800615c:	4603      	mov	r3, r0
 800615e:	bf36      	itet	cc
 8006160:	0403      	lslcc	r3, r0, #16
 8006162:	2000      	movcs	r0, #0
 8006164:	2010      	movcc	r0, #16
 8006166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800616a:	bf3c      	itt	cc
 800616c:	021b      	lslcc	r3, r3, #8
 800616e:	3008      	addcc	r0, #8
 8006170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006174:	bf3c      	itt	cc
 8006176:	011b      	lslcc	r3, r3, #4
 8006178:	3004      	addcc	r0, #4
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	bf3c      	itt	cc
 8006180:	009b      	lslcc	r3, r3, #2
 8006182:	3002      	addcc	r0, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	db05      	blt.n	8006194 <__hi0bits+0x3c>
 8006188:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800618c:	f100 0001 	add.w	r0, r0, #1
 8006190:	bf08      	it	eq
 8006192:	2020      	moveq	r0, #32
 8006194:	4770      	bx	lr

08006196 <__lo0bits>:
 8006196:	6803      	ldr	r3, [r0, #0]
 8006198:	4602      	mov	r2, r0
 800619a:	f013 0007 	ands.w	r0, r3, #7
 800619e:	d00b      	beq.n	80061b8 <__lo0bits+0x22>
 80061a0:	07d9      	lsls	r1, r3, #31
 80061a2:	d421      	bmi.n	80061e8 <__lo0bits+0x52>
 80061a4:	0798      	lsls	r0, r3, #30
 80061a6:	bf49      	itett	mi
 80061a8:	085b      	lsrmi	r3, r3, #1
 80061aa:	089b      	lsrpl	r3, r3, #2
 80061ac:	2001      	movmi	r0, #1
 80061ae:	6013      	strmi	r3, [r2, #0]
 80061b0:	bf5c      	itt	pl
 80061b2:	6013      	strpl	r3, [r2, #0]
 80061b4:	2002      	movpl	r0, #2
 80061b6:	4770      	bx	lr
 80061b8:	b299      	uxth	r1, r3
 80061ba:	b909      	cbnz	r1, 80061c0 <__lo0bits+0x2a>
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	2010      	movs	r0, #16
 80061c0:	b2d9      	uxtb	r1, r3
 80061c2:	b909      	cbnz	r1, 80061c8 <__lo0bits+0x32>
 80061c4:	3008      	adds	r0, #8
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	0719      	lsls	r1, r3, #28
 80061ca:	bf04      	itt	eq
 80061cc:	091b      	lsreq	r3, r3, #4
 80061ce:	3004      	addeq	r0, #4
 80061d0:	0799      	lsls	r1, r3, #30
 80061d2:	bf04      	itt	eq
 80061d4:	089b      	lsreq	r3, r3, #2
 80061d6:	3002      	addeq	r0, #2
 80061d8:	07d9      	lsls	r1, r3, #31
 80061da:	d403      	bmi.n	80061e4 <__lo0bits+0x4e>
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	f100 0001 	add.w	r0, r0, #1
 80061e2:	d003      	beq.n	80061ec <__lo0bits+0x56>
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4770      	bx	lr
 80061e8:	2000      	movs	r0, #0
 80061ea:	4770      	bx	lr
 80061ec:	2020      	movs	r0, #32
 80061ee:	4770      	bx	lr

080061f0 <__i2b>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	460c      	mov	r4, r1
 80061f4:	2101      	movs	r1, #1
 80061f6:	f7ff ff07 	bl	8006008 <_Balloc>
 80061fa:	4602      	mov	r2, r0
 80061fc:	b928      	cbnz	r0, 800620a <__i2b+0x1a>
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <__i2b+0x24>)
 8006200:	4805      	ldr	r0, [pc, #20]	@ (8006218 <__i2b+0x28>)
 8006202:	f240 1145 	movw	r1, #325	@ 0x145
 8006206:	f000 fcbd 	bl	8006b84 <__assert_func>
 800620a:	2301      	movs	r3, #1
 800620c:	6144      	str	r4, [r0, #20]
 800620e:	6103      	str	r3, [r0, #16]
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	0800732c 	.word	0x0800732c
 8006218:	0800733d 	.word	0x0800733d

0800621c <__multiply>:
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	4614      	mov	r4, r2
 8006222:	690a      	ldr	r2, [r1, #16]
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	429a      	cmp	r2, r3
 8006228:	bfa8      	it	ge
 800622a:	4623      	movge	r3, r4
 800622c:	460f      	mov	r7, r1
 800622e:	bfa4      	itt	ge
 8006230:	460c      	movge	r4, r1
 8006232:	461f      	movge	r7, r3
 8006234:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006238:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	6861      	ldr	r1, [r4, #4]
 8006240:	eb0a 0609 	add.w	r6, sl, r9
 8006244:	42b3      	cmp	r3, r6
 8006246:	b085      	sub	sp, #20
 8006248:	bfb8      	it	lt
 800624a:	3101      	addlt	r1, #1
 800624c:	f7ff fedc 	bl	8006008 <_Balloc>
 8006250:	b930      	cbnz	r0, 8006260 <__multiply+0x44>
 8006252:	4602      	mov	r2, r0
 8006254:	4b44      	ldr	r3, [pc, #272]	@ (8006368 <__multiply+0x14c>)
 8006256:	4845      	ldr	r0, [pc, #276]	@ (800636c <__multiply+0x150>)
 8006258:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800625c:	f000 fc92 	bl	8006b84 <__assert_func>
 8006260:	f100 0514 	add.w	r5, r0, #20
 8006264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006268:	462b      	mov	r3, r5
 800626a:	2200      	movs	r2, #0
 800626c:	4543      	cmp	r3, r8
 800626e:	d321      	bcc.n	80062b4 <__multiply+0x98>
 8006270:	f107 0114 	add.w	r1, r7, #20
 8006274:	f104 0214 	add.w	r2, r4, #20
 8006278:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800627c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006280:	9302      	str	r3, [sp, #8]
 8006282:	1b13      	subs	r3, r2, r4
 8006284:	3b15      	subs	r3, #21
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	3304      	adds	r3, #4
 800628c:	f104 0715 	add.w	r7, r4, #21
 8006290:	42ba      	cmp	r2, r7
 8006292:	bf38      	it	cc
 8006294:	2304      	movcc	r3, #4
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	9103      	str	r1, [sp, #12]
 800629c:	428b      	cmp	r3, r1
 800629e:	d80c      	bhi.n	80062ba <__multiply+0x9e>
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	dd03      	ble.n	80062ac <__multiply+0x90>
 80062a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05b      	beq.n	8006364 <__multiply+0x148>
 80062ac:	6106      	str	r6, [r0, #16]
 80062ae:	b005      	add	sp, #20
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	f843 2b04 	str.w	r2, [r3], #4
 80062b8:	e7d8      	b.n	800626c <__multiply+0x50>
 80062ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80062be:	f1ba 0f00 	cmp.w	sl, #0
 80062c2:	d024      	beq.n	800630e <__multiply+0xf2>
 80062c4:	f104 0e14 	add.w	lr, r4, #20
 80062c8:	46a9      	mov	r9, r5
 80062ca:	f04f 0c00 	mov.w	ip, #0
 80062ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80062d2:	f8d9 3000 	ldr.w	r3, [r9]
 80062d6:	fa1f fb87 	uxth.w	fp, r7
 80062da:	b29b      	uxth	r3, r3
 80062dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80062e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80062e4:	f8d9 7000 	ldr.w	r7, [r9]
 80062e8:	4463      	add	r3, ip
 80062ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80062ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80062f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062fc:	4572      	cmp	r2, lr
 80062fe:	f849 3b04 	str.w	r3, [r9], #4
 8006302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006306:	d8e2      	bhi.n	80062ce <__multiply+0xb2>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	f845 c003 	str.w	ip, [r5, r3]
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006314:	3104      	adds	r1, #4
 8006316:	f1b9 0f00 	cmp.w	r9, #0
 800631a:	d021      	beq.n	8006360 <__multiply+0x144>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	f104 0c14 	add.w	ip, r4, #20
 8006322:	46ae      	mov	lr, r5
 8006324:	f04f 0a00 	mov.w	sl, #0
 8006328:	f8bc b000 	ldrh.w	fp, [ip]
 800632c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006330:	fb09 770b 	mla	r7, r9, fp, r7
 8006334:	4457      	add	r7, sl
 8006336:	b29b      	uxth	r3, r3
 8006338:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800633c:	f84e 3b04 	str.w	r3, [lr], #4
 8006340:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006348:	f8be 3000 	ldrh.w	r3, [lr]
 800634c:	fb09 330a 	mla	r3, r9, sl, r3
 8006350:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006354:	4562      	cmp	r2, ip
 8006356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800635a:	d8e5      	bhi.n	8006328 <__multiply+0x10c>
 800635c:	9f01      	ldr	r7, [sp, #4]
 800635e:	51eb      	str	r3, [r5, r7]
 8006360:	3504      	adds	r5, #4
 8006362:	e799      	b.n	8006298 <__multiply+0x7c>
 8006364:	3e01      	subs	r6, #1
 8006366:	e79b      	b.n	80062a0 <__multiply+0x84>
 8006368:	0800732c 	.word	0x0800732c
 800636c:	0800733d 	.word	0x0800733d

08006370 <__pow5mult>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4615      	mov	r5, r2
 8006376:	f012 0203 	ands.w	r2, r2, #3
 800637a:	4607      	mov	r7, r0
 800637c:	460e      	mov	r6, r1
 800637e:	d007      	beq.n	8006390 <__pow5mult+0x20>
 8006380:	4c25      	ldr	r4, [pc, #148]	@ (8006418 <__pow5mult+0xa8>)
 8006382:	3a01      	subs	r2, #1
 8006384:	2300      	movs	r3, #0
 8006386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800638a:	f7ff fe9f 	bl	80060cc <__multadd>
 800638e:	4606      	mov	r6, r0
 8006390:	10ad      	asrs	r5, r5, #2
 8006392:	d03d      	beq.n	8006410 <__pow5mult+0xa0>
 8006394:	69fc      	ldr	r4, [r7, #28]
 8006396:	b97c      	cbnz	r4, 80063b8 <__pow5mult+0x48>
 8006398:	2010      	movs	r0, #16
 800639a:	f7ff fd7f 	bl	8005e9c <malloc>
 800639e:	4602      	mov	r2, r0
 80063a0:	61f8      	str	r0, [r7, #28]
 80063a2:	b928      	cbnz	r0, 80063b0 <__pow5mult+0x40>
 80063a4:	4b1d      	ldr	r3, [pc, #116]	@ (800641c <__pow5mult+0xac>)
 80063a6:	481e      	ldr	r0, [pc, #120]	@ (8006420 <__pow5mult+0xb0>)
 80063a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063ac:	f000 fbea 	bl	8006b84 <__assert_func>
 80063b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063b4:	6004      	str	r4, [r0, #0]
 80063b6:	60c4      	str	r4, [r0, #12]
 80063b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063c0:	b94c      	cbnz	r4, 80063d6 <__pow5mult+0x66>
 80063c2:	f240 2171 	movw	r1, #625	@ 0x271
 80063c6:	4638      	mov	r0, r7
 80063c8:	f7ff ff12 	bl	80061f0 <__i2b>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80063d2:	4604      	mov	r4, r0
 80063d4:	6003      	str	r3, [r0, #0]
 80063d6:	f04f 0900 	mov.w	r9, #0
 80063da:	07eb      	lsls	r3, r5, #31
 80063dc:	d50a      	bpl.n	80063f4 <__pow5mult+0x84>
 80063de:	4631      	mov	r1, r6
 80063e0:	4622      	mov	r2, r4
 80063e2:	4638      	mov	r0, r7
 80063e4:	f7ff ff1a 	bl	800621c <__multiply>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4680      	mov	r8, r0
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff fe4b 	bl	8006088 <_Bfree>
 80063f2:	4646      	mov	r6, r8
 80063f4:	106d      	asrs	r5, r5, #1
 80063f6:	d00b      	beq.n	8006410 <__pow5mult+0xa0>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	b938      	cbnz	r0, 800640c <__pow5mult+0x9c>
 80063fc:	4622      	mov	r2, r4
 80063fe:	4621      	mov	r1, r4
 8006400:	4638      	mov	r0, r7
 8006402:	f7ff ff0b 	bl	800621c <__multiply>
 8006406:	6020      	str	r0, [r4, #0]
 8006408:	f8c0 9000 	str.w	r9, [r0]
 800640c:	4604      	mov	r4, r0
 800640e:	e7e4      	b.n	80063da <__pow5mult+0x6a>
 8006410:	4630      	mov	r0, r6
 8006412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006416:	bf00      	nop
 8006418:	08007398 	.word	0x08007398
 800641c:	080072bd 	.word	0x080072bd
 8006420:	0800733d 	.word	0x0800733d

08006424 <__lshift>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	460c      	mov	r4, r1
 800642a:	6849      	ldr	r1, [r1, #4]
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	4607      	mov	r7, r0
 8006436:	4691      	mov	r9, r2
 8006438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800643c:	f108 0601 	add.w	r6, r8, #1
 8006440:	42b3      	cmp	r3, r6
 8006442:	db0b      	blt.n	800645c <__lshift+0x38>
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff fddf 	bl	8006008 <_Balloc>
 800644a:	4605      	mov	r5, r0
 800644c:	b948      	cbnz	r0, 8006462 <__lshift+0x3e>
 800644e:	4602      	mov	r2, r0
 8006450:	4b28      	ldr	r3, [pc, #160]	@ (80064f4 <__lshift+0xd0>)
 8006452:	4829      	ldr	r0, [pc, #164]	@ (80064f8 <__lshift+0xd4>)
 8006454:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006458:	f000 fb94 	bl	8006b84 <__assert_func>
 800645c:	3101      	adds	r1, #1
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	e7ee      	b.n	8006440 <__lshift+0x1c>
 8006462:	2300      	movs	r3, #0
 8006464:	f100 0114 	add.w	r1, r0, #20
 8006468:	f100 0210 	add.w	r2, r0, #16
 800646c:	4618      	mov	r0, r3
 800646e:	4553      	cmp	r3, sl
 8006470:	db33      	blt.n	80064da <__lshift+0xb6>
 8006472:	6920      	ldr	r0, [r4, #16]
 8006474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006478:	f104 0314 	add.w	r3, r4, #20
 800647c:	f019 091f 	ands.w	r9, r9, #31
 8006480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006488:	d02b      	beq.n	80064e2 <__lshift+0xbe>
 800648a:	f1c9 0e20 	rsb	lr, r9, #32
 800648e:	468a      	mov	sl, r1
 8006490:	2200      	movs	r2, #0
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	fa00 f009 	lsl.w	r0, r0, r9
 8006498:	4310      	orrs	r0, r2
 800649a:	f84a 0b04 	str.w	r0, [sl], #4
 800649e:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a2:	459c      	cmp	ip, r3
 80064a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80064a8:	d8f3      	bhi.n	8006492 <__lshift+0x6e>
 80064aa:	ebac 0304 	sub.w	r3, ip, r4
 80064ae:	3b15      	subs	r3, #21
 80064b0:	f023 0303 	bic.w	r3, r3, #3
 80064b4:	3304      	adds	r3, #4
 80064b6:	f104 0015 	add.w	r0, r4, #21
 80064ba:	4584      	cmp	ip, r0
 80064bc:	bf38      	it	cc
 80064be:	2304      	movcc	r3, #4
 80064c0:	50ca      	str	r2, [r1, r3]
 80064c2:	b10a      	cbz	r2, 80064c8 <__lshift+0xa4>
 80064c4:	f108 0602 	add.w	r6, r8, #2
 80064c8:	3e01      	subs	r6, #1
 80064ca:	4638      	mov	r0, r7
 80064cc:	612e      	str	r6, [r5, #16]
 80064ce:	4621      	mov	r1, r4
 80064d0:	f7ff fdda 	bl	8006088 <_Bfree>
 80064d4:	4628      	mov	r0, r5
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064da:	f842 0f04 	str.w	r0, [r2, #4]!
 80064de:	3301      	adds	r3, #1
 80064e0:	e7c5      	b.n	800646e <__lshift+0x4a>
 80064e2:	3904      	subs	r1, #4
 80064e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80064ec:	459c      	cmp	ip, r3
 80064ee:	d8f9      	bhi.n	80064e4 <__lshift+0xc0>
 80064f0:	e7ea      	b.n	80064c8 <__lshift+0xa4>
 80064f2:	bf00      	nop
 80064f4:	0800732c 	.word	0x0800732c
 80064f8:	0800733d 	.word	0x0800733d

080064fc <__mcmp>:
 80064fc:	690a      	ldr	r2, [r1, #16]
 80064fe:	4603      	mov	r3, r0
 8006500:	6900      	ldr	r0, [r0, #16]
 8006502:	1a80      	subs	r0, r0, r2
 8006504:	b530      	push	{r4, r5, lr}
 8006506:	d10e      	bne.n	8006526 <__mcmp+0x2a>
 8006508:	3314      	adds	r3, #20
 800650a:	3114      	adds	r1, #20
 800650c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800651c:	4295      	cmp	r5, r2
 800651e:	d003      	beq.n	8006528 <__mcmp+0x2c>
 8006520:	d205      	bcs.n	800652e <__mcmp+0x32>
 8006522:	f04f 30ff 	mov.w	r0, #4294967295
 8006526:	bd30      	pop	{r4, r5, pc}
 8006528:	42a3      	cmp	r3, r4
 800652a:	d3f3      	bcc.n	8006514 <__mcmp+0x18>
 800652c:	e7fb      	b.n	8006526 <__mcmp+0x2a>
 800652e:	2001      	movs	r0, #1
 8006530:	e7f9      	b.n	8006526 <__mcmp+0x2a>
	...

08006534 <__mdiff>:
 8006534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	4689      	mov	r9, r1
 800653a:	4606      	mov	r6, r0
 800653c:	4611      	mov	r1, r2
 800653e:	4648      	mov	r0, r9
 8006540:	4614      	mov	r4, r2
 8006542:	f7ff ffdb 	bl	80064fc <__mcmp>
 8006546:	1e05      	subs	r5, r0, #0
 8006548:	d112      	bne.n	8006570 <__mdiff+0x3c>
 800654a:	4629      	mov	r1, r5
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff fd5b 	bl	8006008 <_Balloc>
 8006552:	4602      	mov	r2, r0
 8006554:	b928      	cbnz	r0, 8006562 <__mdiff+0x2e>
 8006556:	4b3f      	ldr	r3, [pc, #252]	@ (8006654 <__mdiff+0x120>)
 8006558:	f240 2137 	movw	r1, #567	@ 0x237
 800655c:	483e      	ldr	r0, [pc, #248]	@ (8006658 <__mdiff+0x124>)
 800655e:	f000 fb11 	bl	8006b84 <__assert_func>
 8006562:	2301      	movs	r3, #1
 8006564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006568:	4610      	mov	r0, r2
 800656a:	b003      	add	sp, #12
 800656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006570:	bfbc      	itt	lt
 8006572:	464b      	movlt	r3, r9
 8006574:	46a1      	movlt	r9, r4
 8006576:	4630      	mov	r0, r6
 8006578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800657c:	bfba      	itte	lt
 800657e:	461c      	movlt	r4, r3
 8006580:	2501      	movlt	r5, #1
 8006582:	2500      	movge	r5, #0
 8006584:	f7ff fd40 	bl	8006008 <_Balloc>
 8006588:	4602      	mov	r2, r0
 800658a:	b918      	cbnz	r0, 8006594 <__mdiff+0x60>
 800658c:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <__mdiff+0x120>)
 800658e:	f240 2145 	movw	r1, #581	@ 0x245
 8006592:	e7e3      	b.n	800655c <__mdiff+0x28>
 8006594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006598:	6926      	ldr	r6, [r4, #16]
 800659a:	60c5      	str	r5, [r0, #12]
 800659c:	f109 0310 	add.w	r3, r9, #16
 80065a0:	f109 0514 	add.w	r5, r9, #20
 80065a4:	f104 0e14 	add.w	lr, r4, #20
 80065a8:	f100 0b14 	add.w	fp, r0, #20
 80065ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	46d9      	mov	r9, fp
 80065b8:	f04f 0c00 	mov.w	ip, #0
 80065bc:	9b01      	ldr	r3, [sp, #4]
 80065be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	fa1f f38a 	uxth.w	r3, sl
 80065cc:	4619      	mov	r1, r3
 80065ce:	b283      	uxth	r3, r0
 80065d0:	1acb      	subs	r3, r1, r3
 80065d2:	0c00      	lsrs	r0, r0, #16
 80065d4:	4463      	add	r3, ip
 80065d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80065da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80065de:	b29b      	uxth	r3, r3
 80065e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80065e4:	4576      	cmp	r6, lr
 80065e6:	f849 3b04 	str.w	r3, [r9], #4
 80065ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065ee:	d8e5      	bhi.n	80065bc <__mdiff+0x88>
 80065f0:	1b33      	subs	r3, r6, r4
 80065f2:	3b15      	subs	r3, #21
 80065f4:	f023 0303 	bic.w	r3, r3, #3
 80065f8:	3415      	adds	r4, #21
 80065fa:	3304      	adds	r3, #4
 80065fc:	42a6      	cmp	r6, r4
 80065fe:	bf38      	it	cc
 8006600:	2304      	movcc	r3, #4
 8006602:	441d      	add	r5, r3
 8006604:	445b      	add	r3, fp
 8006606:	461e      	mov	r6, r3
 8006608:	462c      	mov	r4, r5
 800660a:	4544      	cmp	r4, r8
 800660c:	d30e      	bcc.n	800662c <__mdiff+0xf8>
 800660e:	f108 0103 	add.w	r1, r8, #3
 8006612:	1b49      	subs	r1, r1, r5
 8006614:	f021 0103 	bic.w	r1, r1, #3
 8006618:	3d03      	subs	r5, #3
 800661a:	45a8      	cmp	r8, r5
 800661c:	bf38      	it	cc
 800661e:	2100      	movcc	r1, #0
 8006620:	440b      	add	r3, r1
 8006622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006626:	b191      	cbz	r1, 800664e <__mdiff+0x11a>
 8006628:	6117      	str	r7, [r2, #16]
 800662a:	e79d      	b.n	8006568 <__mdiff+0x34>
 800662c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006630:	46e6      	mov	lr, ip
 8006632:	0c08      	lsrs	r0, r1, #16
 8006634:	fa1c fc81 	uxtah	ip, ip, r1
 8006638:	4471      	add	r1, lr
 800663a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800663e:	b289      	uxth	r1, r1
 8006640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006644:	f846 1b04 	str.w	r1, [r6], #4
 8006648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800664c:	e7dd      	b.n	800660a <__mdiff+0xd6>
 800664e:	3f01      	subs	r7, #1
 8006650:	e7e7      	b.n	8006622 <__mdiff+0xee>
 8006652:	bf00      	nop
 8006654:	0800732c 	.word	0x0800732c
 8006658:	0800733d 	.word	0x0800733d

0800665c <__d2b>:
 800665c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006660:	460f      	mov	r7, r1
 8006662:	2101      	movs	r1, #1
 8006664:	ec59 8b10 	vmov	r8, r9, d0
 8006668:	4616      	mov	r6, r2
 800666a:	f7ff fccd 	bl	8006008 <_Balloc>
 800666e:	4604      	mov	r4, r0
 8006670:	b930      	cbnz	r0, 8006680 <__d2b+0x24>
 8006672:	4602      	mov	r2, r0
 8006674:	4b23      	ldr	r3, [pc, #140]	@ (8006704 <__d2b+0xa8>)
 8006676:	4824      	ldr	r0, [pc, #144]	@ (8006708 <__d2b+0xac>)
 8006678:	f240 310f 	movw	r1, #783	@ 0x30f
 800667c:	f000 fa82 	bl	8006b84 <__assert_func>
 8006680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006688:	b10d      	cbz	r5, 800668e <__d2b+0x32>
 800668a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	f1b8 0300 	subs.w	r3, r8, #0
 8006694:	d023      	beq.n	80066de <__d2b+0x82>
 8006696:	4668      	mov	r0, sp
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	f7ff fd7c 	bl	8006196 <__lo0bits>
 800669e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066a2:	b1d0      	cbz	r0, 80066da <__d2b+0x7e>
 80066a4:	f1c0 0320 	rsb	r3, r0, #32
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	430b      	orrs	r3, r1
 80066ae:	40c2      	lsrs	r2, r0
 80066b0:	6163      	str	r3, [r4, #20]
 80066b2:	9201      	str	r2, [sp, #4]
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	61a3      	str	r3, [r4, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf0c      	ite	eq
 80066bc:	2201      	moveq	r2, #1
 80066be:	2202      	movne	r2, #2
 80066c0:	6122      	str	r2, [r4, #16]
 80066c2:	b1a5      	cbz	r5, 80066ee <__d2b+0x92>
 80066c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80066c8:	4405      	add	r5, r0
 80066ca:	603d      	str	r5, [r7, #0]
 80066cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80066d0:	6030      	str	r0, [r6, #0]
 80066d2:	4620      	mov	r0, r4
 80066d4:	b003      	add	sp, #12
 80066d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066da:	6161      	str	r1, [r4, #20]
 80066dc:	e7ea      	b.n	80066b4 <__d2b+0x58>
 80066de:	a801      	add	r0, sp, #4
 80066e0:	f7ff fd59 	bl	8006196 <__lo0bits>
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	6163      	str	r3, [r4, #20]
 80066e8:	3020      	adds	r0, #32
 80066ea:	2201      	movs	r2, #1
 80066ec:	e7e8      	b.n	80066c0 <__d2b+0x64>
 80066ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80066f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80066f6:	6038      	str	r0, [r7, #0]
 80066f8:	6918      	ldr	r0, [r3, #16]
 80066fa:	f7ff fd2d 	bl	8006158 <__hi0bits>
 80066fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006702:	e7e5      	b.n	80066d0 <__d2b+0x74>
 8006704:	0800732c 	.word	0x0800732c
 8006708:	0800733d 	.word	0x0800733d

0800670c <__ssputs_r>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	688e      	ldr	r6, [r1, #8]
 8006712:	461f      	mov	r7, r3
 8006714:	42be      	cmp	r6, r7
 8006716:	680b      	ldr	r3, [r1, #0]
 8006718:	4682      	mov	sl, r0
 800671a:	460c      	mov	r4, r1
 800671c:	4690      	mov	r8, r2
 800671e:	d82d      	bhi.n	800677c <__ssputs_r+0x70>
 8006720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006724:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006728:	d026      	beq.n	8006778 <__ssputs_r+0x6c>
 800672a:	6965      	ldr	r5, [r4, #20]
 800672c:	6909      	ldr	r1, [r1, #16]
 800672e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006732:	eba3 0901 	sub.w	r9, r3, r1
 8006736:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800673a:	1c7b      	adds	r3, r7, #1
 800673c:	444b      	add	r3, r9
 800673e:	106d      	asrs	r5, r5, #1
 8006740:	429d      	cmp	r5, r3
 8006742:	bf38      	it	cc
 8006744:	461d      	movcc	r5, r3
 8006746:	0553      	lsls	r3, r2, #21
 8006748:	d527      	bpl.n	800679a <__ssputs_r+0x8e>
 800674a:	4629      	mov	r1, r5
 800674c:	f7ff fbd0 	bl	8005ef0 <_malloc_r>
 8006750:	4606      	mov	r6, r0
 8006752:	b360      	cbz	r0, 80067ae <__ssputs_r+0xa2>
 8006754:	6921      	ldr	r1, [r4, #16]
 8006756:	464a      	mov	r2, r9
 8006758:	f000 fa06 	bl	8006b68 <memcpy>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	6126      	str	r6, [r4, #16]
 800676a:	6165      	str	r5, [r4, #20]
 800676c:	444e      	add	r6, r9
 800676e:	eba5 0509 	sub.w	r5, r5, r9
 8006772:	6026      	str	r6, [r4, #0]
 8006774:	60a5      	str	r5, [r4, #8]
 8006776:	463e      	mov	r6, r7
 8006778:	42be      	cmp	r6, r7
 800677a:	d900      	bls.n	800677e <__ssputs_r+0x72>
 800677c:	463e      	mov	r6, r7
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	4632      	mov	r2, r6
 8006782:	4641      	mov	r1, r8
 8006784:	f000 f9c6 	bl	8006b14 <memmove>
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	1b9b      	subs	r3, r3, r6
 800678c:	60a3      	str	r3, [r4, #8]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	4433      	add	r3, r6
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	2000      	movs	r0, #0
 8006796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679a:	462a      	mov	r2, r5
 800679c:	f000 fa36 	bl	8006c0c <_realloc_r>
 80067a0:	4606      	mov	r6, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d1e0      	bne.n	8006768 <__ssputs_r+0x5c>
 80067a6:	6921      	ldr	r1, [r4, #16]
 80067a8:	4650      	mov	r0, sl
 80067aa:	f7ff fb2d 	bl	8005e08 <_free_r>
 80067ae:	230c      	movs	r3, #12
 80067b0:	f8ca 3000 	str.w	r3, [sl]
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e7e9      	b.n	8006796 <__ssputs_r+0x8a>
	...

080067c4 <_svfiprintf_r>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	4698      	mov	r8, r3
 80067ca:	898b      	ldrh	r3, [r1, #12]
 80067cc:	061b      	lsls	r3, r3, #24
 80067ce:	b09d      	sub	sp, #116	@ 0x74
 80067d0:	4607      	mov	r7, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	4614      	mov	r4, r2
 80067d6:	d510      	bpl.n	80067fa <_svfiprintf_r+0x36>
 80067d8:	690b      	ldr	r3, [r1, #16]
 80067da:	b973      	cbnz	r3, 80067fa <_svfiprintf_r+0x36>
 80067dc:	2140      	movs	r1, #64	@ 0x40
 80067de:	f7ff fb87 	bl	8005ef0 <_malloc_r>
 80067e2:	6028      	str	r0, [r5, #0]
 80067e4:	6128      	str	r0, [r5, #16]
 80067e6:	b930      	cbnz	r0, 80067f6 <_svfiprintf_r+0x32>
 80067e8:	230c      	movs	r3, #12
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	b01d      	add	sp, #116	@ 0x74
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f6:	2340      	movs	r3, #64	@ 0x40
 80067f8:	616b      	str	r3, [r5, #20]
 80067fa:	2300      	movs	r3, #0
 80067fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fe:	2320      	movs	r3, #32
 8006800:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006804:	f8cd 800c 	str.w	r8, [sp, #12]
 8006808:	2330      	movs	r3, #48	@ 0x30
 800680a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069a8 <_svfiprintf_r+0x1e4>
 800680e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006812:	f04f 0901 	mov.w	r9, #1
 8006816:	4623      	mov	r3, r4
 8006818:	469a      	mov	sl, r3
 800681a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800681e:	b10a      	cbz	r2, 8006824 <_svfiprintf_r+0x60>
 8006820:	2a25      	cmp	r2, #37	@ 0x25
 8006822:	d1f9      	bne.n	8006818 <_svfiprintf_r+0x54>
 8006824:	ebba 0b04 	subs.w	fp, sl, r4
 8006828:	d00b      	beq.n	8006842 <_svfiprintf_r+0x7e>
 800682a:	465b      	mov	r3, fp
 800682c:	4622      	mov	r2, r4
 800682e:	4629      	mov	r1, r5
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff ff6b 	bl	800670c <__ssputs_r>
 8006836:	3001      	adds	r0, #1
 8006838:	f000 80a7 	beq.w	800698a <_svfiprintf_r+0x1c6>
 800683c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800683e:	445a      	add	r2, fp
 8006840:	9209      	str	r2, [sp, #36]	@ 0x24
 8006842:	f89a 3000 	ldrb.w	r3, [sl]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 809f 	beq.w	800698a <_svfiprintf_r+0x1c6>
 800684c:	2300      	movs	r3, #0
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006856:	f10a 0a01 	add.w	sl, sl, #1
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006862:	931a      	str	r3, [sp, #104]	@ 0x68
 8006864:	4654      	mov	r4, sl
 8006866:	2205      	movs	r2, #5
 8006868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686c:	484e      	ldr	r0, [pc, #312]	@ (80069a8 <_svfiprintf_r+0x1e4>)
 800686e:	f7f9 fcaf 	bl	80001d0 <memchr>
 8006872:	9a04      	ldr	r2, [sp, #16]
 8006874:	b9d8      	cbnz	r0, 80068ae <_svfiprintf_r+0xea>
 8006876:	06d0      	lsls	r0, r2, #27
 8006878:	bf44      	itt	mi
 800687a:	2320      	movmi	r3, #32
 800687c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006880:	0711      	lsls	r1, r2, #28
 8006882:	bf44      	itt	mi
 8006884:	232b      	movmi	r3, #43	@ 0x2b
 8006886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800688a:	f89a 3000 	ldrb.w	r3, [sl]
 800688e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006890:	d015      	beq.n	80068be <_svfiprintf_r+0xfa>
 8006892:	9a07      	ldr	r2, [sp, #28]
 8006894:	4654      	mov	r4, sl
 8006896:	2000      	movs	r0, #0
 8006898:	f04f 0c0a 	mov.w	ip, #10
 800689c:	4621      	mov	r1, r4
 800689e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a2:	3b30      	subs	r3, #48	@ 0x30
 80068a4:	2b09      	cmp	r3, #9
 80068a6:	d94b      	bls.n	8006940 <_svfiprintf_r+0x17c>
 80068a8:	b1b0      	cbz	r0, 80068d8 <_svfiprintf_r+0x114>
 80068aa:	9207      	str	r2, [sp, #28]
 80068ac:	e014      	b.n	80068d8 <_svfiprintf_r+0x114>
 80068ae:	eba0 0308 	sub.w	r3, r0, r8
 80068b2:	fa09 f303 	lsl.w	r3, r9, r3
 80068b6:	4313      	orrs	r3, r2
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	46a2      	mov	sl, r4
 80068bc:	e7d2      	b.n	8006864 <_svfiprintf_r+0xa0>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	1d19      	adds	r1, r3, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	9103      	str	r1, [sp, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bfbb      	ittet	lt
 80068ca:	425b      	neglt	r3, r3
 80068cc:	f042 0202 	orrlt.w	r2, r2, #2
 80068d0:	9307      	strge	r3, [sp, #28]
 80068d2:	9307      	strlt	r3, [sp, #28]
 80068d4:	bfb8      	it	lt
 80068d6:	9204      	strlt	r2, [sp, #16]
 80068d8:	7823      	ldrb	r3, [r4, #0]
 80068da:	2b2e      	cmp	r3, #46	@ 0x2e
 80068dc:	d10a      	bne.n	80068f4 <_svfiprintf_r+0x130>
 80068de:	7863      	ldrb	r3, [r4, #1]
 80068e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e2:	d132      	bne.n	800694a <_svfiprintf_r+0x186>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	9203      	str	r2, [sp, #12]
 80068ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068f0:	3402      	adds	r4, #2
 80068f2:	9305      	str	r3, [sp, #20]
 80068f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069b8 <_svfiprintf_r+0x1f4>
 80068f8:	7821      	ldrb	r1, [r4, #0]
 80068fa:	2203      	movs	r2, #3
 80068fc:	4650      	mov	r0, sl
 80068fe:	f7f9 fc67 	bl	80001d0 <memchr>
 8006902:	b138      	cbz	r0, 8006914 <_svfiprintf_r+0x150>
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	eba0 000a 	sub.w	r0, r0, sl
 800690a:	2240      	movs	r2, #64	@ 0x40
 800690c:	4082      	lsls	r2, r0
 800690e:	4313      	orrs	r3, r2
 8006910:	3401      	adds	r4, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	4824      	ldr	r0, [pc, #144]	@ (80069ac <_svfiprintf_r+0x1e8>)
 800691a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800691e:	2206      	movs	r2, #6
 8006920:	f7f9 fc56 	bl	80001d0 <memchr>
 8006924:	2800      	cmp	r0, #0
 8006926:	d036      	beq.n	8006996 <_svfiprintf_r+0x1d2>
 8006928:	4b21      	ldr	r3, [pc, #132]	@ (80069b0 <_svfiprintf_r+0x1ec>)
 800692a:	bb1b      	cbnz	r3, 8006974 <_svfiprintf_r+0x1b0>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	3307      	adds	r3, #7
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	3308      	adds	r3, #8
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693a:	4433      	add	r3, r6
 800693c:	9309      	str	r3, [sp, #36]	@ 0x24
 800693e:	e76a      	b.n	8006816 <_svfiprintf_r+0x52>
 8006940:	fb0c 3202 	mla	r2, ip, r2, r3
 8006944:	460c      	mov	r4, r1
 8006946:	2001      	movs	r0, #1
 8006948:	e7a8      	b.n	800689c <_svfiprintf_r+0xd8>
 800694a:	2300      	movs	r3, #0
 800694c:	3401      	adds	r4, #1
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	4620      	mov	r0, r4
 8006958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800695c:	3a30      	subs	r2, #48	@ 0x30
 800695e:	2a09      	cmp	r2, #9
 8006960:	d903      	bls.n	800696a <_svfiprintf_r+0x1a6>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0c6      	beq.n	80068f4 <_svfiprintf_r+0x130>
 8006966:	9105      	str	r1, [sp, #20]
 8006968:	e7c4      	b.n	80068f4 <_svfiprintf_r+0x130>
 800696a:	fb0c 2101 	mla	r1, ip, r1, r2
 800696e:	4604      	mov	r4, r0
 8006970:	2301      	movs	r3, #1
 8006972:	e7f0      	b.n	8006956 <_svfiprintf_r+0x192>
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <_svfiprintf_r+0x1f0>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4638      	mov	r0, r7
 8006980:	f7fd fe98 	bl	80046b4 <_printf_float>
 8006984:	1c42      	adds	r2, r0, #1
 8006986:	4606      	mov	r6, r0
 8006988:	d1d6      	bne.n	8006938 <_svfiprintf_r+0x174>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	065b      	lsls	r3, r3, #25
 800698e:	f53f af2d 	bmi.w	80067ec <_svfiprintf_r+0x28>
 8006992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006994:	e72c      	b.n	80067f0 <_svfiprintf_r+0x2c>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <_svfiprintf_r+0x1f0>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7fe f91f 	bl	8004be4 <_printf_i>
 80069a6:	e7ed      	b.n	8006984 <_svfiprintf_r+0x1c0>
 80069a8:	08007498 	.word	0x08007498
 80069ac:	080074a2 	.word	0x080074a2
 80069b0:	080046b5 	.word	0x080046b5
 80069b4:	0800670d 	.word	0x0800670d
 80069b8:	0800749e 	.word	0x0800749e

080069bc <__sflush_r>:
 80069bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	0716      	lsls	r6, r2, #28
 80069c6:	4605      	mov	r5, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d454      	bmi.n	8006a76 <__sflush_r+0xba>
 80069cc:	684b      	ldr	r3, [r1, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc02      	bgt.n	80069d8 <__sflush_r+0x1c>
 80069d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dd48      	ble.n	8006a6a <__sflush_r+0xae>
 80069d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d045      	beq.n	8006a6a <__sflush_r+0xae>
 80069de:	2300      	movs	r3, #0
 80069e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069e4:	682f      	ldr	r7, [r5, #0]
 80069e6:	6a21      	ldr	r1, [r4, #32]
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	d030      	beq.n	8006a4e <__sflush_r+0x92>
 80069ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	0759      	lsls	r1, r3, #29
 80069f2:	d505      	bpl.n	8006a00 <__sflush_r+0x44>
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069fa:	b10b      	cbz	r3, 8006a00 <__sflush_r+0x44>
 80069fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a04:	6a21      	ldr	r1, [r4, #32]
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b0      	blx	r6
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	d106      	bne.n	8006a1e <__sflush_r+0x62>
 8006a10:	6829      	ldr	r1, [r5, #0]
 8006a12:	291d      	cmp	r1, #29
 8006a14:	d82b      	bhi.n	8006a6e <__sflush_r+0xb2>
 8006a16:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <__sflush_r+0x104>)
 8006a18:	410a      	asrs	r2, r1
 8006a1a:	07d6      	lsls	r6, r2, #31
 8006a1c:	d427      	bmi.n	8006a6e <__sflush_r+0xb2>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	6062      	str	r2, [r4, #4]
 8006a22:	04d9      	lsls	r1, r3, #19
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	d504      	bpl.n	8006a34 <__sflush_r+0x78>
 8006a2a:	1c42      	adds	r2, r0, #1
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0x76>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b903      	cbnz	r3, 8006a34 <__sflush_r+0x78>
 8006a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	b1b9      	cbz	r1, 8006a6a <__sflush_r+0xae>
 8006a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	d002      	beq.n	8006a48 <__sflush_r+0x8c>
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7ff f9e0 	bl	8005e08 <_free_r>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a4c:	e00d      	b.n	8006a6a <__sflush_r+0xae>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b0      	blx	r6
 8006a54:	4602      	mov	r2, r0
 8006a56:	1c50      	adds	r0, r2, #1
 8006a58:	d1c9      	bne.n	80069ee <__sflush_r+0x32>
 8006a5a:	682b      	ldr	r3, [r5, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0c6      	beq.n	80069ee <__sflush_r+0x32>
 8006a60:	2b1d      	cmp	r3, #29
 8006a62:	d001      	beq.n	8006a68 <__sflush_r+0xac>
 8006a64:	2b16      	cmp	r3, #22
 8006a66:	d11e      	bne.n	8006aa6 <__sflush_r+0xea>
 8006a68:	602f      	str	r7, [r5, #0]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e022      	b.n	8006ab4 <__sflush_r+0xf8>
 8006a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a72:	b21b      	sxth	r3, r3
 8006a74:	e01b      	b.n	8006aae <__sflush_r+0xf2>
 8006a76:	690f      	ldr	r7, [r1, #16]
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	d0f6      	beq.n	8006a6a <__sflush_r+0xae>
 8006a7c:	0793      	lsls	r3, r2, #30
 8006a7e:	680e      	ldr	r6, [r1, #0]
 8006a80:	bf08      	it	eq
 8006a82:	694b      	ldreq	r3, [r1, #20]
 8006a84:	600f      	str	r7, [r1, #0]
 8006a86:	bf18      	it	ne
 8006a88:	2300      	movne	r3, #0
 8006a8a:	eba6 0807 	sub.w	r8, r6, r7
 8006a8e:	608b      	str	r3, [r1, #8]
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	dde9      	ble.n	8006a6a <__sflush_r+0xae>
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a9a:	4643      	mov	r3, r8
 8006a9c:	463a      	mov	r2, r7
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b0      	blx	r6
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	dc08      	bgt.n	8006ab8 <__sflush_r+0xfc>
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	4407      	add	r7, r0
 8006aba:	eba8 0800 	sub.w	r8, r8, r0
 8006abe:	e7e7      	b.n	8006a90 <__sflush_r+0xd4>
 8006ac0:	dfbffffe 	.word	0xdfbffffe

08006ac4 <_fflush_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b913      	cbnz	r3, 8006ad4 <_fflush_r+0x10>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	b118      	cbz	r0, 8006ade <_fflush_r+0x1a>
 8006ad6:	6a03      	ldr	r3, [r0, #32]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_fflush_r+0x1a>
 8006ada:	f7fe fa2f 	bl	8004f3c <__sinit>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f3      	beq.n	8006ace <_fflush_r+0xa>
 8006ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ae8:	07d0      	lsls	r0, r2, #31
 8006aea:	d404      	bmi.n	8006af6 <_fflush_r+0x32>
 8006aec:	0599      	lsls	r1, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_fflush_r+0x32>
 8006af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006af2:	f7fe fb3a 	bl	800516a <__retarget_lock_acquire_recursive>
 8006af6:	4628      	mov	r0, r5
 8006af8:	4621      	mov	r1, r4
 8006afa:	f7ff ff5f 	bl	80069bc <__sflush_r>
 8006afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b00:	07da      	lsls	r2, r3, #31
 8006b02:	4605      	mov	r5, r0
 8006b04:	d4e4      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	059b      	lsls	r3, r3, #22
 8006b0a:	d4e1      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0e:	f7fe fb2d 	bl	800516c <__retarget_lock_release_recursive>
 8006b12:	e7dd      	b.n	8006ad0 <_fflush_r+0xc>

08006b14 <memmove>:
 8006b14:	4288      	cmp	r0, r1
 8006b16:	b510      	push	{r4, lr}
 8006b18:	eb01 0402 	add.w	r4, r1, r2
 8006b1c:	d902      	bls.n	8006b24 <memmove+0x10>
 8006b1e:	4284      	cmp	r4, r0
 8006b20:	4623      	mov	r3, r4
 8006b22:	d807      	bhi.n	8006b34 <memmove+0x20>
 8006b24:	1e43      	subs	r3, r0, #1
 8006b26:	42a1      	cmp	r1, r4
 8006b28:	d008      	beq.n	8006b3c <memmove+0x28>
 8006b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b32:	e7f8      	b.n	8006b26 <memmove+0x12>
 8006b34:	4402      	add	r2, r0
 8006b36:	4601      	mov	r1, r0
 8006b38:	428a      	cmp	r2, r1
 8006b3a:	d100      	bne.n	8006b3e <memmove+0x2a>
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b46:	e7f7      	b.n	8006b38 <memmove+0x24>

08006b48 <_sbrk_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_sbrk_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa fb56 	bl	8001204 <_sbrk>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_sbrk_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_sbrk_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000488 	.word	0x20000488

08006b68 <memcpy>:
 8006b68:	440a      	add	r2, r1
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b70:	d100      	bne.n	8006b74 <memcpy+0xc>
 8006b72:	4770      	bx	lr
 8006b74:	b510      	push	{r4, lr}
 8006b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b7e:	4291      	cmp	r1, r2
 8006b80:	d1f9      	bne.n	8006b76 <memcpy+0xe>
 8006b82:	bd10      	pop	{r4, pc}

08006b84 <__assert_func>:
 8006b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b86:	4614      	mov	r4, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <__assert_func+0x2c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4605      	mov	r5, r0
 8006b90:	68d8      	ldr	r0, [r3, #12]
 8006b92:	b954      	cbnz	r4, 8006baa <__assert_func+0x26>
 8006b94:	4b07      	ldr	r3, [pc, #28]	@ (8006bb4 <__assert_func+0x30>)
 8006b96:	461c      	mov	r4, r3
 8006b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b9c:	9100      	str	r1, [sp, #0]
 8006b9e:	462b      	mov	r3, r5
 8006ba0:	4905      	ldr	r1, [pc, #20]	@ (8006bb8 <__assert_func+0x34>)
 8006ba2:	f000 f86f 	bl	8006c84 <fiprintf>
 8006ba6:	f000 f87f 	bl	8006ca8 <abort>
 8006baa:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <__assert_func+0x38>)
 8006bac:	e7f4      	b.n	8006b98 <__assert_func+0x14>
 8006bae:	bf00      	nop
 8006bb0:	2000001c 	.word	0x2000001c
 8006bb4:	080074ee 	.word	0x080074ee
 8006bb8:	080074c0 	.word	0x080074c0
 8006bbc:	080074b3 	.word	0x080074b3

08006bc0 <_calloc_r>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8006bc6:	b93c      	cbnz	r4, 8006bd8 <_calloc_r+0x18>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7ff f991 	bl	8005ef0 <_malloc_r>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	b928      	cbnz	r0, 8006bde <_calloc_r+0x1e>
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	220c      	movs	r2, #12
 8006bda:	6002      	str	r2, [r0, #0]
 8006bdc:	e7f9      	b.n	8006bd2 <_calloc_r+0x12>
 8006bde:	462a      	mov	r2, r5
 8006be0:	4621      	mov	r1, r4
 8006be2:	f7fe fa44 	bl	800506e <memset>
 8006be6:	e7f5      	b.n	8006bd4 <_calloc_r+0x14>

08006be8 <__ascii_mbtowc>:
 8006be8:	b082      	sub	sp, #8
 8006bea:	b901      	cbnz	r1, 8006bee <__ascii_mbtowc+0x6>
 8006bec:	a901      	add	r1, sp, #4
 8006bee:	b142      	cbz	r2, 8006c02 <__ascii_mbtowc+0x1a>
 8006bf0:	b14b      	cbz	r3, 8006c06 <__ascii_mbtowc+0x1e>
 8006bf2:	7813      	ldrb	r3, [r2, #0]
 8006bf4:	600b      	str	r3, [r1, #0]
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	1e10      	subs	r0, r2, #0
 8006bfa:	bf18      	it	ne
 8006bfc:	2001      	movne	r0, #1
 8006bfe:	b002      	add	sp, #8
 8006c00:	4770      	bx	lr
 8006c02:	4610      	mov	r0, r2
 8006c04:	e7fb      	b.n	8006bfe <__ascii_mbtowc+0x16>
 8006c06:	f06f 0001 	mvn.w	r0, #1
 8006c0a:	e7f8      	b.n	8006bfe <__ascii_mbtowc+0x16>

08006c0c <_realloc_r>:
 8006c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	4680      	mov	r8, r0
 8006c12:	4615      	mov	r5, r2
 8006c14:	460c      	mov	r4, r1
 8006c16:	b921      	cbnz	r1, 8006c22 <_realloc_r+0x16>
 8006c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	f7ff b967 	b.w	8005ef0 <_malloc_r>
 8006c22:	b92a      	cbnz	r2, 8006c30 <_realloc_r+0x24>
 8006c24:	f7ff f8f0 	bl	8005e08 <_free_r>
 8006c28:	2400      	movs	r4, #0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c30:	f000 f841 	bl	8006cb6 <_malloc_usable_size_r>
 8006c34:	4285      	cmp	r5, r0
 8006c36:	4606      	mov	r6, r0
 8006c38:	d802      	bhi.n	8006c40 <_realloc_r+0x34>
 8006c3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c3e:	d8f4      	bhi.n	8006c2a <_realloc_r+0x1e>
 8006c40:	4629      	mov	r1, r5
 8006c42:	4640      	mov	r0, r8
 8006c44:	f7ff f954 	bl	8005ef0 <_malloc_r>
 8006c48:	4607      	mov	r7, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0ec      	beq.n	8006c28 <_realloc_r+0x1c>
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	462a      	mov	r2, r5
 8006c52:	4621      	mov	r1, r4
 8006c54:	bf28      	it	cs
 8006c56:	4632      	movcs	r2, r6
 8006c58:	f7ff ff86 	bl	8006b68 <memcpy>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff f8d2 	bl	8005e08 <_free_r>
 8006c64:	463c      	mov	r4, r7
 8006c66:	e7e0      	b.n	8006c2a <_realloc_r+0x1e>

08006c68 <__ascii_wctomb>:
 8006c68:	4603      	mov	r3, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	b141      	cbz	r1, 8006c80 <__ascii_wctomb+0x18>
 8006c6e:	2aff      	cmp	r2, #255	@ 0xff
 8006c70:	d904      	bls.n	8006c7c <__ascii_wctomb+0x14>
 8006c72:	228a      	movs	r2, #138	@ 0x8a
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	4770      	bx	lr
 8006c7c:	700a      	strb	r2, [r1, #0]
 8006c7e:	2001      	movs	r0, #1
 8006c80:	4770      	bx	lr
	...

08006c84 <fiprintf>:
 8006c84:	b40e      	push	{r1, r2, r3}
 8006c86:	b503      	push	{r0, r1, lr}
 8006c88:	4601      	mov	r1, r0
 8006c8a:	ab03      	add	r3, sp, #12
 8006c8c:	4805      	ldr	r0, [pc, #20]	@ (8006ca4 <fiprintf+0x20>)
 8006c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	f000 f83f 	bl	8006d18 <_vfiprintf_r>
 8006c9a:	b002      	add	sp, #8
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	b003      	add	sp, #12
 8006ca2:	4770      	bx	lr
 8006ca4:	2000001c 	.word	0x2000001c

08006ca8 <abort>:
 8006ca8:	b508      	push	{r3, lr}
 8006caa:	2006      	movs	r0, #6
 8006cac:	f000 fa08 	bl	80070c0 <raise>
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f7fa fa2f 	bl	8001114 <_exit>

08006cb6 <_malloc_usable_size_r>:
 8006cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cba:	1f18      	subs	r0, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfbc      	itt	lt
 8006cc0:	580b      	ldrlt	r3, [r1, r0]
 8006cc2:	18c0      	addlt	r0, r0, r3
 8006cc4:	4770      	bx	lr

08006cc6 <__sfputc_r>:
 8006cc6:	6893      	ldr	r3, [r2, #8]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	b410      	push	{r4}
 8006cce:	6093      	str	r3, [r2, #8]
 8006cd0:	da08      	bge.n	8006ce4 <__sfputc_r+0x1e>
 8006cd2:	6994      	ldr	r4, [r2, #24]
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	db01      	blt.n	8006cdc <__sfputc_r+0x16>
 8006cd8:	290a      	cmp	r1, #10
 8006cda:	d103      	bne.n	8006ce4 <__sfputc_r+0x1e>
 8006cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce0:	f000 b932 	b.w	8006f48 <__swbuf_r>
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	1c58      	adds	r0, r3, #1
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	4608      	mov	r0, r1
 8006cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <__sfputs_r>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	4614      	mov	r4, r2
 8006cfc:	18d5      	adds	r5, r2, r3
 8006cfe:	42ac      	cmp	r4, r5
 8006d00:	d101      	bne.n	8006d06 <__sfputs_r+0x12>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e007      	b.n	8006d16 <__sfputs_r+0x22>
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff ffda 	bl	8006cc6 <__sfputc_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d1f3      	bne.n	8006cfe <__sfputs_r+0xa>
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d18 <_vfiprintf_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	b09d      	sub	sp, #116	@ 0x74
 8006d20:	4614      	mov	r4, r2
 8006d22:	4698      	mov	r8, r3
 8006d24:	4606      	mov	r6, r0
 8006d26:	b118      	cbz	r0, 8006d30 <_vfiprintf_r+0x18>
 8006d28:	6a03      	ldr	r3, [r0, #32]
 8006d2a:	b90b      	cbnz	r3, 8006d30 <_vfiprintf_r+0x18>
 8006d2c:	f7fe f906 	bl	8004f3c <__sinit>
 8006d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d32:	07d9      	lsls	r1, r3, #31
 8006d34:	d405      	bmi.n	8006d42 <_vfiprintf_r+0x2a>
 8006d36:	89ab      	ldrh	r3, [r5, #12]
 8006d38:	059a      	lsls	r2, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_vfiprintf_r+0x2a>
 8006d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d3e:	f7fe fa14 	bl	800516a <__retarget_lock_acquire_recursive>
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	071b      	lsls	r3, r3, #28
 8006d46:	d501      	bpl.n	8006d4c <_vfiprintf_r+0x34>
 8006d48:	692b      	ldr	r3, [r5, #16]
 8006d4a:	b99b      	cbnz	r3, 8006d74 <_vfiprintf_r+0x5c>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f000 f938 	bl	8006fc4 <__swsetup_r>
 8006d54:	b170      	cbz	r0, 8006d74 <_vfiprintf_r+0x5c>
 8006d56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d58:	07dc      	lsls	r4, r3, #31
 8006d5a:	d504      	bpl.n	8006d66 <_vfiprintf_r+0x4e>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b01d      	add	sp, #116	@ 0x74
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	0598      	lsls	r0, r3, #22
 8006d6a:	d4f7      	bmi.n	8006d5c <_vfiprintf_r+0x44>
 8006d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d6e:	f7fe f9fd 	bl	800516c <__retarget_lock_release_recursive>
 8006d72:	e7f3      	b.n	8006d5c <_vfiprintf_r+0x44>
 8006d74:	2300      	movs	r3, #0
 8006d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d82:	2330      	movs	r3, #48	@ 0x30
 8006d84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f34 <_vfiprintf_r+0x21c>
 8006d88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d8c:	f04f 0901 	mov.w	r9, #1
 8006d90:	4623      	mov	r3, r4
 8006d92:	469a      	mov	sl, r3
 8006d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d98:	b10a      	cbz	r2, 8006d9e <_vfiprintf_r+0x86>
 8006d9a:	2a25      	cmp	r2, #37	@ 0x25
 8006d9c:	d1f9      	bne.n	8006d92 <_vfiprintf_r+0x7a>
 8006d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8006da2:	d00b      	beq.n	8006dbc <_vfiprintf_r+0xa4>
 8006da4:	465b      	mov	r3, fp
 8006da6:	4622      	mov	r2, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff ffa2 	bl	8006cf4 <__sfputs_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	f000 80a7 	beq.w	8006f04 <_vfiprintf_r+0x1ec>
 8006db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006db8:	445a      	add	r2, fp
 8006dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 809f 	beq.w	8006f04 <_vfiprintf_r+0x1ec>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd0:	f10a 0a01 	add.w	sl, sl, #1
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	9307      	str	r3, [sp, #28]
 8006dd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ddc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dde:	4654      	mov	r4, sl
 8006de0:	2205      	movs	r2, #5
 8006de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de6:	4853      	ldr	r0, [pc, #332]	@ (8006f34 <_vfiprintf_r+0x21c>)
 8006de8:	f7f9 f9f2 	bl	80001d0 <memchr>
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	b9d8      	cbnz	r0, 8006e28 <_vfiprintf_r+0x110>
 8006df0:	06d1      	lsls	r1, r2, #27
 8006df2:	bf44      	itt	mi
 8006df4:	2320      	movmi	r3, #32
 8006df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dfa:	0713      	lsls	r3, r2, #28
 8006dfc:	bf44      	itt	mi
 8006dfe:	232b      	movmi	r3, #43	@ 0x2b
 8006e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e04:	f89a 3000 	ldrb.w	r3, [sl]
 8006e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0a:	d015      	beq.n	8006e38 <_vfiprintf_r+0x120>
 8006e0c:	9a07      	ldr	r2, [sp, #28]
 8006e0e:	4654      	mov	r4, sl
 8006e10:	2000      	movs	r0, #0
 8006e12:	f04f 0c0a 	mov.w	ip, #10
 8006e16:	4621      	mov	r1, r4
 8006e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1c:	3b30      	subs	r3, #48	@ 0x30
 8006e1e:	2b09      	cmp	r3, #9
 8006e20:	d94b      	bls.n	8006eba <_vfiprintf_r+0x1a2>
 8006e22:	b1b0      	cbz	r0, 8006e52 <_vfiprintf_r+0x13a>
 8006e24:	9207      	str	r2, [sp, #28]
 8006e26:	e014      	b.n	8006e52 <_vfiprintf_r+0x13a>
 8006e28:	eba0 0308 	sub.w	r3, r0, r8
 8006e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e30:	4313      	orrs	r3, r2
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	46a2      	mov	sl, r4
 8006e36:	e7d2      	b.n	8006dde <_vfiprintf_r+0xc6>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	1d19      	adds	r1, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9103      	str	r1, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfbb      	ittet	lt
 8006e44:	425b      	neglt	r3, r3
 8006e46:	f042 0202 	orrlt.w	r2, r2, #2
 8006e4a:	9307      	strge	r3, [sp, #28]
 8006e4c:	9307      	strlt	r3, [sp, #28]
 8006e4e:	bfb8      	it	lt
 8006e50:	9204      	strlt	r2, [sp, #16]
 8006e52:	7823      	ldrb	r3, [r4, #0]
 8006e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e56:	d10a      	bne.n	8006e6e <_vfiprintf_r+0x156>
 8006e58:	7863      	ldrb	r3, [r4, #1]
 8006e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e5c:	d132      	bne.n	8006ec4 <_vfiprintf_r+0x1ac>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	1d1a      	adds	r2, r3, #4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	9203      	str	r2, [sp, #12]
 8006e66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e6a:	3402      	adds	r4, #2
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f44 <_vfiprintf_r+0x22c>
 8006e72:	7821      	ldrb	r1, [r4, #0]
 8006e74:	2203      	movs	r2, #3
 8006e76:	4650      	mov	r0, sl
 8006e78:	f7f9 f9aa 	bl	80001d0 <memchr>
 8006e7c:	b138      	cbz	r0, 8006e8e <_vfiprintf_r+0x176>
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	eba0 000a 	sub.w	r0, r0, sl
 8006e84:	2240      	movs	r2, #64	@ 0x40
 8006e86:	4082      	lsls	r2, r0
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	3401      	adds	r4, #1
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e92:	4829      	ldr	r0, [pc, #164]	@ (8006f38 <_vfiprintf_r+0x220>)
 8006e94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e98:	2206      	movs	r2, #6
 8006e9a:	f7f9 f999 	bl	80001d0 <memchr>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d03f      	beq.n	8006f22 <_vfiprintf_r+0x20a>
 8006ea2:	4b26      	ldr	r3, [pc, #152]	@ (8006f3c <_vfiprintf_r+0x224>)
 8006ea4:	bb1b      	cbnz	r3, 8006eee <_vfiprintf_r+0x1d6>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	3307      	adds	r3, #7
 8006eaa:	f023 0307 	bic.w	r3, r3, #7
 8006eae:	3308      	adds	r3, #8
 8006eb0:	9303      	str	r3, [sp, #12]
 8006eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb4:	443b      	add	r3, r7
 8006eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb8:	e76a      	b.n	8006d90 <_vfiprintf_r+0x78>
 8006eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	e7a8      	b.n	8006e16 <_vfiprintf_r+0xfe>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	3401      	adds	r4, #1
 8006ec8:	9305      	str	r3, [sp, #20]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f04f 0c0a 	mov.w	ip, #10
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed6:	3a30      	subs	r2, #48	@ 0x30
 8006ed8:	2a09      	cmp	r2, #9
 8006eda:	d903      	bls.n	8006ee4 <_vfiprintf_r+0x1cc>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0c6      	beq.n	8006e6e <_vfiprintf_r+0x156>
 8006ee0:	9105      	str	r1, [sp, #20]
 8006ee2:	e7c4      	b.n	8006e6e <_vfiprintf_r+0x156>
 8006ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee8:	4604      	mov	r4, r0
 8006eea:	2301      	movs	r3, #1
 8006eec:	e7f0      	b.n	8006ed0 <_vfiprintf_r+0x1b8>
 8006eee:	ab03      	add	r3, sp, #12
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <_vfiprintf_r+0x228>)
 8006ef6:	a904      	add	r1, sp, #16
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7fd fbdb 	bl	80046b4 <_printf_float>
 8006efe:	4607      	mov	r7, r0
 8006f00:	1c78      	adds	r0, r7, #1
 8006f02:	d1d6      	bne.n	8006eb2 <_vfiprintf_r+0x19a>
 8006f04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f06:	07d9      	lsls	r1, r3, #31
 8006f08:	d405      	bmi.n	8006f16 <_vfiprintf_r+0x1fe>
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	059a      	lsls	r2, r3, #22
 8006f0e:	d402      	bmi.n	8006f16 <_vfiprintf_r+0x1fe>
 8006f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f12:	f7fe f92b 	bl	800516c <__retarget_lock_release_recursive>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	065b      	lsls	r3, r3, #25
 8006f1a:	f53f af1f 	bmi.w	8006d5c <_vfiprintf_r+0x44>
 8006f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f20:	e71e      	b.n	8006d60 <_vfiprintf_r+0x48>
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	462a      	mov	r2, r5
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <_vfiprintf_r+0x228>)
 8006f2a:	a904      	add	r1, sp, #16
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7fd fe59 	bl	8004be4 <_printf_i>
 8006f32:	e7e4      	b.n	8006efe <_vfiprintf_r+0x1e6>
 8006f34:	08007498 	.word	0x08007498
 8006f38:	080074a2 	.word	0x080074a2
 8006f3c:	080046b5 	.word	0x080046b5
 8006f40:	08006cf5 	.word	0x08006cf5
 8006f44:	0800749e 	.word	0x0800749e

08006f48 <__swbuf_r>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4605      	mov	r5, r0
 8006f50:	b118      	cbz	r0, 8006f5a <__swbuf_r+0x12>
 8006f52:	6a03      	ldr	r3, [r0, #32]
 8006f54:	b90b      	cbnz	r3, 8006f5a <__swbuf_r+0x12>
 8006f56:	f7fd fff1 	bl	8004f3c <__sinit>
 8006f5a:	69a3      	ldr	r3, [r4, #24]
 8006f5c:	60a3      	str	r3, [r4, #8]
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	071a      	lsls	r2, r3, #28
 8006f62:	d501      	bpl.n	8006f68 <__swbuf_r+0x20>
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b943      	cbnz	r3, 8006f7a <__swbuf_r+0x32>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f82a 	bl	8006fc4 <__swsetup_r>
 8006f70:	b118      	cbz	r0, 8006f7a <__swbuf_r+0x32>
 8006f72:	f04f 37ff 	mov.w	r7, #4294967295
 8006f76:	4638      	mov	r0, r7
 8006f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	1a98      	subs	r0, r3, r2
 8006f80:	6963      	ldr	r3, [r4, #20]
 8006f82:	b2f6      	uxtb	r6, r6
 8006f84:	4283      	cmp	r3, r0
 8006f86:	4637      	mov	r7, r6
 8006f88:	dc05      	bgt.n	8006f96 <__swbuf_r+0x4e>
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff fd99 	bl	8006ac4 <_fflush_r>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1ed      	bne.n	8006f72 <__swbuf_r+0x2a>
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	60a3      	str	r3, [r4, #8]
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	6022      	str	r2, [r4, #0]
 8006fa2:	701e      	strb	r6, [r3, #0]
 8006fa4:	6962      	ldr	r2, [r4, #20]
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d004      	beq.n	8006fb6 <__swbuf_r+0x6e>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	07db      	lsls	r3, r3, #31
 8006fb0:	d5e1      	bpl.n	8006f76 <__swbuf_r+0x2e>
 8006fb2:	2e0a      	cmp	r6, #10
 8006fb4:	d1df      	bne.n	8006f76 <__swbuf_r+0x2e>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f7ff fd83 	bl	8006ac4 <_fflush_r>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d0d9      	beq.n	8006f76 <__swbuf_r+0x2e>
 8006fc2:	e7d6      	b.n	8006f72 <__swbuf_r+0x2a>

08006fc4 <__swsetup_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4b29      	ldr	r3, [pc, #164]	@ (800706c <__swsetup_r+0xa8>)
 8006fc8:	4605      	mov	r5, r0
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	460c      	mov	r4, r1
 8006fce:	b118      	cbz	r0, 8006fd8 <__swsetup_r+0x14>
 8006fd0:	6a03      	ldr	r3, [r0, #32]
 8006fd2:	b90b      	cbnz	r3, 8006fd8 <__swsetup_r+0x14>
 8006fd4:	f7fd ffb2 	bl	8004f3c <__sinit>
 8006fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	d422      	bmi.n	8007026 <__swsetup_r+0x62>
 8006fe0:	06da      	lsls	r2, r3, #27
 8006fe2:	d407      	bmi.n	8006ff4 <__swsetup_r+0x30>
 8006fe4:	2209      	movs	r2, #9
 8006fe6:	602a      	str	r2, [r5, #0]
 8006fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	e033      	b.n	800705c <__swsetup_r+0x98>
 8006ff4:	0758      	lsls	r0, r3, #29
 8006ff6:	d512      	bpl.n	800701e <__swsetup_r+0x5a>
 8006ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ffa:	b141      	cbz	r1, 800700e <__swsetup_r+0x4a>
 8006ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007000:	4299      	cmp	r1, r3
 8007002:	d002      	beq.n	800700a <__swsetup_r+0x46>
 8007004:	4628      	mov	r0, r5
 8007006:	f7fe feff 	bl	8005e08 <_free_r>
 800700a:	2300      	movs	r3, #0
 800700c:	6363      	str	r3, [r4, #52]	@ 0x34
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	2300      	movs	r3, #0
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	f043 0308 	orr.w	r3, r3, #8
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	b94b      	cbnz	r3, 800703e <__swsetup_r+0x7a>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007034:	d003      	beq.n	800703e <__swsetup_r+0x7a>
 8007036:	4621      	mov	r1, r4
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f883 	bl	8007144 <__smakebuf_r>
 800703e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007042:	f013 0201 	ands.w	r2, r3, #1
 8007046:	d00a      	beq.n	800705e <__swsetup_r+0x9a>
 8007048:	2200      	movs	r2, #0
 800704a:	60a2      	str	r2, [r4, #8]
 800704c:	6962      	ldr	r2, [r4, #20]
 800704e:	4252      	negs	r2, r2
 8007050:	61a2      	str	r2, [r4, #24]
 8007052:	6922      	ldr	r2, [r4, #16]
 8007054:	b942      	cbnz	r2, 8007068 <__swsetup_r+0xa4>
 8007056:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800705a:	d1c5      	bne.n	8006fe8 <__swsetup_r+0x24>
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	0799      	lsls	r1, r3, #30
 8007060:	bf58      	it	pl
 8007062:	6962      	ldrpl	r2, [r4, #20]
 8007064:	60a2      	str	r2, [r4, #8]
 8007066:	e7f4      	b.n	8007052 <__swsetup_r+0x8e>
 8007068:	2000      	movs	r0, #0
 800706a:	e7f7      	b.n	800705c <__swsetup_r+0x98>
 800706c:	2000001c 	.word	0x2000001c

08007070 <_raise_r>:
 8007070:	291f      	cmp	r1, #31
 8007072:	b538      	push	{r3, r4, r5, lr}
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	d904      	bls.n	8007084 <_raise_r+0x14>
 800707a:	2316      	movs	r3, #22
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	f04f 30ff 	mov.w	r0, #4294967295
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007086:	b112      	cbz	r2, 800708e <_raise_r+0x1e>
 8007088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800708c:	b94b      	cbnz	r3, 80070a2 <_raise_r+0x32>
 800708e:	4628      	mov	r0, r5
 8007090:	f000 f830 	bl	80070f4 <_getpid_r>
 8007094:	4622      	mov	r2, r4
 8007096:	4601      	mov	r1, r0
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800709e:	f000 b817 	b.w	80070d0 <_kill_r>
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d00a      	beq.n	80070bc <_raise_r+0x4c>
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	d103      	bne.n	80070b2 <_raise_r+0x42>
 80070aa:	2316      	movs	r3, #22
 80070ac:	6003      	str	r3, [r0, #0]
 80070ae:	2001      	movs	r0, #1
 80070b0:	e7e7      	b.n	8007082 <_raise_r+0x12>
 80070b2:	2100      	movs	r1, #0
 80070b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070b8:	4620      	mov	r0, r4
 80070ba:	4798      	blx	r3
 80070bc:	2000      	movs	r0, #0
 80070be:	e7e0      	b.n	8007082 <_raise_r+0x12>

080070c0 <raise>:
 80070c0:	4b02      	ldr	r3, [pc, #8]	@ (80070cc <raise+0xc>)
 80070c2:	4601      	mov	r1, r0
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	f7ff bfd3 	b.w	8007070 <_raise_r>
 80070ca:	bf00      	nop
 80070cc:	2000001c 	.word	0x2000001c

080070d0 <_kill_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	@ (80070f0 <_kill_r+0x20>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	f7fa f809 	bl	80010f4 <_kill>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d102      	bne.n	80070ec <_kill_r+0x1c>
 80070e6:	682b      	ldr	r3, [r5, #0]
 80070e8:	b103      	cbz	r3, 80070ec <_kill_r+0x1c>
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	20000488 	.word	0x20000488

080070f4 <_getpid_r>:
 80070f4:	f7f9 bff6 	b.w	80010e4 <_getpid>

080070f8 <__swhatbuf_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	460c      	mov	r4, r1
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	2900      	cmp	r1, #0
 8007102:	b096      	sub	sp, #88	@ 0x58
 8007104:	4615      	mov	r5, r2
 8007106:	461e      	mov	r6, r3
 8007108:	da0d      	bge.n	8007126 <__swhatbuf_r+0x2e>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007110:	f04f 0100 	mov.w	r1, #0
 8007114:	bf14      	ite	ne
 8007116:	2340      	movne	r3, #64	@ 0x40
 8007118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800711c:	2000      	movs	r0, #0
 800711e:	6031      	str	r1, [r6, #0]
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	b016      	add	sp, #88	@ 0x58
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	466a      	mov	r2, sp
 8007128:	f000 f848 	bl	80071bc <_fstat_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	dbec      	blt.n	800710a <__swhatbuf_r+0x12>
 8007130:	9901      	ldr	r1, [sp, #4]
 8007132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800713a:	4259      	negs	r1, r3
 800713c:	4159      	adcs	r1, r3
 800713e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007142:	e7eb      	b.n	800711c <__swhatbuf_r+0x24>

08007144 <__smakebuf_r>:
 8007144:	898b      	ldrh	r3, [r1, #12]
 8007146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007148:	079d      	lsls	r5, r3, #30
 800714a:	4606      	mov	r6, r0
 800714c:	460c      	mov	r4, r1
 800714e:	d507      	bpl.n	8007160 <__smakebuf_r+0x1c>
 8007150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	2301      	movs	r3, #1
 800715a:	6163      	str	r3, [r4, #20]
 800715c:	b003      	add	sp, #12
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007160:	ab01      	add	r3, sp, #4
 8007162:	466a      	mov	r2, sp
 8007164:	f7ff ffc8 	bl	80070f8 <__swhatbuf_r>
 8007168:	9f00      	ldr	r7, [sp, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	f7fe febe 	bl	8005ef0 <_malloc_r>
 8007174:	b948      	cbnz	r0, 800718a <__smakebuf_r+0x46>
 8007176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717a:	059a      	lsls	r2, r3, #22
 800717c:	d4ee      	bmi.n	800715c <__smakebuf_r+0x18>
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	f043 0302 	orr.w	r3, r3, #2
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	e7e2      	b.n	8007150 <__smakebuf_r+0xc>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	6020      	str	r0, [r4, #0]
 800718e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800719a:	b15b      	cbz	r3, 80071b4 <__smakebuf_r+0x70>
 800719c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f81d 	bl	80071e0 <_isatty_r>
 80071a6:	b128      	cbz	r0, 80071b4 <__smakebuf_r+0x70>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f023 0303 	bic.w	r3, r3, #3
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	431d      	orrs	r5, r3
 80071b8:	81a5      	strh	r5, [r4, #12]
 80071ba:	e7cf      	b.n	800715c <__smakebuf_r+0x18>

080071bc <_fstat_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	@ (80071dc <_fstat_r+0x20>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	f7f9 fff3 	bl	80011b4 <_fstat>
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	d102      	bne.n	80071d8 <_fstat_r+0x1c>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	b103      	cbz	r3, 80071d8 <_fstat_r+0x1c>
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
 80071da:	bf00      	nop
 80071dc:	20000488 	.word	0x20000488

080071e0 <_isatty_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d06      	ldr	r5, [pc, #24]	@ (80071fc <_isatty_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7f9 fff2 	bl	80011d4 <_isatty>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_isatty_r+0x1a>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_isatty_r+0x1a>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	20000488 	.word	0x20000488

08007200 <_init>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr

0800720c <_fini>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr
