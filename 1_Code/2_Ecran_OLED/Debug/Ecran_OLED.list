
Ecran_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800325c  0800325c  0000425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff8  08003ff8  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff8  08003ff8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff8  08003ff8  00004ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ffc  08003ffc  00004ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08004014  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08004014  00005490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000845f  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a06  00000000  00000000  0000d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ed  00000000  00000000  0000f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001481b  00000000  00000000  0000fc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bacf  00000000  00000000  00024490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a544  00000000  00000000  0002ff5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb8  00000000  00000000  000aa4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ca  00000000  00000000  000ac3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003244 	.word	0x08003244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003244 	.word	0x08003244

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc6c 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8bc 	bl	8000350 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f87a 	bl	80002d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80001dc:	f000 f8e2 	bl	80003a4 <SSD1306_Init>
  SSD1306_GotoXY(0,0);
 80001e0:	2100      	movs	r1, #0
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fa42 	bl	800066c <SSD1306_GotoXY>
  SSD1306_Puts("Hello", &Font_11x18,1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4908      	ldr	r1, [pc, #32]	@ (800020c <main+0x44>)
 80001ec:	4808      	ldr	r0, [pc, #32]	@ (8000210 <main+0x48>)
 80001ee:	f000 fad1 	bl	8000794 <SSD1306_Puts>
  SSD1306_GotoXY(0,30);
 80001f2:	211e      	movs	r1, #30
 80001f4:	2000      	movs	r0, #0
 80001f6:	f000 fa39 	bl	800066c <SSD1306_GotoXY>
  SSD1306_Puts("World", &Font_11x18,1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	4903      	ldr	r1, [pc, #12]	@ (800020c <main+0x44>)
 80001fe:	4805      	ldr	r0, [pc, #20]	@ (8000214 <main+0x4c>)
 8000200:	f000 fac8 	bl	8000794 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000204:	f000 f98c 	bl	8000520 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x40>
 800020c:	20000000 	.word	0x20000000
 8000210:	0800325c 	.word	0x0800325c
 8000214:	08003264 	.word	0x08003264

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09c      	sub	sp, #112	@ 0x70
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 ffe0 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2230      	movs	r2, #48	@ 0x30
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 ffd2 	bl	80031ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000248:	2303      	movs	r3, #3
 800024a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000268:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800026c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fc28 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027e:	f000 f88b 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fc50 	bl	8002b44 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002aa:	f000 f875 	bl	8000398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002ae:	2320      	movs	r3, #32
 80002b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 fe13 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002c4:	f000 f868 	bl	8000398 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3770      	adds	r7, #112	@ 0x70
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000348 <MX_I2C1_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002da:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002dc:	4a1b      	ldr	r2, [pc, #108]	@ (800034c <MX_I2C1_Init+0x7c>)
 80002de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e6:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030a:	480e      	ldr	r0, [pc, #56]	@ (8000344 <MX_I2C1_Init+0x74>)
 800030c:	f000 fe8a 	bl	8001024 <HAL_I2C_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000316:	f000 f83f 	bl	8000398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031a:	2100      	movs	r1, #0
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <MX_I2C1_Init+0x74>)
 800031e:	f001 fb3b 	bl	8001998 <HAL_I2CEx_ConfigAnalogFilter>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000328:	f000 f836 	bl	8000398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800032c:	2100      	movs	r1, #0
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000330:	f001 fb7d 	bl	8001a2e <HAL_I2CEx_ConfigDigitalFilter>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033a:	f000 f82d 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000030 	.word	0x20000030
 8000348:	40005400 	.word	0x40005400
 800034c:	2000090e 	.word	0x2000090e

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <MX_GPIO_Init+0x44>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a08      	ldr	r2, [pc, #32]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_GPIO_Init+0x44>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <Error_Handler+0x8>

080003a4 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80003aa:	f000 fa19 	bl	80007e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003ae:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80003b2:	2201      	movs	r2, #1
 80003b4:	2178      	movs	r1, #120	@ 0x78
 80003b6:	4858      	ldr	r0, [pc, #352]	@ (8000518 <SSD1306_Init+0x174>)
 80003b8:	f000 ffe8 	bl	800138c <HAL_I2C_IsDeviceReady>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	e0a4      	b.n	8000510 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80003c6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80003ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003cc:	e002      	b.n	80003d4 <SSD1306_Init+0x30>
		p--;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d1f9      	bne.n	80003ce <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80003da:	22ae      	movs	r2, #174	@ 0xae
 80003dc:	2100      	movs	r1, #0
 80003de:	2078      	movs	r0, #120	@ 0x78
 80003e0:	f000 fa70 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	2078      	movs	r0, #120	@ 0x78
 80003ea:	f000 fa6b 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80003ee:	2210      	movs	r2, #16
 80003f0:	2100      	movs	r1, #0
 80003f2:	2078      	movs	r0, #120	@ 0x78
 80003f4:	f000 fa66 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80003f8:	22b0      	movs	r2, #176	@ 0xb0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2078      	movs	r0, #120	@ 0x78
 80003fe:	f000 fa61 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000402:	22c8      	movs	r2, #200	@ 0xc8
 8000404:	2100      	movs	r1, #0
 8000406:	2078      	movs	r0, #120	@ 0x78
 8000408:	f000 fa5c 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800040c:	2200      	movs	r2, #0
 800040e:	2100      	movs	r1, #0
 8000410:	2078      	movs	r0, #120	@ 0x78
 8000412:	f000 fa57 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000416:	2210      	movs	r2, #16
 8000418:	2100      	movs	r1, #0
 800041a:	2078      	movs	r0, #120	@ 0x78
 800041c:	f000 fa52 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000420:	2240      	movs	r2, #64	@ 0x40
 8000422:	2100      	movs	r1, #0
 8000424:	2078      	movs	r0, #120	@ 0x78
 8000426:	f000 fa4d 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800042a:	2281      	movs	r2, #129	@ 0x81
 800042c:	2100      	movs	r1, #0
 800042e:	2078      	movs	r0, #120	@ 0x78
 8000430:	f000 fa48 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000434:	22ff      	movs	r2, #255	@ 0xff
 8000436:	2100      	movs	r1, #0
 8000438:	2078      	movs	r0, #120	@ 0x78
 800043a:	f000 fa43 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800043e:	22a1      	movs	r2, #161	@ 0xa1
 8000440:	2100      	movs	r1, #0
 8000442:	2078      	movs	r0, #120	@ 0x78
 8000444:	f000 fa3e 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000448:	22a6      	movs	r2, #166	@ 0xa6
 800044a:	2100      	movs	r1, #0
 800044c:	2078      	movs	r0, #120	@ 0x78
 800044e:	f000 fa39 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000452:	22a8      	movs	r2, #168	@ 0xa8
 8000454:	2100      	movs	r1, #0
 8000456:	2078      	movs	r0, #120	@ 0x78
 8000458:	f000 fa34 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800045c:	223f      	movs	r2, #63	@ 0x3f
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	@ 0x78
 8000462:	f000 fa2f 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000466:	22a4      	movs	r2, #164	@ 0xa4
 8000468:	2100      	movs	r1, #0
 800046a:	2078      	movs	r0, #120	@ 0x78
 800046c:	f000 fa2a 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000470:	22d3      	movs	r2, #211	@ 0xd3
 8000472:	2100      	movs	r1, #0
 8000474:	2078      	movs	r0, #120	@ 0x78
 8000476:	f000 fa25 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	2078      	movs	r0, #120	@ 0x78
 8000480:	f000 fa20 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000484:	22d5      	movs	r2, #213	@ 0xd5
 8000486:	2100      	movs	r1, #0
 8000488:	2078      	movs	r0, #120	@ 0x78
 800048a:	f000 fa1b 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800048e:	22f0      	movs	r2, #240	@ 0xf0
 8000490:	2100      	movs	r1, #0
 8000492:	2078      	movs	r0, #120	@ 0x78
 8000494:	f000 fa16 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000498:	22d9      	movs	r2, #217	@ 0xd9
 800049a:	2100      	movs	r1, #0
 800049c:	2078      	movs	r0, #120	@ 0x78
 800049e:	f000 fa11 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80004a2:	2222      	movs	r2, #34	@ 0x22
 80004a4:	2100      	movs	r1, #0
 80004a6:	2078      	movs	r0, #120	@ 0x78
 80004a8:	f000 fa0c 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80004ac:	22da      	movs	r2, #218	@ 0xda
 80004ae:	2100      	movs	r1, #0
 80004b0:	2078      	movs	r0, #120	@ 0x78
 80004b2:	f000 fa07 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80004b6:	2212      	movs	r2, #18
 80004b8:	2100      	movs	r1, #0
 80004ba:	2078      	movs	r0, #120	@ 0x78
 80004bc:	f000 fa02 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80004c0:	22db      	movs	r2, #219	@ 0xdb
 80004c2:	2100      	movs	r1, #0
 80004c4:	2078      	movs	r0, #120	@ 0x78
 80004c6:	f000 f9fd 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80004ca:	2220      	movs	r2, #32
 80004cc:	2100      	movs	r1, #0
 80004ce:	2078      	movs	r0, #120	@ 0x78
 80004d0:	f000 f9f8 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80004d4:	228d      	movs	r2, #141	@ 0x8d
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	@ 0x78
 80004da:	f000 f9f3 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80004de:	2214      	movs	r2, #20
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	@ 0x78
 80004e4:	f000 f9ee 	bl	80008c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80004e8:	22af      	movs	r2, #175	@ 0xaf
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	@ 0x78
 80004ee:	f000 f9e9 	bl	80008c4 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f842 	bl	800057c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80004f8:	f000 f812 	bl	8000520 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <SSD1306_Init+0x178>)
 80004fe:	2200      	movs	r2, #0
 8000500:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <SSD1306_Init+0x178>)
 8000504:	2200      	movs	r2, #0
 8000506:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <SSD1306_Init+0x178>)
 800050a:	2201      	movs	r2, #1
 800050c:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000030 	.word	0x20000030
 800051c:	20000484 	.word	0x20000484

08000520 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e01d      	b.n	8000568 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	3b50      	subs	r3, #80	@ 0x50
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	2078      	movs	r0, #120	@ 0x78
 8000538:	f000 f9c4 	bl	80008c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2078      	movs	r0, #120	@ 0x78
 8000542:	f000 f9bf 	bl	80008c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000546:	2210      	movs	r2, #16
 8000548:	2100      	movs	r1, #0
 800054a:	2078      	movs	r0, #120	@ 0x78
 800054c:	f000 f9ba 	bl	80008c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	01db      	lsls	r3, r3, #7
 8000554:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <SSD1306_UpdateScreen+0x58>)
 8000556:	441a      	add	r2, r3
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	2078      	movs	r0, #120	@ 0x78
 800055e:	f000 f955 	bl	800080c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3301      	adds	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b07      	cmp	r3, #7
 800056c:	d9de      	bls.n	800052c <SSD1306_UpdateScreen+0xc>
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000084 	.word	0x20000084

0800057c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d101      	bne.n	8000590 <SSD1306_Fill+0x14>
 800058c:	2300      	movs	r3, #0
 800058e:	e000      	b.n	8000592 <SSD1306_Fill+0x16>
 8000590:	23ff      	movs	r3, #255	@ 0xff
 8000592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000596:	4619      	mov	r1, r3
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <SSD1306_Fill+0x2c>)
 800059a:	f002 fe27 	bl	80031ec <memset>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084

080005ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
 80005b6:	460b      	mov	r3, r1
 80005b8:	80bb      	strh	r3, [r7, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	70fb      	strb	r3, [r7, #3]
	if (
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80005c2:	d848      	bhi.n	8000656 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80005c4:	88bb      	ldrh	r3, [r7, #4]
 80005c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80005c8:	d845      	bhi.n	8000656 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <SSD1306_DrawPixel+0xb8>)
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d11a      	bne.n	800061c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005e6:	88fa      	ldrh	r2, [r7, #6]
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	b298      	uxth	r0, r3
 80005ee:	4603      	mov	r3, r0
 80005f0:	01db      	lsls	r3, r3, #7
 80005f2:	4413      	add	r3, r2
 80005f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <SSD1306_DrawPixel+0xbc>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	2101      	movs	r1, #1
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b259      	sxtb	r1, r3
 800060c:	88fa      	ldrh	r2, [r7, #6]
 800060e:	4603      	mov	r3, r0
 8000610:	01db      	lsls	r3, r3, #7
 8000612:	4413      	add	r3, r2
 8000614:	b2c9      	uxtb	r1, r1
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <SSD1306_DrawPixel+0xbc>)
 8000618:	54d1      	strb	r1, [r2, r3]
 800061a:	e01d      	b.n	8000658 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	08db      	lsrs	r3, r3, #3
 8000622:	b298      	uxth	r0, r3
 8000624:	4603      	mov	r3, r0
 8000626:	01db      	lsls	r3, r3, #7
 8000628:	4413      	add	r3, r2
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <SSD1306_DrawPixel+0xbc>)
 800062c:	5cd3      	ldrb	r3, [r2, r3]
 800062e:	b25a      	sxtb	r2, r3
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	b25b      	sxtb	r3, r3
 8000642:	4013      	ands	r3, r2
 8000644:	b259      	sxtb	r1, r3
 8000646:	88fa      	ldrh	r2, [r7, #6]
 8000648:	4603      	mov	r3, r0
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	4413      	add	r3, r2
 800064e:	b2c9      	uxtb	r1, r1
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <SSD1306_DrawPixel+0xbc>)
 8000652:	54d1      	strb	r1, [r2, r3]
 8000654:	e000      	b.n	8000658 <SSD1306_DrawPixel+0xac>
		return;
 8000656:	bf00      	nop
	}
}
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000484 	.word	0x20000484
 8000668:	20000084 	.word	0x20000084

0800066c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	80fb      	strh	r3, [r7, #6]
 8000678:	4613      	mov	r3, r2
 800067a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800067c:	4a05      	ldr	r2, [pc, #20]	@ (8000694 <SSD1306_GotoXY+0x28>)
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000682:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <SSD1306_GotoXY+0x28>)
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	8053      	strh	r3, [r2, #2]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000484 	.word	0x20000484

08000698 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006a8:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <SSD1306_Putc+0xf8>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
	if (
 80006b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80006b6:	dc07      	bgt.n	80006c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80006b8:	4b35      	ldr	r3, [pc, #212]	@ (8000790 <SSD1306_Putc+0xf8>)
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	461a      	mov	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c6:	dd01      	ble.n	80006cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e05d      	b.n	8000788 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e04b      	b.n	800076a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	3b20      	subs	r3, #32
 80006da:	6839      	ldr	r1, [r7, #0]
 80006dc:	7849      	ldrb	r1, [r1, #1]
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	440b      	add	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	e030      	b.n	8000758 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d010      	beq.n	8000728 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <SSD1306_Putc+0xf8>)
 8000708:	881a      	ldrh	r2, [r3, #0]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	b29b      	uxth	r3, r3
 800070e:	4413      	add	r3, r2
 8000710:	b298      	uxth	r0, r3
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <SSD1306_Putc+0xf8>)
 8000714:	885a      	ldrh	r2, [r3, #2]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	4619      	mov	r1, r3
 8000722:	f7ff ff43 	bl	80005ac <SSD1306_DrawPixel>
 8000726:	e014      	b.n	8000752 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <SSD1306_Putc+0xf8>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b298      	uxth	r0, r3
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <SSD1306_Putc+0xf8>)
 8000736:	885a      	ldrh	r2, [r3, #2]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	b29b      	uxth	r3, r3
 800073c:	4413      	add	r3, r2
 800073e:	b299      	uxth	r1, r3
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	f7ff ff2d 	bl	80005ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	3301      	adds	r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	4293      	cmp	r3, r2
 8000762:	d3c8      	bcc.n	80006f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	461a      	mov	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4293      	cmp	r3, r2
 8000774:	d3ad      	bcc.n	80006d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <SSD1306_Putc+0xf8>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	4413      	add	r3, r2
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <SSD1306_Putc+0xf8>)
 8000784:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000786:	79fb      	ldrb	r3, [r7, #7]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000484 	.word	0x20000484

08000794 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80007a2:	e012      	b.n	80007ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff73 	bl	8000698 <SSD1306_Putc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d002      	beq.n	80007c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	e008      	b.n	80007d6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1e8      	bne.n	80007a4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	781b      	ldrb	r3, [r3, #0]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <ssd1306_I2C_Init+0x28>)
 80007e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007ea:	e002      	b.n	80007f2 <ssd1306_I2C_Init+0x12>
		p--;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f9      	bne.n	80007ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	0003d090 	.word	0x0003d090

0800080c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800080c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000810:	b089      	sub	sp, #36	@ 0x24
 8000812:	af02      	add	r7, sp, #8
 8000814:	603a      	str	r2, [r7, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	460b      	mov	r3, r1
 800081e:	71bb      	strb	r3, [r7, #6]
 8000820:	4613      	mov	r3, r2
 8000822:	80bb      	strh	r3, [r7, #4]
 8000824:	466b      	mov	r3, sp
 8000826:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	1c59      	adds	r1, r3, #1
 800082c:	1e4b      	subs	r3, r1, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	460a      	mov	r2, r1
 8000832:	2300      	movs	r3, #0
 8000834:	4690      	mov	r8, r2
 8000836:	4699      	mov	r9, r3
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000844:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000848:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800084c:	460a      	mov	r2, r1
 800084e:	2300      	movs	r3, #0
 8000850:	4614      	mov	r4, r2
 8000852:	461d      	mov	r5, r3
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	00eb      	lsls	r3, r5, #3
 800085e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000862:	00e2      	lsls	r2, r4, #3
 8000864:	460b      	mov	r3, r1
 8000866:	3307      	adds	r3, #7
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	ebad 0d03 	sub.w	sp, sp, r3
 8000870:	ab02      	add	r3, sp, #8
 8000872:	3300      	adds	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800087c:	2301      	movs	r3, #1
 800087e:	75fb      	strb	r3, [r7, #23]
 8000880:	e00a      	b.n	8000898 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	3b01      	subs	r3, #1
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	441a      	add	r2, r3
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	7811      	ldrb	r1, [r2, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	3301      	adds	r3, #1
 8000896:	75fb      	strb	r3, [r7, #23]
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	b29b      	uxth	r3, r3
 800089c:	88ba      	ldrh	r2, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d2ef      	bcs.n	8000882 <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	220a      	movs	r2, #10
 80008aa:	9200      	str	r2, [sp, #0]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <ssd1306_I2C_WriteMulti+0xb4>)
 80008b0:	f000 fc54 	bl	800115c <HAL_I2C_Master_Transmit>
 80008b4:	46b5      	mov	sp, r6
}
 80008b6:	bf00      	nop
 80008b8:	371c      	adds	r7, #28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008c0:	20000030 	.word	0x20000030

080008c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	460b      	mov	r3, r1
 80008d0:	71bb      	strb	r3, [r7, #6]
 80008d2:	4613      	mov	r3, r2
 80008d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80008da:	797b      	ldrb	r3, [r7, #5]
 80008dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	b299      	uxth	r1, r3
 80008e2:	f107 020c 	add.w	r2, r7, #12
 80008e6:	230a      	movs	r3, #10
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2302      	movs	r3, #2
 80008ec:	4803      	ldr	r0, [pc, #12]	@ (80008fc <ssd1306_I2C_Write+0x38>)
 80008ee:	f000 fc35 	bl	800115c <HAL_I2C_Master_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000030 	.word	0x20000030

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <HAL_I2C_MspInit+0x7c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d127      	bne.n	80009ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000982:	23c0      	movs	r3, #192	@ 0xc0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <HAL_I2C_MspInit+0x84>)
 800099e:	f000 f9cf 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_I2C_MspInit+0x80>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40005400 	.word	0x40005400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f885 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a58:	f7ff ffea 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fbbb 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fb9f 	bl	80001c8 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a8c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a98:	08004000 	.word	0x08004000
  ldr r2, =_sbss
 8000a9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aa0:	20000490 	.word	0x20000490

08000aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_Init+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_Init+0x28>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f90d 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff ff1c 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f917 	bl	8000d26 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f8ed 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000010 	.word	0x20000010
 8000b58:	2000048c 	.word	0x2000048c

08000b5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000048c 	.word	0x2000048c

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff47 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff5c 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffb0 	bl	8000c94 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e14e      	b.n	8000fee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8140 	beq.w	8000fe8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x40>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 0201 	and.w	r2, r3, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	6939      	ldr	r1, [r7, #16]
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0203 	and.w	r2, r3, #3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 809a 	beq.w	8000fe8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b55      	ldr	r3, [pc, #340]	@ (800100c <HAL_GPIO_Init+0x2cc>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a54      	ldr	r2, [pc, #336]	@ (800100c <HAL_GPIO_Init+0x2cc>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b52      	ldr	r3, [pc, #328]	@ (800100c <HAL_GPIO_Init+0x2cc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ecc:	4a50      	ldr	r2, [pc, #320]	@ (8001010 <HAL_GPIO_Init+0x2d0>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1e0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a46      	ldr	r2, [pc, #280]	@ (8001014 <HAL_GPIO_Init+0x2d4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a45      	ldr	r2, [pc, #276]	@ (8001018 <HAL_GPIO_Init+0x2d8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1d8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a44      	ldr	r2, [pc, #272]	@ (800101c <HAL_GPIO_Init+0x2dc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1d4>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f14:	2305      	movs	r3, #5
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f20:	2300      	movs	r3, #0
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f32:	4937      	ldr	r1, [pc, #220]	@ (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f40:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f64:	4a2e      	ldr	r2, [pc, #184]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f8e:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb8:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f aea9 	bne.w	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	48000400 	.word	0x48000400
 8001018:	48000800 	.word	0x48000800
 800101c:	48000c00 	.word	0x48000c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e08d      	b.n	8001152 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fc7c 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	@ 0x24
 8001054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	e006      	b.n	80010ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d108      	bne.n	80010c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e007      	b.n	80010d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69d9      	ldr	r1, [r3, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2220      	movs	r2, #32
 800113e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	817b      	strh	r3, [r7, #10]
 800116c:	4613      	mov	r3, r2
 800116e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b20      	cmp	r3, #32
 800117a:	f040 80fd 	bne.w	8001378 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_I2C_Master_Transmit+0x30>
 8001188:	2302      	movs	r3, #2
 800118a:	e0f6      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001194:	f7ff fce2 	bl	8000b5c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2319      	movs	r3, #25
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fa00 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0e1      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2221      	movs	r2, #33	@ 0x21
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2210      	movs	r2, #16
 80011c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	893a      	ldrh	r2, [r7, #8]
 80011d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2bff      	cmp	r3, #255	@ 0xff
 80011e6:	d906      	bls.n	80011f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	22ff      	movs	r2, #255	@ 0xff
 80011ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80011ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e007      	b.n	8001206 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001200:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001204:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800120a:	2b00      	cmp	r3, #0
 800120c:	d024      	beq.n	8001258 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001228:	b29b      	uxth	r3, r3
 800122a:	3b01      	subs	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001236:	3b01      	subs	r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	8979      	ldrh	r1, [r7, #10]
 800124a:	4b4e      	ldr	r3, [pc, #312]	@ (8001384 <HAL_I2C_Master_Transmit+0x228>)
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fb6f 	bl	8001934 <I2C_TransferConfig>
 8001256:	e066      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125c:	b2da      	uxtb	r2, r3
 800125e:	8979      	ldrh	r1, [r7, #10]
 8001260:	4b48      	ldr	r3, [pc, #288]	@ (8001384 <HAL_I2C_Master_Transmit+0x228>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 fb64 	bl	8001934 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800126c:	e05b      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	6a39      	ldr	r1, [r7, #32]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f9f3 	bl	800165e <I2C_WaitOnTXISFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07b      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129c:	b29b      	uxth	r3, r3
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d034      	beq.n	8001326 <HAL_I2C_Master_Transmit+0x1ca>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d130      	bne.n	8001326 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	2200      	movs	r2, #0
 80012cc:	2180      	movs	r1, #128	@ 0x80
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 f96c 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e04d      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2bff      	cmp	r3, #255	@ 0xff
 80012e6:	d90e      	bls.n	8001306 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	@ 0xff
 80012ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fb18 	bl	8001934 <I2C_TransferConfig>
 8001304:	e00f      	b.n	8001326 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001314:	b2da      	uxtb	r2, r3
 8001316:	8979      	ldrh	r1, [r7, #10]
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fb07 	bl	8001934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d19e      	bne.n	800126e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	6a39      	ldr	r1, [r7, #32]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f9d9 	bl	80016ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e01a      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2220      	movs	r2, #32
 800134a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_I2C_Master_Transmit+0x22c>)
 8001358:	400b      	ands	r3, r1
 800135a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001378:	2302      	movs	r3, #2
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	80002000 	.word	0x80002000
 8001388:	fe00e800 	.word	0xfe00e800

0800138c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	f040 80d6 	bne.w	800155a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80013bc:	d101      	bne.n	80013c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80013be:	2302      	movs	r3, #2
 80013c0:	e0cc      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_I2C_IsDeviceReady+0x44>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e0c5      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2224      	movs	r2, #36	@ 0x24
 80013dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_I2C_IsDeviceReady+0x72>
 80013ee:	897b      	ldrh	r3, [r7, #10]
 80013f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013fc:	e006      	b.n	800140c <HAL_I2C_IsDeviceReady+0x80>
 80013fe:	897b      	ldrh	r3, [r7, #10]
 8001400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001404:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001408:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fba3 	bl	8000b5c <HAL_GetTick>
 8001416:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b20      	cmp	r3, #32
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b10      	cmp	r3, #16
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001444:	e034      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01a      	beq.n	8001484 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fb85 	bl	8000b5c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <HAL_I2C_IsDeviceReady+0xd8>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e06b      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b20      	cmp	r3, #32
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_I2C_IsDeviceReady+0x130>
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0c4      	beq.n	8001446 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d01a      	beq.n	8001500 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	2120      	movs	r1, #32
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f869 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e03b      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e02d      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f84e 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e020      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	f63f af56 	bhi.w	80013e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f043 0220 	orr.w	r2, r3, #32
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800155a:	2302      	movs	r3, #2
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d103      	bne.n	8001582 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d007      	beq.n	80015a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  }
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015bc:	e03b      	b.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f8d6 	bl	8001774 <I2C_IsErrorOccurred>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e041      	b.n	8001656 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d02d      	beq.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015da:	f7ff fabf 	bl	8000b5c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d302      	bcc.n	80015f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d122      	bne.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4013      	ands	r3, r2
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	429a      	cmp	r2, r3
 800160c:	d113      	bne.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699a      	ldr	r2, [r3, #24]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4013      	ands	r3, r2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	429a      	cmp	r2, r3
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	429a      	cmp	r2, r3
 8001652:	d0b4      	beq.n	80015be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800166a:	e033      	b.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f87f 	bl	8001774 <I2C_IsErrorOccurred>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e031      	b.n	80016e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001686:	d025      	beq.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001688:	f7ff fa68 	bl	8000b5c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d302      	bcc.n	800169e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d11a      	bne.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d013      	beq.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e007      	b.n	80016e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d1c4      	bne.n	800166c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f8:	e02f      	b.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f838 	bl	8001774 <I2C_IsErrorOccurred>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02d      	b.n	800176a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170e:	f7ff fa25 	bl	8000b5c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11a      	bne.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b20      	cmp	r3, #32
 8001730:	d013      	beq.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f043 0220 	orr.w	r2, r3, #32
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d1c8      	bne.n	80016fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d068      	beq.n	8001872 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2210      	movs	r2, #16
 80017a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017a8:	e049      	b.n	800183e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d045      	beq.n	800183e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017b2:	f7ff f9d3 	bl	8000b5c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d302      	bcc.n	80017c8 <I2C_IsErrorOccurred+0x54>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13a      	bne.n	800183e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017ea:	d121      	bne.n	8001830 <I2C_IsErrorOccurred+0xbc>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017f2:	d01d      	beq.n	8001830 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b20      	cmp	r3, #32
 80017f8:	d01a      	beq.n	8001830 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001808:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800180a:	f7ff f9a7 	bl	8000b5c <HAL_GetTick>
 800180e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001810:	e00e      	b.n	8001830 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001812:	f7ff f9a3 	bl	8000b5c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b19      	cmp	r3, #25
 800181e:	d907      	bls.n	8001830 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800182e:	e006      	b.n	800183e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b20      	cmp	r3, #32
 800183c:	d1e9      	bne.n	8001812 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b20      	cmp	r3, #32
 800184a:	d003      	beq.n	8001854 <I2C_IsErrorOccurred+0xe0>
 800184c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0aa      	beq.n	80017aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80018e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01c      	beq.n	8001922 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff fe3b 	bl	8001564 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <I2C_IsErrorOccurred+0x1bc>)
 80018fa:	400b      	ands	r3, r1
 80018fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	431a      	orrs	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001926:	4618      	mov	r0, r3
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	fe00e800 	.word	0xfe00e800

08001934 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	4613      	mov	r3, r2
 8001944:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	041b      	lsls	r3, r3, #16
 8001950:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001954:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	4313      	orrs	r3, r2
 800195e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001962:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <I2C_TransferConfig+0x60>)
 8001974:	430b      	orrs	r3, r1
 8001976:	43db      	mvns	r3, r3
 8001978:	ea02 0103 	and.w	r1, r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	03ff63ff 	.word	0x03ff63ff

08001998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d138      	bne.n	8001a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e032      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	@ 0x24
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d139      	bne.n	8001ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e033      	b.n	8001aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2224      	movs	r2, #36	@ 0x24
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f001 b823 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 817d 	beq.w	8001dfe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b04:	4bbc      	ldr	r3, [pc, #752]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b10:	4bb9      	ldr	r3, [pc, #740]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d15c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x10e>
 8001b1c:	4bb6      	ldr	r3, [pc, #728]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b28:	d155      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x10e>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x94>
 8001b56:	4ba8      	ldr	r3, [pc, #672]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001b5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b84:	4b9c      	ldr	r3, [pc, #624]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 811f 	beq.w	8001dfc <HAL_RCC_OscConfig+0x334>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 8116 	bne.w	8001dfc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f000 bfaf 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
 8001be8:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a82      	ldr	r2, [pc, #520]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e036      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x158>
 8001c06:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b79      	ldr	r3, [pc, #484]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a78      	ldr	r2, [pc, #480]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e021      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x184>
 8001c32:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a70      	ldr	r2, [pc, #448]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0x19c>
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a69      	ldr	r2, [pc, #420]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a66      	ldr	r2, [pc, #408]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c64:	4b64      	ldr	r3, [pc, #400]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	f023 020f 	bic.w	r2, r3, #15
 8001c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	495f      	ldr	r1, [pc, #380]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d059      	beq.n	8001d42 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ff65 	bl	8000b5c <HAL_GetTick>
 8001c92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7fe ff60 	bl	8000b5c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	@ 0x64
 8001ca6:	d902      	bls.n	8001cae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f000 bf43 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001cae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001cc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x218>
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_OscConfig+0x244>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001cfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d08:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ab      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1d0>
 8001d40:	e05d      	b.n	8001dfe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe ff0b 	bl	8000b5c <HAL_GetTick>
 8001d46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe ff06 	bl	8000b5c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	@ 0x64
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f000 bee9 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2cc>
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e015      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
 8001d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d98:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001da8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001db0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dc4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001dc8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001dd4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0220 	orr.w	r2, r2, #32
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ab      	bne.n	8001d4c <HAL_RCC_OscConfig+0x284>
 8001df4:	e003      	b.n	8001dfe <HAL_RCC_OscConfig+0x336>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 817d 	beq.w	800210e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e14:	4ba6      	ldr	r3, [pc, #664]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e20:	4ba3      	ldr	r3, [pc, #652]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d172      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d16c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x44a>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3a0>
 8001e62:	4b93      	ldr	r3, [pc, #588]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e80:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e8c:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	2202      	movs	r2, #2
 8001e92:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e96:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ea2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f042 0220 	orr.w	r2, r2, #32
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x410>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f000 be2e 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	21f8      	movs	r1, #248	@ 0xf8
 8001eee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ef6:	fa91 f1a1 	rbit	r1, r1
 8001efa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001efe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f02:	fab1 f181 	clz	r1, r1
 8001f06:	b2c9      	uxtb	r1, r1
 8001f08:	408b      	lsls	r3, r1
 8001f0a:	4969      	ldr	r1, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	e0fd      	b.n	800210e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8088 	beq.w	8002034 <HAL_RCC_OscConfig+0x56c>
 8001f24:	2301      	movs	r3, #1
 8001f26:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f36:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe fe04 	bl	8000b5c <HAL_GetTick>
 8001f54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7fe fdff 	bl	8000b5c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d902      	bls.n	8001f70 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f000 bde2 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f82:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4d8>
 8001f9a:	4b45      	ldr	r3, [pc, #276]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x500>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fda:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0af      	beq.n	8001f5a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	21f8      	movs	r1, #248	@ 0xf8
 8002010:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002018:	fa91 f1a1 	rbit	r1, r1
 800201c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002020:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002024:	fab1 f181 	clz	r1, r1
 8002028:	b2c9      	uxtb	r1, r1
 800202a:	408b      	lsls	r3, r1
 800202c:	4920      	ldr	r1, [pc, #128]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
 8002032:	e06c      	b.n	800210e <HAL_RCC_OscConfig+0x646>
 8002034:	2301      	movs	r3, #1
 8002036:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002046:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002054:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	461a      	mov	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fd7c 	bl	8000b5c <HAL_GetTick>
 8002064:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fd77 	bl	8000b5c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d902      	bls.n	8002080 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	f000 bd5a 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002092:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d104      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5ec>
 80020aa:	4b01      	ldr	r3, [pc, #4]	@ (80020b0 <HAL_RCC_OscConfig+0x5e8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x614>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020d8:	4bc8      	ldr	r3, [pc, #800]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	2202      	movs	r2, #2
 80020de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f002 021f 	and.w	r2, r2, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ad      	bne.n	800206a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8110 	beq.w	8002344 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d079      	beq.n	8002228 <HAL_RCC_OscConfig+0x760>
 8002134:	2301      	movs	r3, #1
 8002136:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4bab      	ldr	r3, [pc, #684]	@ (8002400 <HAL_RCC_OscConfig+0x938>)
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fcfd 	bl	8000b5c <HAL_GetTick>
 8002162:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe fcf8 	bl	8000b5c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d902      	bls.n	800217e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	f000 bcdb 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d8:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 80021da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021e4:	2102      	movs	r1, #2
 80021e6:	6019      	str	r1, [r3, #0]
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f1a3 	rbit	r1, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021fe:	6019      	str	r1, [r3, #0]
  return result;
 8002200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002204:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0a0      	beq.n	8002168 <HAL_RCC_OscConfig+0x6a0>
 8002226:	e08d      	b.n	8002344 <HAL_RCC_OscConfig+0x87c>
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002246:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800224a:	601a      	str	r2, [r3, #0]
  return result;
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002254:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x938>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fc77 	bl	8000b5c <HAL_GetTick>
 800226e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fc72 	bl	8000b5c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d902      	bls.n	800228a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bc55 	b.w	8002b34 <HAL_RCC_OscConfig+0x106c>
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 80022f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002302:	2102      	movs	r1, #2
 8002304:	6019      	str	r1, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f1a3 	rbit	r1, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800231c:	6019      	str	r1, [r3, #0]
  return result;
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d197      	bne.n	8002274 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 81a1 	beq.w	800269c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d116      	bne.n	800239a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a22      	ldr	r2, [pc, #136]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
 8002378:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002392:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HAL_RCC_OscConfig+0x93c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a16      	ldr	r2, [pc, #88]	@ (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fbd3 	bl	8000b5c <HAL_GetTick>
 80023b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	e009      	b.n	80023d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe fbce 	bl	8000b5c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e3b1      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <HAL_RCC_OscConfig+0x93c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10d      	bne.n	8002408 <HAL_RCC_OscConfig+0x940>
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a02      	ldr	r2, [pc, #8]	@ (80023fc <HAL_RCC_OscConfig+0x934>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e03c      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	10908120 	.word	0x10908120
 8002404:	40007000 	.word	0x40007000
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x96a>
 8002418:	4bc1      	ldr	r3, [pc, #772]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4ac0      	ldr	r2, [pc, #768]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4bbe      	ldr	r3, [pc, #760]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4abd      	ldr	r2, [pc, #756]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0304 	bic.w	r3, r3, #4
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e020      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x994>
 8002442:	4bb7      	ldr	r3, [pc, #732]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4ab6      	ldr	r2, [pc, #728]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4bb4      	ldr	r3, [pc, #720]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4ab3      	ldr	r2, [pc, #716]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x9ac>
 800245c:	4bb0      	ldr	r3, [pc, #704]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4aaf      	ldr	r2, [pc, #700]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	4bad      	ldr	r3, [pc, #692]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4aac      	ldr	r2, [pc, #688]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8081 	beq.w	8002588 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7fe fb69 	bl	8000b5c <HAL_GetTick>
 800248a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fb64 	bl	8000b5c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e345      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0xa4c>
 800250e:	4b84      	ldr	r3, [pc, #528]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0xa74>
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b79      	ldr	r3, [pc, #484]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002540:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002544:	2102      	movs	r1, #2
 8002546:	6011      	str	r1, [r2, #0]
 8002548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800254c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	fa92 f1a2 	rbit	r1, r2
 8002556:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800255e:	6011      	str	r1, [r2, #0]
  return result;
 8002560:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002564:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d084      	beq.n	8002490 <HAL_RCC_OscConfig+0x9c8>
 8002586:	e07f      	b.n	8002688 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fae8 	bl	8000b5c <HAL_GetTick>
 800258c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fae3 	bl	8000b5c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e2c4      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025f0:	601a      	str	r2, [r3, #0]
  return result;
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0xb4e>
 8002610:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	e013      	b.n	800263e <HAL_RCC_OscConfig+0xb76>
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4b39      	ldr	r3, [pc, #228]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002642:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002646:	2102      	movs	r1, #2
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fa92 f1a2 	rbit	r1, r2
 8002658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002660:	6011      	str	r1, [r2, #0]
  return result;
 8002662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002666:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d184      	bne.n	8002592 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002688:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8242 	beq.w	8002b32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_RCC_OscConfig+0xc58>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	f000 8213 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	f040 8162 	bne.w	8002992 <HAL_RCC_OscConfig+0xeca>
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026f2:	601a      	str	r2, [r3, #0]
  return result;
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002708:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fa22 	bl	8000b5c <HAL_GetTick>
 8002718:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	e00c      	b.n	8002738 <HAL_RCC_OscConfig+0xc70>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fa1a 	bl	8000b5c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1fd      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800275c:	601a      	str	r2, [r3, #0]
  return result;
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002766:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0xcba>
 800277c:	4bb0      	ldr	r3, [pc, #704]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e027      	b.n	80027d2 <HAL_RCC_OscConfig+0xd0a>
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800278a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	4b9c      	ldr	r3, [pc, #624]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027da:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027de:	6011      	str	r1, [r2, #0]
 80027e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	fa92 f1a2 	rbit	r1, r2
 80027ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027f6:	6011      	str	r1, [r2, #0]
  return result;
 80027f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	fab2 f282 	clz	r2, r2
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f002 021f 	and.w	r2, r2, #31
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d182      	bne.n	8002724 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281e:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	430b      	orrs	r3, r1
 8002840:	497f      	ldr	r1, [pc, #508]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800284e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800286a:	601a      	str	r2, [r3, #0]
  return result;
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002874:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe f966 	bl	8000b5c <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	e009      	b.n	80028aa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe f961 	bl	8000b5c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e144      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe2c>
 80028ee:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e027      	b.n	8002944 <HAL_RCC_OscConfig+0xe7c>
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	4b3f      	ldr	r3, [pc, #252]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002948:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800294c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002950:	6011      	str	r1, [r2, #0]
 8002952:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002956:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002964:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002968:	6011      	str	r1, [r2, #0]
  return result;
 800296a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	fab2 f282 	clz	r2, r2
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f002 021f 	and.w	r2, r2, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d082      	beq.n	8002896 <HAL_RCC_OscConfig+0xdce>
 8002990:	e0cf      	b.n	8002b32 <HAL_RCC_OscConfig+0x106a>
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800299a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029b6:	601a      	str	r2, [r3, #0]
  return result;
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f8c0 	bl	8000b5c <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe f8bb 	bl	8000b5c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e09e      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d104      	bne.n	8002a44 <HAL_RCC_OscConfig+0xf7c>
 8002a3a:	4b01      	ldr	r3, [pc, #4]	@ (8002a40 <HAL_RCC_OscConfig+0xf78>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_OscConfig+0xfcc>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_OscConfig+0x1078>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aa0:	6011      	str	r1, [r2, #0]
 8002aa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	fa92 f1a2 	rbit	r1, r2
 8002ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ab8:	6011      	str	r1, [r2, #0]
  return result;
 8002aba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002abe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d180      	bne.n	80029e2 <HAL_RCC_OscConfig+0xf1a>
 8002ae0:	e027      	b.n	8002b32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01e      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_RCC_OscConfig+0x1078>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002afe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b09e      	sub	sp, #120	@ 0x78
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e162      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b90      	ldr	r3, [pc, #576]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	498b      	ldr	r1, [pc, #556]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b89      	ldr	r3, [pc, #548]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e14a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	497f      	ldr	r1, [pc, #508]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80dc 	beq.w	8002d70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d13c      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xf6>
 8002bc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_ClockConfig+0xa6>
 8002be4:	4b6f      	ldr	r3, [pc, #444]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	e00f      	b.n	8002c0a <HAL_RCC_ClockConfig+0xc6>
 8002bea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0220 	orr.w	r2, r2, #32
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d17b      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0f3      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d13c      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x178>
 8002c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x128>
 8002c66:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_ClockConfig+0x148>
 8002c6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c88:	4b46      	ldr	r3, [pc, #280]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c94:	fa92 f2a2 	rbit	r2, r2
 8002c98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f002 021f 	and.w	r2, r2, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d13a      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0b2      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e00d      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1bc>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2202      	movs	r2, #2
 8002d02:	61ba      	str	r2, [r7, #24]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	fa92 f2a2 	rbit	r2, r2
 8002d0a:	617a      	str	r2, [r7, #20]
  return result;
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0220 	orr.w	r2, r2, #32
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e079      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	491a      	ldr	r1, [pc, #104]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fd ff0c 	bl	8000b5c <HAL_GetTick>
 8002d44:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fd ff08 	bl	8000b5c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e061      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d214      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4906      	ldr	r1, [pc, #24]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e040      	b.n	8002e22 <HAL_RCC_ClockConfig+0x2de>
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	491a      	ldr	r1, [pc, #104]	@ (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4912      	ldr	r1, [pc, #72]	@ (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002de6:	f000 f829 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dea:	4601      	mov	r1, r0
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df4:	22f0      	movs	r2, #240	@ 0xf0
 8002df6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	fa92 f2a2 	rbit	r2, r2
 8002dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	40d3      	lsrs	r3, r2
 8002e0a:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x2ec>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e12:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <HAL_RCC_ClockConfig+0x2f0>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_RCC_ClockConfig+0x2f4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fe5a 	bl	8000ad4 <HAL_InitTick>
  
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3778      	adds	r7, #120	@ 0x78
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08003fc8 	.word	0x08003fc8
 8002e34:	20000008 	.word	0x20000008
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x30>
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6a:	e026      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6e:	613b      	str	r3, [r7, #16]
      break;
 8002e70:	e026      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	613b      	str	r3, [r7, #16]
      break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebc:	613b      	str	r3, [r7, #16]
      break;
 8002ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec0:	693b      	ldr	r3, [r7, #16]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	08003fd8 	.word	0x08003fd8
 8002edc:	08003fe8 	.word	0x08003fe8
 8002ee0:	003d0900 	.word	0x003d0900

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b092      	sub	sp, #72	@ 0x48
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80d4 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f08:	4b4e      	ldr	r3, [pc, #312]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10e      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f14:	4b4b      	ldr	r3, [pc, #300]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4a4a      	ldr	r2, [pc, #296]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	61d3      	str	r3, [r2, #28]
 8002f20:	4b48      	ldr	r3, [pc, #288]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b45      	ldr	r3, [pc, #276]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b42      	ldr	r3, [pc, #264]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a41      	ldr	r2, [pc, #260]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fe07 	bl	8000b5c <HAL_GetTick>
 8002f4e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fd fe03 	bl	8000b5c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e13c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b38      	ldr	r3, [pc, #224]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f70:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8084 	beq.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d07c      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f90:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2301      	movs	r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fe2:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04b      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fdb3 	bl	8000b5c <HAL_GetTick>
 8002ff6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fd fdaf 	bl	8000b5c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0e6      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
  return result;
 8003028:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d108      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800303e:	4b01      	ldr	r3, [pc, #4]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	e00d      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	10908100 	.word	0x10908100
 8003050:	2302      	movs	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	4b62      	ldr	r3, [pc, #392]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	2202      	movs	r2, #2
 8003062:	613a      	str	r2, [r7, #16]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	fa92 f2a2 	rbit	r2, r2
 800306a:	60fa      	str	r2, [r7, #12]
  return result;
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	fab2 f282 	clz	r2, r2
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	f002 021f 	and.w	r2, r2, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f202 	lsl.w	r2, r1, r2
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0b7      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800308a:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4954      	ldr	r1, [pc, #336]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003098:	4313      	orrs	r3, r2
 800309a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800309c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b50      	ldr	r3, [pc, #320]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030bc:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	f023 0203 	bic.w	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4947      	ldr	r1, [pc, #284]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030da:	4b43      	ldr	r3, [pc, #268]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f023 0210 	bic.w	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4940      	ldr	r1, [pc, #256]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f8:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	f023 0220 	bic.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	4938      	ldr	r1, [pc, #224]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003106:	4313      	orrs	r3, r2
 8003108:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003116:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4931      	ldr	r1, [pc, #196]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003124:	4313      	orrs	r3, r2
 8003126:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003134:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4929      	ldr	r1, [pc, #164]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003152:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4922      	ldr	r1, [pc, #136]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003160:	4313      	orrs	r3, r2
 8003162:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003170:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	491a      	ldr	r1, [pc, #104]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800317e:	4313      	orrs	r3, r2
 8003180:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800318e:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	4913      	ldr	r1, [pc, #76]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800319c:	4313      	orrs	r3, r2
 800319e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	490b      	ldr	r1, [pc, #44]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031ca:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3748      	adds	r7, #72	@ 0x48
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000

080031ec <memset>:
 80031ec:	4402      	add	r2, r0
 80031ee:	4603      	mov	r3, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003234 <__libc_init_array+0x38>)
 8003200:	4c0d      	ldr	r4, [pc, #52]	@ (8003238 <__libc_init_array+0x3c>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	2600      	movs	r6, #0
 8003208:	42a6      	cmp	r6, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	4d0b      	ldr	r5, [pc, #44]	@ (800323c <__libc_init_array+0x40>)
 800320e:	4c0c      	ldr	r4, [pc, #48]	@ (8003240 <__libc_init_array+0x44>)
 8003210:	f000 f818 	bl	8003244 <_init>
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	2600      	movs	r6, #0
 800321a:	42a6      	cmp	r6, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	f855 3b04 	ldr.w	r3, [r5], #4
 8003224:	4798      	blx	r3
 8003226:	3601      	adds	r6, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	f855 3b04 	ldr.w	r3, [r5], #4
 800322e:	4798      	blx	r3
 8003230:	3601      	adds	r6, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	08003ff8 	.word	0x08003ff8
 8003238:	08003ff8 	.word	0x08003ff8
 800323c:	08003ff8 	.word	0x08003ff8
 8003240:	08003ffc 	.word	0x08003ffc

08003244 <_init>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr

08003250 <_fini>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr
